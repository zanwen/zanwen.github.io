<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARM核学习（一）工作模式及寄存器资源</title>
    <url>/2024/11/23/1780.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<p><a href="https://developer.arm.com/documentation/ddi0406/latest/">ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition</a></p>
<h1 id="arm-he-ar-mv-7-a-r-gong-zuo-mo-shi">ARM核（ARMv7-A/R）工作模式</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123192806705.png" alt="Table B1-1 ARM processor modes  "></p>
<ul>
<li>
<p>从异常模式来看，只有 User 和 System 是非异常模式；</p>
</li>
<li>
<p>从特权级别来看，只有 User 是非特权级别；</p>
</li>
</ul>
<h2 id="privilege-level">Privilege Level</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123192948933.png" alt="Privilege Level"></p>
<h2 id="arm-processor-modes">ARM Processor Modes</h2>
<h3 id="user-mode">User mode</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123193912894.png" alt="image-20241123193912894"></p>
<ul>
<li>操作系统通过在用户模式下运行引用程序来限制其对系统资源的访问，例如文件、进程等。</li>
<li>用户模式下的任何应用程序不能切换模式，除非通过软中断或异常。</li>
</ul>
<h3 id="system-mode">System mode</h3>
<blockquote>
<p>Software executing in System mode executes at PL1. System mode has the same registers available</p>
<p>as User mode, and is not entered by any exception</p>
</blockquote>
<p>在系统模式下运行的软件拥有PL1的特权，能够访问一些受控资源。系统模式和用户模式共用同一套可用的寄存器，并且无法通过任何异常来进入该模式。</p>
<h3 id="supervisor-mode">Supervisor mode</h3>
<blockquote>
<p>Supervisor mode is the default mode to which a Supervisor Call exception is taken.<br>
Executing a SVC (Supervisor Call) instruction generates an Supervisor Call exception, that is taken<br>
to Supervisor mode.<br>
A processor enters Supervisor mode on Reset.</p>
</blockquote>
<p>管理模式是CPU上电后默认的模式，因此在该模式下主要用来做系统的初始化，软中断处理也在该模式下。</p>
<p>当用户模式下的用户程序请求使用硬件资源时，通过软件中断进入该模式。</p>
<h3 id="abort-mode">Abort mode</h3>
<blockquote>
<p>Abort mode is the default mode to which a Data Abort exception or Prefetch Abort exception is<br>
taken</p>
</blockquote>
<p>终止模式是数据终止异常或指令预取终止异常发生时默认进入的模式。</p>
<p>数据终止异常：当用户程序访问非法地址、没有权限读取的地址时会发生该异常。例如linux下编程时经常遇到的<code>segment fault</code>：</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E5%8D%80%E6%AE%B5%E9%8C%AF%E8%AA%A4">以下是一些导致储存器段错误的一般编程错误</a>：</p>
<ul>
<li>引用空指针</li>
<li>引用未初始化的野指针</li>
<li>引用已经被调用free()函数释放了的悬空指针</li>
<li>缓冲区溢出</li>
<li>堆栈溢出</li>
<li>运行未正确编译的程序（尽管存在编译时错误，某些编译器依然会输出可执行文件）</li>
</ul>
</blockquote>
<p>预取指令异常：预取指令是指令流水线中的概念。该异常发生在预取指令时无法获取到正确的可执行指令，我们有时运行错误代码会出现程序跑飞了的情况就是因为预取不到正确的指令了，CPU无法继续正常执行。</p>
<h3 id="undefined-mode">Undefined mode</h3>
<blockquote>
<p>Undefined mode is the default mode to which an instruction-related exception, including any<br>
attempt to execute an UNDEFINED instruction, is taken</p>
</blockquote>
<p>当CPU遇到一个它无法识别的指令时发生该异常。例如在ARM架构的CPU上执行一条Intel指令。</p>
<h3 id="fiq-mode">FIQ mode</h3>
<blockquote>
<p>FIQ mode is the default mode to which an FIQ interrupt is taken.</p>
</blockquote>
<p>FIQ是Fast Interrupt reQuetst，快速中断模式。快速是相当于一般中断模式（IRQ）而言的，用来处理对时间要求比较紧急的中断，主要用于高速数据传输及通道处理中。</p>
<h3 id="irq-mode">IRQ mode</h3>
<p>一般中断模式，也称普通中断模式，用于处理一般的中断请求。通常在硬件中断发生后自动进入该模式，该模式为特权模式，能够自由访问系统硬件资源。</p>
<h1 id="arm-he-ji-cun-qi-zi-yuan">ARM核寄存器资源</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123201917744.png" alt="image-20241123201917744"></p>
<h2 id="gai-lan">概览</h2>
<h3 id="ji-cun-qi-gong-xiang">寄存器共享</h3>
<p>R0~R7这几个寄存器是所有模式共享的，这意味着在模式发生切换时，为了不影响先前模式的寄存器数据，当前模式需要在使用这些寄存器之前先将它们压栈（内存区域中的栈）保存，并在模式退出时出栈以将寄存器恢复成原样。</p>
<p>同样的R8~R12是除了FIQ的所有模式共享的。</p>
<h3 id="ji-cun-qi-du-you">寄存器独有</h3>
<p>对于R8~R12，FIQ由自己独有的寄存器，这是为了提高该模式的处理效率：在进入该模式后，访问这几个寄存器无需压栈保护和出栈复原。<mark>这也是FIQ比IRQ快的原因之一。</mark></p>
<h3 id="yi-chang-mo-shi-ji-cun-qi">异常模式寄存器</h3>
<p>可以发现，对于SP和LR寄存器，除了User和System两个非异常模式，其他模式都对应有自己独立的。它们与异常跳转有关。</p>
<h3 id="pc-ji-cun-qi">PC寄存器</h3>
<p>PC（Program Counter）程序计数器用来指向指令地址，在32位CPU顺序执行的过程中，每条指令相隔4个字节，地址相隔0x4，通过将PC的值依次递增0x4就能实现顺序执行的效果。</p>
<p>但是发生模式切换时，需要修改PC的值以告诉CPU从哪里开始接着执行程序指令。</p>
<h3 id="cpsr-spsr">CPSR/SPSR</h3>
<p>Current Program Status Register，当前程序状态寄存器，其中包含了当前程序执行过程中产生的一些状态位，例如</p>
<ul>
<li>N：negtive，负数标志，例如比较指令 <code>cmp</code> 就是将一个数减去另一个数，如果结果为负，则将N位置1，后续指令可以通过增加条件后缀 <code>lt</code>、<code>le</code>（less than、less than or equals to）结合N标志位来实现类似 <code>if</code>条件的效果</li>
<li>C：carry，进位标志</li>
</ul>
<p>可以理解这个寄存器保存了当前程序的上下文信息。</p>
<p>Saved Program Status Register，暂存的程序状态寄存器。当发生模式切换时，应通过SPSR保存CPSR（之前的程序运行状态），并在返回时将SPSR会写到CPSR。</p>
<h2 id="ji-cun-qi-yong-tu-fen-xi">寄存器用途分析</h2>
<h3 id="tong-yong-ji-cun-qi-r-0-10">通用寄存器R0~10</h3>
<p>用来存放用户的数据，例如函数入参、函数返回值等</p>
<h3 id="zhan-xiang-guan-ji-cun-qi">栈相关寄存器</h3>
<ul>
<li>
<p>R11（fp: frame pointer）：用来记录一个栈空间的开始地址</p>
</li>
<li>
<p>R12（ip：The Intra-Procedure-call scratch register）用来临时存储sp</p>
</li>
<li>
<p>R13（sp：stack pointer）：栈指针寄存器（指向栈顶），压栈时根据该寄存器中的地址存放数据并更新栈指针到下一个位置</p>
</li>
</ul>
<p><mark>栈空间的计算：sp - fp</mark></p>
<h3 id="tiao-zhuan-xiang-guan-branch-ji-cun-qi">跳转相关（branch）寄存器</h3>
<ul>
<li>R14（lr，link register）：在发生跳转（函数调用，中断处理）时，用来保存PC寄存器的值。后面通过将lr会写PC即可实现跳转后的返回。</li>
</ul>
<h3 id="pc-ji-cun-qi-1">PC寄存器</h3>
<p>program counter：用来存放CPU需要执行的指令地址。</p>
<p>之所以称之为counter计数器，是因为指令宽度是固定的（例如ARMv7中是32位字宽），通过在当前指令的地址上偏移固定的指令位宽（例如4个字节+0x4）就能取到顺序的下一条指令。</p>
<h2 id="cpsr-cheng-xu-zhuang-tai-ji-cun-qi">CPSR（程序状态寄存器）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124085427517.png" alt="image-20241124085427517"></p>
<h3 id="tiao-jian-biao-zhi-wei-ke-bei-xu-duo-zhi-ling-she-zhi">条件标志位（可被许多指令设置）</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123230843319.png" alt="image-20241123230843319"></p>
<h3 id="n-fu-hao-tiao-jian-biao-zhi-wei">N-负号条件标志位</h3>
<blockquote>
<p>Negative condition flag. Set to bit[31] of the result of the instruction. If the result is<br>
regarded as a two’s complement signed integer, then the processor sets N to 1 if the result<br>
is negative, and sets N to 0 if it is positive or zero.</p>
</blockquote>
<p>当指令的结果为有符号整数时，处理器会在该结果为负数时将N置1。例如我们有时需要根据条件来跳转：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应指令伪代码如下：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov r0,a // 将a加载到r0寄存器
mov r1,b // 将b加载到r1寄存器
cmp r0,r1 // 通过r0-r1来比较两者的值，如果结果为负数则将N置1，否则置0
bgt foo // b：branch分支跳转 gt：greater than，如果N=0（a&gt;=b），则跳转到foo函数入口地址
ble fun // le：less than or equals to，如果N=1（a&lt;b），则跳转到fun函数入口地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="z-ling-tiao-jian-biao-zhi-wei">Z-零条件标志位</h3>
<blockquote>
<p>Zero condition flag. Set to 1 if the result of the instruction is zero, and to 0 otherwise. A<br>
result of zero often indicates an equal result from a comparison</p>
</blockquote>
<p>当指令结果为0时会将Z置1。Z位为1通常标示了一个结果为0的比较指令，例如：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对应指令 伪代码如下：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov r0,a
mov r1,b
cmp r0,r1 // 通过r0-r1来比较两者的值，如果结果为0则将Z置1（当然也会将N置0）
beq foo // b：branch分支跳转 eq：equals to，如果Z=1，则跳转foo函数入口地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="c-jin-wei-tiao-jian-biao-zhi-wei">C-进位条件标志位</h3>
<blockquote>
<p>Carry condition flag. Set to 1 if the instruction results in a carry condition, for example an<br>
unsigned overflow on an addition.</p>
</blockquote>
<p>如果指令的结果产生了进位，则C位会被置1。例如加法过程中的无符号溢出。以 <code>uint32_t</code>为例，最大为 <code>0xFFFFFFFF</code>，如果对其进行加法操作则会产生进位，例如</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint32_t</span> a <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span>
<span class="token class-name">uint32_t</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 产生进位，C被置1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="v-yi-chu-tiao-jian-biao-zhi-wei">V-溢出条件标志位</h3>
<blockquote>
<p>Overflow condition flag. Set to 1 if the instruction results in an overflow condition, for<br>
example a signed overflow on an addition</p>
</blockquote>
<p>如果指令的结果产生了溢出（<mark>超过了数据类型的表示范围</mark>），例如加法中的有符号溢出，则会将该位置1。这里要和C位区分开来，C位是针对无符号的（运算不考虑符号位），V是针对有符号的。例如：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> ch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 有符号char最大值为127，加1后为128超过了char的标示范围（-128~127）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="i-f-jin-yong-biao-zhi-wei">I/F-禁用标志位</h3>
<p>I位置1标示禁用IRQ异常，F位置1标示禁用FIQ异常</p>
<blockquote>
<p>In an implementation that does not include the Security Extensions, setting a mask bit masks the<br>
corresponding exception, meaning it cannot be taken</p>
</blockquote>
<h3 id="t-biao-zhi-wei">T标志位</h3>
<p>标示了处理器指令集的状态：</p>
<ul>
<li>ARM状态：32位指令</li>
<li>Thumb状态：16位指令（可以理解位ARM指令的压缩版）</li>
</ul>
<h3 id="m-biao-zhi-wei">M标志位</h3>
<p>标示处理器当前的工作模式，参见本文 <mark>ARM&nbsp;Processor&nbsp;Modes</mark>对应的章节。</p>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>ARM</tag>
        <tag>ARMv7</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM核学习（三）指令流水线分析及伪指令</title>
    <url>/2024/11/24/14899.html</url>
    <content><![CDATA[<h1 id="zhi-ling-liu-shui-xian-fen-xi">指令流水线分析</h1>
<h2 id="qian-yan">前言</h2>
<p>在ARM核中，为增加处理器指令流的速度，ARM7系列使用3级流水线。允许多个操作同时处理，而非顺<br>
序执行。<mark>不同的ARM核，流水线的级数是不一样的，ARM核版本越高，流水线级数越多。对于软件工</mark><br>
<mark>程师编程而言，统一按照三级流水线来分析就可以了。</mark></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124174742518.png" alt="image-20241124174742518" style="zoom: 33%;">
<blockquote>
<p>在MDK中断点调试时会发现PC指向的当前代码行，这是因为MDK调试屏蔽了底层流水线细节，以避免产生歧义。</p>
</blockquote>
<p>在ARM状态，指令位宽为32位4字节，因此当PC预取（例如）0x8地址的指令时，0x4地址的指令正在被解码、0x0地址的指令正在被执行。Thumb状态是压缩格式的指令集，指令位宽是16位2字节，因此偏差是2。</p>
<h2 id="zui-jia-liu-shui-xian-fen-xi-jin-cao-zuo-ji-cun-qi">最佳流水线分析（仅操作寄存器）</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124175951254.png" alt="image-20241124175951254" style="zoom:50%;">
<h2 id="nei-cun-fang-wen-zhi-ling-liu-shui-xian">内存访问指令流水线</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124180204732.png" alt="image-20241124180204732"></p>
<p>由于内存访问效率较低，因此在执行LDR指令时，无法在一个指令周期内完成（需要E、M、W三个周期）。这样，即使它前面的D跑得快，但解码的指令无法移交给E（它手上的活还没干完），只能干等，F也是一样。</p>
<h2 id="fen-zhi-tiao-zhuan-liu-shui-xian-ju-li">分支（跳转）流水线举例</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124181209542.png" alt="image-20241124181209542"></p>
<p>在E执行跳转指令时，跑在它前面的F、D不得不丢弃已完成的工（解码 <code>0x3004 SUB</code>，预取 <code>0x3008 AND</code>）作，转而从目标地址重新开始F、D、E流程。</p>
<p>图中E执行 <code>BL 0X8FEC</code>时，F正在预取 <code>0x3008</code>地址的指令，在该指令周期结束时，PC指向 <code>0x3008</code>，且由于是 <code>BL</code>跳转，因此该值会被保存到 <code>LR</code>寄存器中。</p>
<p>当执行 <code>L</code>指令时，会将<code>LR</code>回写到 <code>PC</code>中，但是由于此前对于 <code>0X3004</code>的解码工作被丢弃了，因此处理器会自动执行一个 <code>A</code>指令，将 <code>PC</code>调整到 <code>0x3004</code>的位置接着执行。</p>
<h2 id="zong-jie">总结</h2>
<ul>
<li>当只有寄存器操作（操作效率和CPU处于同一量级）时，指令流线效率是最高的：在每个指令周期，流水线上的三个工人F、D、E都在不停互相配合，高效完成指令执行所需的三个阶段的工作。</li>
<li>当访问内存（外设）时，由于物理特性，处理器的工作效率远高于外设，因此工人E只能放慢节奏和外设协同把活干了，这期间即使F、D完成了手头上的活，由于不能向D、E移交，因此也只能干等着。导致了级联停顿（stall）的效应。</li>
<li>当发生跳转时，工人F、D超前完成的工作只能被迫丢弃，转而从新的指令地址重新开始干活，且如果跳转回来，之前干完的活还得重新再干一次。</li>
</ul>
<h1 id="chang-yong-wei-zhi-ling-fen-xi">常用伪指令分析</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124183925641.png" alt="image-20241124183925641"></p>
<h2 id="ldr-r-0-0-x-12345678-fen-xi">LDR R0,=0x12345678 分析</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124184043373.png" alt="image-20241124184043373"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124184314696.png" alt="image-20241124184314696"></p>
<p>编译器会将常量 <code>0x12345678</code>预先放到某个内存中（通常是所有代码指令之后），并将LDR翻译成一条读内存的指令。</p>
<h2 id="ldr-r-0-label-fen-xi">LDR R0,=label 分析</h2>
<p>标签本质上是一个常量，它的值就是标签后第一条指令的地址，可以理解为给这个地址取了个别名。</p>
<h3 id="dai-ma-duan-qi-shi-di-zhi-wei-0-x-0">代码段起始地址为0x0</h3>
<p>对于给定的代码段起始地址和指令位宽，每条指令的存放地址在编译阶段都可以确定，如下将代码段的起始地址配置为 <code>0x0</code>：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124185737443.png" alt="image-20241124185737443" style="zoom:33%;">
<p>对于ARM状态下（指令位宽为4字节），如下代码的每条指令都可以顺序计算其存储地址</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r1,#1			@0x00000000
	mov r2,#2			@0x00000004
	ldr r3,=addr		@0x00000008
	ldr r4,[r3]			@0x0000000C
	
stop:
	b stop				@0x00000010
	
addr:					@给0x00000014取了个别名叫addr
	.word 0x12345678	@0x00000014 在这个地址存放一个字的数据
		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是：标签的声明并不属于指令，因此不占用地址空间。其中 <code>ldr r3,=addr</code>等价于 <code>ldr r3,=0x00000014</code>。</p>
<p><code>ldr r3,=addr</code>（将addr表示的地址值加载到R3）分析如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124190511217.png" alt="image-20241124190511217"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124190550278.png" alt="image-20241124190550278"></p>
<p><code>ldr r4,[r3]</code>：从R3对应的地址读取数据（该数据 <code>0x12345678</code> 在编译阶段通过 <code>.word</code>伪指令预先存储在了内存空间中）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124190809542.png" alt="image-20241124190809542"></p>
<h3 id="dai-ma-duan-qi-shi-di-zhi-wei-0-x-2000">代码段起始地址为0x2000</h3>
<p>将代码段起始地址改为0x2000，计算规则是一样的，在编译阶段就能确定各个指令以及 <code>.word</code>数据存放的地址（注意修改后需要重新编译下）：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124200510540.png" alt="image-20241124200510540" style="zoom:33%;">
<p>调试前需要修改下内存映射，默认是从0x0开始执行的，我们需要让0x0到0x2000及其后的一段内存都可执行：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124200751229.png" alt="image-20241124200751229" style="zoom:50%;">
<p>然后在 <code>_start</code>的第一条指令打个断点，跳过从0x0到0x2000之间的无效指令：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124201005483.png" alt="image-20241124201005483" style="zoom: 33%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124200325028.png" alt="image-20241124200325028" style="zoom:33%;">
<h3 id="zong-jie-1">总结</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124195231017.png" alt="image-20241124195231017" style="zoom: 50%;">
<h2 id="ldr-r-0-label-fen-xi-1">LDR R0,label 分析</h2>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r1,#1			
	mov r2,#2			
	ldr r3,addr			
	mov r4,r3			
stop:
	b stop				
addr:	
	.word 0x12345678	
		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ldr r3,=addr</code>可以理解为将标签 <code>addr</code>的值当做常量加载到R3中，而 <code>ldr r3,addr</code>则是从 <code>addr</code>对应的地址加载数据到R3中，相当于 <code>R3=p</code>和 <code>R3=*p</code>的关系</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124201244164.png" alt="image-20241124201244164" style="zoom: 33%;">
<h2 id="adr-r-0-label-dong-tai-huo-qu-biao-qian-di-zhi">ADR R0,label 动态获取标签地址</h2>
<blockquote>
<p>This instruction adds an immediate value to the PC value to form a PC-relative address, and writes the result to the destination register.</p>
</blockquote>
<p>ADR 是 “Address” 的缩写，它是一条用于生成地址的伪指令。ADR 指令用于计算一个目标地址，并将其存储到指定的寄存器中。目标地址是基于当前 PC 加上一个偏移量计算得出的，因此它只能访问当前代码段附近的地址。</p>
<h3 id="strong-zhi-ling-ge-shi-strong"><strong>指令格式</strong></h3>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">ADR &lt;Rd&gt;, &lt;label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>&lt;Rd&gt;</code>：目标寄存器，用于存储计算出的地址。</li>
<li><code>&lt;label&gt;</code>：目标地址标签，必须位于当前指令前后一定范围内。</li>
</ul>
<h3 id="shi-li">示例</h3>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r1,#1			
	mov r2,#2			
	adr r3,addr			
	ldr r4,[r3]		
stop:
	b stop				
addr:	
	.word 0x12345678	
		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124202620567.png" alt="image-20241124202620567"></p>
<h3 id="dui-bi-ldr-r-0-label">对比 LDR R0,=label</h3>
<p>如下图，<code>LDR R0,=label</code>编译时，编译器会根据代码段起始地址和指令位宽计算出label对应的地址值（<code>0x00000014</code>），并单独开辟一个内存（<code>0x00000018</code>）存放这个<mark>写死</mark>的数据，在运行时通过LDR读取这个内存中写死的label地址值到R3中。</p>
<p>如果起始地址为 <code>0x2000</code>，那么编译器就会在内存中存放一个写死的 <code>0x2014</code>，显然这是一种<mark>静态的做法</mark>（和编译时设置的代码段起始地址是<mark>强绑定的</mark>），如果程序换一个地址空间运行，这个写死的地址值就没有意义了。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124203311920.png" alt="image-20241124203311920"></p>
<p>而 <code>ADR R0,label</code>则是运行时动态获取标签对应的地址值，例如编译器知道执行当前指令时，通过在PC上偏移4个字节就能寻址到label对应的地址，那么通过 <code>ADD</code>指令就能在<mark>运行时动态获取</mark>该label对应的地址。这种做法是<mark>不依赖编译时设定的代码段起始地址的，无论使用什么起始地址，都能够得到一个正确的标签地址</mark>。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124204230866.png" alt="image-20241124204230866"></p>
<h2 id="ru-he-pan-bie-dai-ma-zai-shi-ji-nei-cun-zhong-yun-xing-de-di-zhi">🌟如何判别代码在实际内存中运行的地址？</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124204803253.png" alt="image-20241124204803253"></p>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>ARM</tag>
        <tag>ARMv7</tag>
        <tag>指令流水线</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM核学习（二）指令集</title>
    <url>/2024/11/24/18972.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<p><a href="https://developer.arm.com/documentation/ddi0406/cd/?lang=en">ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition</a></p>
<h1 id="mdk-huan-jing-da-jian">MDK环境搭建</h1>
<h2 id="xia-zai-legacy-support-zhi-chi-bao">下载Legacy Support支持包</h2>
<p><a href="https://armkeil.blob.core.windows.net/legacy/MDK79525.EXE">https://armkeil.blob.core.windows.net/legacy/MDK79525.EXE</a></p>
<p>安装到MDK的安装目录下</p>
<h2 id="xia-zai-arm-gnu-gong-ju-lian">下载ARM GNU工具链</h2>
<p><a href="https://developer.arm.com/-/media/Files/downloads/gnu/13.3.rel1/binrel/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi.exe">https://developer.arm.com/-/media/Files/downloads/gnu/13.3.rel1/binrel/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi.exe</a></p>
<blockquote>
<p><a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads">下载页面</a></p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124092507291.png" alt="image-20241124092507291" style="zoom:50%;">
<h2 id="chuang-jian-xiang-mu">创建项目</h2>
<p>安装Legacy Support之后，可以在Device中对其进行选择</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124091834836.png" alt="image-20241124091834836"></p>
<p>然后选择ARM9E-S（Little Endian）进行仿真</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124092007126.png" alt="image-20241124092007126" style="zoom:50%;">
<p>键入如下代码：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1
	mov r1,#2
	mov r2,#3
	
stop:
	b stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124093601960.png" alt="image-20241124093601960" style="zoom:50%;">
<h2 id="pei-zhi-arm-gnu-gong-ju-lian">配置ARM GNU工具链</h2>
<p>配置交叉编译工具链，即此前下载的ARM GNU的安装路径</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124093644442.png" alt="image-20241124093644442" style="zoom: 50%;">
<h2 id="bian-yi-xiang-mu">编译项目</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124093742741.png" alt="image-20241124093742741" style="zoom:50%;">
<h2 id="fang-zhen-diao-shi-pei-zhi">仿真/调试配置</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124093931756.png" alt="image-20241124093931756" style="zoom: 50%;">
<p>配置代码段开始地址：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124094012862.png" alt="image-20241124094012862" style="zoom:50%;">
<p><mark>注意</mark>：每次修改了编译配置选项后，最好重新编译一下以使其生效：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124094203216.png" alt="image-20241124094203216"></p>
<h2 id="kai-shi-diao-shi">开始调试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124094253900.png" alt="image-20241124094253900"></p>
<p>如果点击调试按钮后出现如上界面，则仿真环境配置成功了。左侧是ARM核的寄存器（可参考另一篇文章《ARM核（ARMv7-A/R）学习》），右上方是对应的汇编指令。</p>
<p>点击左上方的调试按钮，可以发现立即数1、2、3被依次加载到寄存器R0、R1、R2中了：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124094832406.png" alt="image-20241124094832406" style="zoom:50%;">
<h1 id="zhi-ling-ge-shi">指令格式</h1>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124101014161.png" alt="image-20241124101014161" style="zoom:50%;">
<h2 id="he-fa-li-ji-shu">合法立即数</h2>
<p>立即数使用 <code>#数字</code>来表示</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124102202527.png" alt="image-20241124102202527"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124102256351.png" alt="image-20241124102256351"></p>
<h2 id="ji-cun-qi-yi-wei">寄存器移位</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124102702102.png" alt="image-20241124102702102"></p>
<h1 id="chang-yong-arm-he-zhi-ling">常用ARM核指令</h1>
<p>参见手册中的 <mark>A8.8 Alphabetical list of instructions</mark>章节</p>
<h2 id="shu-ju-chuan-song-zhi-ling">数据传送指令</h2>
<h3 id="mov">MOV</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124103655266.png" alt="image-20241124103655266" style="zoom:50%;">
<h3 id="mvn">MVN</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124103924679.png" alt="image-20241124103924679" style="zoom:50%;">
<h3 id="ldr">LDR</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124104010947.png" alt="image-20241124104010947" style="zoom:50%;">
<p><mark>注意：数字常量前需要加上“=”，这是常量/字面量表示的语法规则</mark></p>
<p>当数据不是合法立即数时，作为MOV的替代指令。这是一条伪指令，底层是通过将数据（<code>=</code>号后面的数字）先存放到内存，再通过LDR(从内存加载到寄存器)指令来实现的。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124104851454.png" alt="image-20241124104851454" style="zoom: 33%;">
<h2 id="shu-ju-ji-suan-zhi-ling">数据计算指令</h2>
<h3 id="add-jia-fa">ADD加法</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124105251693.png" alt="image-20241124105251693" style="zoom:50%;">
<h3 id="sub-jian-fa">SUB减法</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124105408936.png" alt="image-20241124105408936" style="zoom:50%;">
<p>默认情况下SUB是不会影响CPSR的N标志位的，如果需要则要加上S后缀：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124105935847.png" alt="image-20241124105935847" style="zoom: 33%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124110015698.png" alt="image-20241124110015698" style="zoom:33%;">
<h3 id="mul-cheng-fa">MUL乘法</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124110117129.png" alt="image-20241124110117129"></p>
<h3 id="lian-xi">练习</h3>
<blockquote>
<p>练习1：<br>
(2&lt;&lt;2)-5+0x12345678, 计算的结果存放在r0</p>
<p>练习2：<br>
25-3*5+6 最终的计算结果存放在r0中</p>
</blockquote>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#2
	mov r1,r0,lsl #2
	sub r1,r1,#5
	ldr r0,=0x12345678
	add r1,r1,r0
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#3
	mov r1,#5
	mul r2,r0,r1 @r0=3*5
	mov r1,#25
	sub r0,r1,r2 @r0=25-15
	add r0,r0,#6 @r0=10+6
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wei-yun-suan-zhi-ling">位运算指令</h2>
<h3 id="and">AND</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124112800154.png" alt="image-20241124112800154" style="zoom:50%;">
<h3 id="orr-an-wei-huo">ORR-按位或</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124112835561.png" alt="image-20241124112835561" style="zoom:50%;">
<h3 id="eor-an-wei-yi-huo-exclusive-or">EOR-按位异或（Exclusive OR）</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124113112400.png" alt="image-20241124113112400" style="zoom:50%;">
<h3 id="bic-wei-qing-chu-zhi-ling">BIC-位清除指令</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124113149176.png" alt="image-20241124113149176" style="zoom:50%;">
<h3 id="lian-xi-1">练习</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124113304642.png" alt="image-20241124113304642" style="zoom:50%;">
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	ldr r0,=0x12345678
	ldr r1,=0xFFFF0000
	bic r1,r0,r1
	mov r0,r0,lsr #16
	add r0,r0,r1
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	ldr r0,=0xabcd
	
	mov r1,#0x7
	bic r0,r1,lsl #1
	
	mov r1,#0x5
	orr r0,r1,lsl #1
	
	mov r1,#0x1f
	bic r0,r1,lsl #7
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="bi-jiao-zhi-ling-cmp">比较指令CMP</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124114532330.png" alt="image-20241124114532330" style="zoom:50%;">
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#5
	mov r1,#6
	mov r2,#10
	
	cmp r0,r1
	addgt r1,r1,#1
	
	cmp r0,r2
	addle r2,r2,#1
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124114808027.png" alt="image-20241124114808027" style="zoom: 50%;">
<h2 id="tiao-zhuan-zhi-ling">跳转指令</h2>
<h3 id="b-bl">B/BL</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124125817106.png" alt="image-20241124125817106"></p>
<blockquote>
<p>Branch causes a branch to a target address.</p>
</blockquote>
<p>B指令用于跳转到一个目标地址（指令存放地址），该指令会修改PC的值，就像从处理器的顺序执行路径开了一个分岔一样，让处理器从既定的顺序指令序列跳到了另一个指令序列。常用于函数调用、中断处理。</p>
<p>BL指令在B指令的基础之上增加了一个操作：将跳转前PC的值保存到LR寄存器中。这样如果想从分岔回到原来的路径继续执行，只需将LR会写PC即可。</p>
<h4 id="si-xun-huan-de-shi-xian">死循环的实现</h4>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1
	mov r1,#2
	b _start
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="han-shu-diao-yong">函数调用</h4>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1
	mov r1,#2
	bl add
	
	mov r3,r2
	
stop:
	b _start
	
add:
	add r2,r0,r1
	mov pc,lr
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过单步调试观察PC的变化我们可以发现每条汇编指令的地址是按照编写顺序从上到下依次编址的，每条指令地址相隔4个字节，也即偏移量为0x4</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1 @instruction address =&gt; 0x00000000
	mov r1,#2 @instruction address =&gt; 0x00000004
	bl add	  @instruction address =&gt; 0x00000008
	
	mov r3,r2 @instruction address =&gt; 0x0000000C
	
stop:
	b _start  @instruction address =&gt; 0x00000010
	
add:
	add r2,r0,r1 @instruction address =&gt; 0x00000014
	mov pc,lr    @instruction address =&gt; 0x00000018<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="gei-pc-fu-zhi">给PC赋值</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124125452912.png" alt="image-20241124125452912"></p>
<p>B/BL指令有个限制：跳转的目标地址和当前PC中的指令地址之间的偏移量不能超过32M大小。如果超过了这个范围，我们可以直接赋值PC来实现跳转。</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1 			
	mov r1,#2
	ldr pc,=add_label
back_label:
	mov r3,#10
	
stop:
	b stop

add_label:
	add r2,r0,r1
	ldr pc,=back_label
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中标签名字面量（<code>add_label</code>、<code>back_label</code>、<code>stop</code>）本质上就是给标签名冒号后的指令地址取了个别名，其值就是冒号后第一条指令的地址；且标签声明不属于指令，也就不占用内存空间，因此 <code>ldr pc,=add_label</code>等价于 <code>ldr pc,=0x00000014</code>：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1 			@0x00000000
	mov r1,#2			@0x00000004
	ldr pc,=add_label	@0x00000008
back_label:
	mov r3,#10			@0x0000000C
	
stop:
	b stop				@0x00000010

add_label:
	add r2,r0,r1 		@0x00000014
	ldr pc,=back_label	@0x00000018
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="lian-xi-2">练习</h4>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124131659348.png" alt="image-20241124131659348" style="zoom:50%;">
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0		@sum=0
	mov r1,#1		@i=1
loop:
	cmp r1,#100
	bgt stop		@stop loop if r1 &gt; 100
	add r0,r0,r1	@sum+=i
	add r1,r1,#1	@i++
	b loop			@continue loop
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="dan-ge-shu-ju-fang-wen-yi-ci-xing-fang-wen-yi-ge-zi-kuan-shu-ju">单个数据访问（一次性访问一个字宽数据）</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124132933599.png" alt="image-20241124132933599" style="zoom:50%;">
<h3 id="ji-cun-qi-jian-jie-xun-zhi">寄存器间接寻址</h3>
<p><mark>LDR &lt;目标寄存器&gt; [源寄存器]</mark>：从源寄存器指定的地址中加载数据到目标寄存器</p>
<p><mark>LDR &lt;源寄存器&gt; [目标寄存器]</mark>：将源寄存器中的数据存储到目标寄存器指定的内存地址中</p>
<p>如下代码将数据 <code>0x12345678</code> 写（存储）到内存地址 <code>0x40000000</code>中，并从改地址读（加载）数据到R2寄存器中</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x40000000
	ldr r1,=0x12345678
	
	str r1,[r0]		@write 0x12345678 to memory address 0x40000000 =&gt; *r0 = r1
	ldr r2,[r0]		@read 0x12345678 from memory address 0x40000000 =&gt; r2 = *r0
	
	b stop
	
stop:
	b stop

	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>点击调试后，需要映射一下当前程序可访问的内存空间：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124143904811.png" alt="image-20241124143904811" style="zoom: 50%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124143956075.png" alt="image-20241124143956075" style="zoom:50%;">
<blockquote>
<p>0x40000000,0x4000FFFF</p>
</blockquote>
<p>然后可以打开内存查看窗口：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124144137121.png" alt="image-20241124144137121" style="zoom: 50%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124144919193.png" alt="image-20241124144919193" style="zoom: 33%;">
<p>然后步进到 <code>str r1,[r0]</code>执行之后，会发现数据已被写入对应的内存。这里值得注意的是，存储方式是字节小端法。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124145026768.png" alt="image-20241124145026768"></p>
<p>再进一步，数据从内存加载到了R2寄存器中</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124145228766.png" alt="image-20241124145228766" style="zoom:50%;">
<h3 id="ji-di-zhi-bian-zhi-xun-zhi">基地址变址寻址</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124150404357.png" alt="参考手册 A8.5 Memory accesses"></p>
<h4 id="pian-yi-liang-xun-zhi">偏移量寻址</h4>
<blockquote>
<p>Offset addressing<br>
The offset value is applied to an address obtained from the base register. The result is used as the<br>
address for the memory access. The value of the base register is unchanged.<br>
The assembly language syntax for this mode is:<br>
<code>[&lt;Rn&gt;, &lt;offset&gt;]</code></p>
</blockquote>
<p><code>LDR/STR [&lt;Rn&gt;, &lt;offset&gt;]</code>：Rn为基地址，offset为偏移字节数</p>
<p>类比理解：C语言中通过指针加偏移量来访问内存（<code>num = *(p+1)</code>），该操作不会改变指针的值。</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x40000000
	ldr r1,=0x12345678
	
	str r1,[r0, #4]		@ *(r0+4)=r1
	ldr r2,[r0, #4]		@ r2=*(r0+4)
	
	b stop
	
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><mark>注意：每次点击debug后做一下内存映射：</mark></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124150820281.png" alt="image-20241124150820281" style="zoom: 50%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124150924297.png" alt="image-20241124150924297" style="zoom:33%;">
<h4 id="qian-suo-yin-xun-zhi">前索引寻址</h4>
<blockquote>
<p>Pre-indexed addressing<br>
The offset value is applied to an address obtained from the base register. The result is used as the<br>
address for the memory access, and written back into the base register.<br>
The assembly language syntax for this mode is:<br>
<code>[&lt;Rn&gt;, &lt;offset&gt;]!</code></p>
</blockquote>
<p><code>LDR/STR [&lt;Rn&gt;, &lt;offset&gt;]!</code>：Rn为基地址，offset为偏移字节数。</p>
<p>该指令在偏移量寻址的基础上加了个 <mark>!</mark>，标示在内存访问之后将访问的地址回写基地址Rn。</p>
<p>类比理解：<code>num = *p++ =&gt; num = *p; p++;</code></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x40000000
	ldr r1,=0x12345678
	
	str r1,[r0, #4]!		@ *(r0+4)=r1 r0+=4
	ldr r2,[r0]		@ r2=*r0
	
	b stop
	
stop:
	b stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124152950125.png" alt="image-20241124152950125"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124153051739.png" alt="image-20241124153051739"></p>
<h4 id="hou-suo-yin-xun-zhi">后索引寻址</h4>
<blockquote>
<p>Post-indexed addressing<br>
The address obtained from the base register is used, unchanged, as the address for the memory<br>
access. The offset value is applied to the address, and written back into the base register<br>
The assembly language syntax for this mode is:<br>
<code>[&lt;Rn&gt;], &lt;offset&gt;</code></p>
</blockquote>
<p><code>LDR/STR [&lt;Rn&gt;], &lt;offset&gt;</code>：Rn为基地址，offset为偏移字节数。</p>
<p>该指令先从Rn访问内存，然后再将偏移量更新到Rn中。</p>
<p>类比理解：<code>num = *p; p += offset</code></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x40000000
	ldr r1,=0x12345678
	
	str r1,[r0],#4	@ *(r0)=r1 r0+=4
	
	sub r0,r0,#4	@ r0-=4
	ldr r2,[r0]		@ r2=*r0
	
	b stop
	
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124153832192.png" alt="image-20241124153832192"></p>
<h4 id="zong-jie">🌟总结</h4>
<ul>
<li>偏移量寻址：就是在给定地址上加减一个偏移量来访问内存（relative）</li>
<li>前索引：先对给定地址增减偏移量进行更新，再访问更新后的地址</li>
<li>后索引：先访问给定地址，再对给定地址加减偏移量并更新</li>
</ul>
<h4 id="lian-xi-3">练习</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124154157004.png" alt="image-20241124154157004"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#1 				@i=1
	mov r1,#0x40000000 		@p
	
	bl write_data
	
	mov r0,#1				@i=1
	mov r1,#0x40000000 		@p=&gt;0x40000000
	ldr r2,=0x40000100		@q=&gt;0x40000100
	mov r3,#0				@num=0

	bl read_data
	
stop:
	b stop
	
write_data:
	str r0,[r1],#4 			@*p++=i
	add r0,r0,#1			@i++
	cmp r0,#10
	ble write_data 			@while(i&lt;=10)
	
	mov pc,lr				@return
	
read_data:
	ldr r3,[r1],#4			@num=*p++
	str r3,[r2],#4			@*q++=num
	add r0,r0,#1			@i++
	cmp r0,#10
	ble read_data			@while(i&lt;=10)
	
	mov pc,lr				@return
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124160123984.png" alt="image-20241124160123984"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124160205062.png" alt="image-20241124160205062"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	ldr r0,=0x1234
	ldr r1,=0x40000000 		@p=0x40000000
	str r0,[r1],#4			@*p++=0x1234
	
	ldr r0,=0xabcd
	str r0,[r1],#-4			@*p=0xabcd, p-=4
	
	ldr r2,[r1],#4			@num1=*p++
	ldr r3,[r1]				@num2=*p
	add r0,r2,r3			@sum=num1+num2
	
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="duo-ge-shu-ju-fang-wen">多个数据访问</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124162052165.png" alt="image-20241124162052165" style="zoom:50%;">
<h3 id="zhi-ling-mo-shi">指令模式</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124162139880.png" alt="image-20241124162139880" style="zoom:50%;">
<p>以STM（Store Multiple，写多个数据为例，LDM是类似的）：</p>
<ul>
<li>STMIA：Increase After，先向基地址写入数据，然后递增基地址</li>
<li>STMIB：Increase Before，先递增基地址，再向基地址写入数据</li>
<li>STMDA：Decrease After，先向基地址写入数据，然后递减基地址</li>
<li>STMDB：Decrease Before，先递减基地址，再向基地址写入数据</li>
</ul>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x40000000			@p=0x40000000
	mov r1,#0x11				@buf[3] = {0x11,0x22,0x33}
	mov r2,#0x22
	mov r3,#0x33
	
	stmia r0!,{r1-r3} 			@*p++=buf[i]
	
stop:
	b stop
	
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124163643693.png" alt="image-20241124163643693"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x40000000			@p=0x40000000
	mov r1,#0x11				@buf[3] = {0x11,0x22,0x33}
	mov r2,#0x22
	mov r3,#0x33
	
	stmia r0!,{r1-r3} 			@*p++=buf[i++]
	
	ldmdb r0!,{r4-r6}			@buf2[i++]=*--p
	
stop:
	b stop
	
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124163945572.png" alt="image-20241124163945572"></p>
<h2 id="zhan-cao-zuo-zhi-ling">栈操作指令</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124164247925.png" alt="image-20241124164247925"></p>
<h3 id="zhan-zeng-chang-mo-shi">栈增长模式</h3>
<p><mark>自底向上：栈顶指针随着入栈而递增（地址）；自顶向下：栈顶指针随着入栈而递减</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124164335289.png" alt="image-20241124164335289"></p>
<h3 id="kong-dui-zhan-he-man-dui-zhan">空堆栈和满堆栈</h3>
<p><mark>其实就是栈顶指针指向栈顶元素（满堆栈）还是指向下一个入栈元素要存放的位置（空堆栈）</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124164412290.png" alt="image-20241124164412290"></p>
<h3 id="shi-li-ya-zhan-bao-cun-chu-zhan-hui-fu">示例：压栈保存，出栈恢复</h3>
<blockquote>
<p>在程序上下文发生切换时（例如函数调用、中断处理），我们通常需要先将先前程序执行状态相关的信息进行保存，然后在返回时进行恢复。</p>
</blockquote>
<p>如下程序以通用寄存器的暂存和恢复为例来模拟这一过程：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r1,#0x11				
	mov r2,#0x22
	mov r3,#0x33
	
	@first: set stack pointer(start address of stack, from high address to low)
	ldr sp,=0x4000fff0		
	@push to save general purpose registers and decrease stack pointer
	stmfd sp!,{r1-r3}		
	
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124170153676.png" alt="image-20241124170153676"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r1,#0x11				
	mov r2,#0x22
	mov r3,#0x33
	
	@first: set stack pointer(start address of stack, from high address to low)
	ldr sp,=0x4000fff0		
	@push to save general purpose registers and decrease stack pointer
	stmfd sp!,{r1-r3}		
	
	@do something with general purpose registers
	mov r1,#0x00				
	mov r2,#0x00
	mov r3,#0x00
	
	@pop stack to recover general purpose registers
	ldmfd sp!,{r1-r3}
	
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124170518808.png" alt="image-20241124170518808"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124170639885.png" alt="image-20241124170639885"></p>
<h2 id="cpsr-spsr-cao-zuo-zhi-ling">CPSR/SPSR操作指令</h2>
<h3 id="mrs-move-to-register-from-special-register">MRS（Move to Register from Special register）</h3>
<blockquote>
<p>Move to Register from Special register moves the value from the CPSR or SPSR of the current mode into an ARM<br>
core register.<br>
An MRS that accesses the SPSR is UNPREDICTABLE if executed in User or System mode.<br>
An MRS that is executed in User mode and accesses the CPSR returns an UNKNOWN value for the<br>
CPSR.{E, A, I, F, M} fields.</p>
</blockquote>
<p><code>MRS{&lt;c&gt;}{&lt;q&gt;} &lt;Rd&gt;, &lt;spec_reg&gt;  </code></p>
<h3 id="msr-move-register-immediate-to-special-register">MSR（Move register/immediate to Special Register）</h3>
<blockquote>
<p>Move to Special register from ARM core register moves the value of an ARM core register to the CPSR or the SPSR of the current mode.</p>
</blockquote>
<p><code>MSR&lt;c&gt; &lt;spec_reg&gt;, #&lt;const&gt;  </code></p>
<p><code>MSR{&lt;c&gt;}{&lt;q&gt;} &lt;spec_reg&gt;, &lt;Rn&gt;  </code></p>
<h3 id="zong-jie-1">🌟总结</h3>
<p><mark>MRS、MSR分辨</mark>：</p>
<ul>
<li>R在前面，则操作数1为通用寄存器（要将CPSR读到Rd）；</li>
<li>S在前面，操作数为特殊寄存器（要将通用寄存器写到CPSR）</li>
</ul>
<h3 id="lian-xi-4">练习</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124171837704.png" alt="image-20241124171837704"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mrs r0,cpsr 		@move to r0 from cpsr
	mov r1,#1
	bic r0,r1,lsl #7	@bit clear bit7 of cpsr
	msr cpsr,r0			@write back to cpsr
	
	b stop
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124172405608.png" alt="image-20241124172405608"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mrs r0,cpsr 		@move to r0 from cpsr
	mov r1,#1
	bic r0,r1,lsl #7	@bit clear bit7 of cpsr
	msr cpsr,r0			@write back to cpsr
	
	mrs r0,cpsr
	orr r0,r1, lsl #7	@set bit7 of cpsr
	msr cpsr,r0			@write back to cpsr
	
	b stop
stop:
	b stop
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">The END</h1>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>ARM</tag>
        <tag>ARMv7</tag>
        <tag>指令集</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM核学习（五）异常处理</title>
    <url>/2024/11/25/17360.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<p><a href="https://developer.arm.com/documentation/ddi0406/cd/?lang=en">ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition</a></p>
<ul>
<li>B1.8 Exception handling</li>
</ul>
<p><a href="https://developer.arm.com/documentation/den0013/latest/">ARM® Cortex™-A Series Programmer’s Guide Version: 4.0</a></p>
<h1 id="yi-chang-jie-shao">异常介绍</h1>
<h2 id="shi-yao-shi-yi-chang">什么是异常</h2>
<p>异常是处理器核在执行程序指令的过程中突然遇到了异常的事情，这些事件包括<strong>硬件中断、指令执行错误、用户程序请求服务、内存访问异常、取指令异常</strong>等，几乎每种处理器都支持特定的异常处理，<mark>中断也是异常的一种</mark>。</p>
<h2 id="arm-de-yi-chang-yuan">ARM的异常源</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125214514494.png" alt="image-20241125214514494"></p>
<h2 id="fiq-jiao-irq-kuai-de-yuan-yin">FIQ较IRQ快的原因</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125214951043.png" alt="image-20241125214951043"></p>
<h1 id="arm-he-yi-chang-chu-li-guo-cheng">ARM核异常处理过程</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125215607973.png" alt="image-20241125215607973"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125214441652.png" alt="处理器工作模式切换"></p>
<h2 id="yi-chang-xiang-liang-biao">异常向量表</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125215846276.png" alt="image-20241125215846276"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125215810206.png" alt="image-20241125215810206"></p>
<blockquote>
<p>[!NOTE]</p>
<p>ARM核怎么知道异常向量表放在内存哪个地方呢？</p>
<ol>
<li>Cortex-A架构版本之前，是由协处理器（<a href="https://developer.arm.com/documentation/den0013/d/ARM-Processor-Modes-and-Registers/Registers/Coprocessor-15?lang=en">Coprocessor 15</a>） <code>CP15</code>的<code>C1</code>寄存器来决定的，且只能存放在 <code>0xFFFF0000</code>和<code>0x00000000</code>两者中的一个。</li>
<li>从Cortex-A架构版本开始，由协处理器 <code>CP15</code>的<code>c12</code>寄存器来决定，且不限制起始地址</li>
</ol>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125221405786.png" alt="Table B1-3 The vector tables"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125222433967.png" alt="image-20241125222433967"></p>
<blockquote>
<p><a href="https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities/Exception-mode-summary?lang=en">https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities/Exception-mode-summary?lang=en</a></p>
</blockquote>
<h2 id="cortex-a-chu-li-qi-yi-chang-xiang-liang-biao-ji-di-zhi-zhi-ding">Cortex-A处理器异常向量表基地址指定</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125223320833.png" alt="image-20241125223320833"></p>
<blockquote>
<p><a href="https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities?lang=en">https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities?lang=en</a></p>
</blockquote>
<blockquote>
<p>The first column in <a href="https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities?lang=en#CEGHDCAE">Table 11.1</a> gives the vector offset within the vector table associated with the particular type of exception. This is a table of instructions that the ARM core jumps to when an exception is raised. These instructions are located in a specific place in memory. The default vector base address is <code>0x00000000</code>, but most ARM cores permit the vector base address to be moved to <code>0xFFFF0000</code> (or <code>HIVECS</code>). <strong>All Cortex-A series processors permit this, and it is the default address selected by the Linux kernel. Cores that implement the Security Extensions can additionally set the vector base address, separately for Secure and Non-secure states, using the CP15 Vector Base Address registers.</strong></p>
<p><a href="https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities/The-Vector-table?lang=en">https://developer.arm.com/documentation/den0013/d/Exception-Handling/Exception-priorities/The-Vector-table?lang=en</a></p>
</blockquote>
<h3 id="cp-15-c-1">CP15 c1</h3>
<blockquote>
<p><a href="https://documentation-service.arm.com/static/602cf701083323480d479d18?token=">https://documentation-service.arm.com/static/602cf701083323480d479d18?token=</a></p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125225458216.png" alt="image-20241125225458216" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125225614769.png" alt="Table 4-52 SCTLR bit assignments (continued)  "></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125225701958.png" alt="image-20241125225701958"></p>
<h3 id="cp-15-c-12">CP15 c12</h3>
<blockquote>
<p><a href="https://developer.arm.com/documentation/ddi0406/cd/?lang=en">ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition</a></p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125230347930.png" alt="image-20241125230347930"></p>
<blockquote>
<p>[!NOTE]</p>
<p>其中高位[31:5]是向量表的基地址，低位[4:0]是异常向量的偏移量（offset）</p>
</blockquote>
<h1 id="svc-swi-yi-chang-chu-li">SVC/SWI异常处理</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126170039244.png" alt="image-20241126170039244"></p>
<h2 id="zai-cao-zuo-xi-tong-zhong-de-yun-yong">在操作系统中的运用</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126170125829.png" alt="image-20241126170125829"></p>
<h2 id="an-li-dai-ma">案例代码</h2>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
    b reset
    b undefined_instruction
    b software_interrupt
    b prefetch_abort
    b data_abort
    b not_used
    b irq_interrupt
    b fiq_interrupt 
    
undefined_instruction:.word undefined_instruction
prefetch_abort:.word prefetch_abort
data_abort:.word data_abort
not_used:.word not_used
irq_interrupt:.word irq_interrupt
fiq_interrupt:.word fiq_interrupt

reset:
    mov r0,#1
    mov r1,#2
    mov r2,#3
    
    swi #8      @will save CPSR to SPSR and set CPSR(T,M), save PC to LR
    
    mov r3,#4
    mov r4,#5
	
software_interrupt:
    ldr sp,=0x4000fff0
    stmfd sp!,{r0-r12,lr}
    
    ldr r0,[lr,#-4]
    mov r1,#0xff
    bic r0,r0,r1,lsl #24
    
    ldmfd sp!,{r0-r12,pc}
    
stop:
	b stop				
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ding-yi-yi-chang-xiang-liang-biao">定义异常向量表</h3>
<p>这里我们将异常向量表放在代码段起始地址：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">_start:
    b reset
    b undefined_instruction
    b software_interrupt
    b prefetch_abort
    b data_abort
    b not_used
    b irq_interrupt
    b fiq_interrupt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>异常向量表的指令顺序和地址偏移需要遵循规范，当发生异常跳转时处理器会按照规范从异常向量表找到对应的指令来执行</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126174514822.png" alt="image-20241126174514822"></p>
<h3 id="cheng-xu-ru-kou-reset">程序入口reset</h3>
<p>第一条指令跳转到 <code>reset</code></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">reset:
    mov r0,#1
    mov r1,#2
    mov r2,#3
    
    swi #8      @will save CPSR to SPSR and set CPSR(T,M), save PC to LR
    
    mov r3,#4
    mov r4,#5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中我们在 <code>swi</code>软中断指令前后增加了一些寄存器操作来验证一些事情：</p>
<ul>
<li>中断返回后，中断前的寄存器应该保持原样</li>
<li>中断返回后，应该接着下一条指令继续执行</li>
</ul>
<h3 id="zhong-duan-tiao-zhuan-arm-he-zi-dong-zuo-de-shi-qing">中断跳转——ARM核自动做的事情</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126175353623.png" alt="image-20241126175353623" style="zoom:50%;">
<ul>
<li>将当前CPSR保存到异常状态下的SPSR中</li>
<li>对CPSR进行如下设置
<ul>
<li>进入ARM状态（对应CPSR的T位）</li>
<li>设置工作模式为相应的异常模式（M位）</li>
<li>禁止中断（设置I位和F位为1）</li>
</ul>
</li>
<li>将当前PC的值保存到LR，以便异常处理完后能够跳转回中断发生的地方继续执行</li>
<li>将当前PC设置到异常向量表的相应位置（由于我们执行的是 <code>swi</code>软中断，因此会根据异常向量表规范，将PC指向向量表的基地址偏移 <code>0x08</code>的位置）</li>
</ul>
<blockquote>
<p>[!NOTE]</p>
<p>由于使用的是ARM9E-S的核，因此没有手动指定向量表基地址时，默认为 <code>0x00000000</code>。</p>
</blockquote>
<h3 id="zhong-duan-tiao-zhuan-cong-xiang-liang-biao-dao-zhong-duan-fu-wu-cheng-xu">中断跳转——从向量表到中断服务程序</h3>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">_start:
    b reset
    b undefined_instruction
    b software_interrupt
    b prefetch_abort
    b data_abort
    b not_used
    b irq_interrupt
    b fiq_interrupt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据向量表基地址及偏移量 <code>0x08</code>能够找到我们编写的 <code>b software_interrupt</code>，接着跳转到对应的中断服务程序：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">software_interrupt:
ldr sp,=0x4000fff0
stmfd sp!,{r0-r12,lr}

ldr r0,[lr,#-4]
mov r1,#0xff
bic r0,r0,r1,lsl #24

ldmfd sp!,{r0-r12,pc}^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>设置SP，将R0-12、LR压栈保护；</p>
</li>
<li>
<p>将LR偏移 <code>-4</code>的地址中的内容给到R0，由于LR是由ARM核中断跳转时设置的，因此我们回头看看中断跳转的地方：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126181400176.png" alt="image-20241126181400176"></p>
</li>
<li>
<p>接着将 <code>0xff</code>送入R1，并将R1左移24位后作为掩码将R0中的高8位清零，得到中断号 <code>#8</code></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126181736106.png" alt="image-20241126181736106"></p>
</li>
<li>
<p><code>ldmfd sp!,{r0-r12,pc}</code>，准备返回，出栈复原R0-R12，将LR（指向 <code>mov r3,#4</code>）送到PC，中断返回</p>
</li>
</ul>
<blockquote>
<p>[!IMPORTANT]</p>
<p>这里需要注意的是，<code>ldmfd sp!,{r0-r12,pc}^</code>中的 <code>^</code>，会将SPSR暂存的值写回CPSR</p>
</blockquote>
<h1 id="zong-jie">总结</h1>
<h2 id="yi-chang-chan-sheng-shi-arm-he-zi-dong-zuo-de-shi-qing">异常产生时，ARM核自动做的事情</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126190902985.png" alt="image-20241126190902985"></p>
<h2 id="yi-chang-sheng-cheng-zhi-qian-wo-men-xu-yao-zuo-de-shi-qing">异常生成之前，我们需要做的事情</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126192006040.png" alt="image-20241126192006040"></p>
<h2 id="yi-chang-fan-hui">异常返回</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126192130322.png" alt="image-20241126192130322"></p>
<blockquote>
<p>[!NOTE]</p>
<p><code>S</code>后缀表明在原有指令基础上，同时将SPSR恢复到C</p>
</blockquote>
<h1 id="the-end">The End</h1>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>ARM</tag>
        <tag>ARMv7</tag>
        <tag>异常</tag>
        <tag>中断</tag>
      </tags>
  </entry>
  <entry>
    <title>MDK调试之可视化外设&amp;内核寄存器</title>
    <url>/2024/11/30/5535.html</url>
    <content><![CDATA[<h1 id="qian-yan">前言</h1>
<p>我们经常遇到一个困惑：明明感觉代码没有问题，但是运行时就是无法按照预期执行。并且把别人的示例拿过来跑是可以跑通的，确认了硬件没问题，比对代码也找不出差异。</p>
<p>这通常是因为一些细节问题导致的，这类问题在逐检查时常常因为当局者迷难以发现，最常见的就是位运算相关的细节错误例如：</p>
<ul>
<li>
<p>清零错误：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> GPIO_CRH_MODE10<span class="token punctuation">;</span> <span class="token comment">//期望将GPIOA的CRH寄存器中的PA10工作模式清零</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上述代码少了 <code>~</code>，正确操作如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span> <span class="token comment">//期望将GPIOA的CRH寄存器中的PA10工作模式清零</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>判断某一位是否为1：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffer<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>通过按位与来判断某一位是否为1应该操作如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffer<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="mdk-wai-she-ji-cun-qi-shi-tu">MDK外设寄存器视图</h1>
<p>通过MDK的Debug功能，我们实时查看代码执行到断电时，对应的外设寄存器中的值，从而可视化地分析响应的寄存器是否真的按照预期被设置了，从而避免检查代码时无法察觉细节错误的情况。</p>
<p>以 <code>GPIOA-&gt;CRH &amp;= GPIO_CRH_MODE10</code>为例，我们期望通过这一行代码将 <code>CRH</code>寄存器的第8、9个bit清零</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130112416568.png" alt="image-20241130112416568"></p>
<h2 id="she-zhi-duan-dian">设置断点</h2>
<p>可以在该行代码的左侧点击打上断点：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130112531806.png" alt="image-20241130112531806"></p>
<h2 id="fang-xing-cheng-xu-dao-duan-dian-chu-zan-ting">放行程序到断点处暂停</h2>
<p>然后进入Debug模式并通过Run使程序停在断点处：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130112707073.png" alt="image-20241130112707073"></p>
<h2 id="da-kai-wai-she-xi-tong-shi-tu">打开外设系统视图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130112746427.png" alt="image-20241130112746427"></p>
<h2 id="zhao-dao-dui-ying-ji-cun-qi">找到对应寄存器</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130112926649.png" alt="image-20241130112926649" style="zoom:50%;">
<h2 id="bu-jin-bing-cha-kan-dui-ying-ji-cun-qi-shi-fou-an-zhao-yu-qi-bei-she-zhi">步进并查看对应寄存器是否按照预期被设置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130113658038.png" alt="image-20241130113658038"></p>
<p>步进后发现本来预期只设置MODE10，结果发现其他的bit位也被影响了（高亮部分），说明我们的代码有问题</p>
<h1 id="zhi-jie-xiu-gai-ji-cun-qi-bing-sheng-xiao">直接修改寄存器并生效</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130115225062.png" alt="image-20241130115225062"></p>
<p>如上，我们可以通过勾选/取消勾选（相当于ODR置1/0），并实时观察LED的变化。其他寄存器中可编辑的地方应该也都是可以实时手动修改的。</p>
<h1 id="arm-he-xiang-guan-ji-cun-qi">ARM核相关寄存器</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130115446304.png" alt="image-20241130115446304"></p>
]]></content>
      <categories>
        <category>MDK</category>
      </categories>
      <tags>
        <tag>MDK</tag>
        <tag>Debug</tag>
        <tag>寄存器可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM核学习（四）ATPCS标准_汇编与C混合编程_volatile关键字</title>
    <url>/2024/11/24/59994.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<p><a href="https://developer.arm.com/documentation/dui0041/latest/Thumb-Procedure-Call-Standard/About-the-Thumb-Procedure-Call-Standard">The ARM-THUMB Procedure Call Standard</a></p>
<h1 id="atpcs-biao-zhun">ATPCS标准</h1>
<h2 id="atpcs-biao-zhun-jie-shao">ATPCS标准介绍</h2>
<p>ATPCS是<mark>ARM-Thumb Procedure Call Standard</mark>的缩写，也就是<mark>ARM-Thumb的程序调用标准</mark>。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124210132131.png" alt="image-20241124210132131"></p>
<h2 id="ji-cun-qi-jiao-se">寄存器角色</h2>
<blockquote>
<p>The first four registers r0-r3 are used to pass parameter values into a routine and result values out of a routine and to hold intermediate values within a routine (but, in general, only between subroutine calls). In ARM-state, register r12— also called IP— can also be used to hold intermediate values between subroutine calls.</p>
</blockquote>
<p><mark>r0-r3</mark>通常用来传递函数参数、返回函数结果和保存函数执行过程中产生的中间变量（例如 <code>sum=a+b</code>需要先将 <code>a+b</code>的计算结果存到寄存器中再写到 <code>sum</code>对应的内存）。</p>
<p>在ARM状态下，<mark>r12，也称为IP</mark>寄存器也可以用来保存临时变量，尤其是当其他通用寄存器（r0-r11）已被使用时。</p>
<blockquote>
<p><code>r12</code> (IP) is a <strong>general-purpose register</strong>, not reserved for any specific use in standard ARM programming.</p>
<p>The <strong>ARM Procedure Call Standard (AAPCS)</strong> defines it as a <strong>scratch register</strong>. This means:</p>
<ul>
<li>The <strong>caller</strong> can use it freely to store temporary values.</li>
<li>The <strong>callee</strong> (the function being called) does not preserve its value. If <code>r12</code> is used by the caller before calling another function, its value will be lost unless explicitly saved.</li>
</ul>
</blockquote>
<blockquote>
<p>Typically, the registers from r4 to r11 are used to hold the values of a routine’s local variables. They are also labeled v1-v8. Only v1-v4 can be used uniformly by the whole Thumb instruction set (shown emboldened).</p>
</blockquote>
<p>一般地，<mark>r4-r11</mark>用来保存函数的局部变量，他们被标记为v1-v8。Thumb指令集只能使用v1-v4。</p>
<blockquote>
<p>In all variants of the procedure call standard, registers r12-r15 have special roles. In these roles they are labeled IP, SP, LR and PC (or ip, sp, lr, and pc, but this standard uses the upper case name for the special role)</p>
</blockquote>
<p><mark>r12-r15</mark>有着特殊的角色，例如IP（临时保存SP），SP（指向栈顶），LR（跳转时用来保存PC）、PC，并且使用大写来标示他们的特殊角色。</p>
<blockquote>
<p>In some variants of the procedure call standard, r9 and r10 also have a special role. In these roles, r9 is labeled SB and r10 is labeled SL (or sb and sl).<br>
Only registers r0-r7, SP, LR and PC are ubiquitously available in Thumb state. Their synonyms and special names are shown emboldened. Few Thumb instructions can access the high registers, v5-v8, SB, SL and IP.<br>
In Thumb-state, r7 is often used as a work register and is also labeled WR</p>
</blockquote>
<h2 id="can-shu-chuan-di">参数传递</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124212508273.png" alt="image-20241124212508273"></p>
<p><mark>在定义函数时，参数数量尽量不要超过4个，这样效率较好</mark></p>
<h2 id="han-shu-fan-hui-zhi">函数返回值</h2>
<ul>
<li>返回值为一个32位的整数时，可以通过寄存器0返回</li>
<li>返回值为一个64位整数时，可以通过R0和R1返回，依此类推</li>
</ul>
<h2 id="zhan-zheng-fen-xi">栈帧分析</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124213834303.png" alt="image-20241124213834303" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124213931226.png" alt="image-20241124213931226"></p>
<h1 id="fan-hui-bian-fen-xi-atpcs-biao-zhun">反汇编分析ATPCS标准</h1>
<h2 id="zhun-bei-hui-bian-he-c-wen-jian">准备汇编和C文件</h2>
<p>准备一个汇编启动文件和一个C文件：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125151255393.png" alt="image-20241125151255393"></p>
<p>在 <code>asm.s</code>中，在调用 <code>main_label</code>函数之前，我们操作了下R0-R2，并设置了SP，模拟在调用函数前做了一些操作</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x11			
	mov r1,#0x22
    mov r2,#0x33
    mov sp,#0x00002000
	bl main_label	
	
stop:
	b stop				
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main_label</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jin-yong-bian-yi-you-hua">禁用编译优化</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125151330962.png" alt="image-20241125151330962" style="zoom: 50%;">
<h2 id="diao-shi-fen-xi-amp-nei-cun-ying-she">调试分析&amp;内存映射</h2>
<p>在点击debug后，步进之前，我们先添加一下内存映射 <code>0x00001000,0x00002000</code>，因为在 <code>asm.s</code>中我们有设置过SP <code>mov sp,#0x00002000</code>（<mark>注意每次点击debug后都需要手动映射下</mark>）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125102205035.png" alt="image-20241125102205035"></p>
<p>接着我们步进，在调用 <code>main_label</code>函数之前，对R0-R2，SP(R13)有所使用（模拟函数调用前操作过相关的寄存器）：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125104048265.png" alt="image-20241125104048265"></p>
<p>寄存器状态示例：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125132148176.png" alt="image-20241125132148176" style="zoom:50%;">
<h2 id="han-shu-diao-yong-fen-xi">函数调用分析</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125115716832.png" alt="image-20241125115716832"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241124213834303.png" alt="image-20241124213834303" style="zoom:50%;">
<p>参照ATPCS标准，我们接着分析 <code>main_label</code>函数的执行。</p>
<h3 id="jiang-sp-zan-cun-dao-ip">将SP暂存到IP</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125104614719.png" alt="image-20241125104614719"></p>
<p>首先将<code>R13(SP)</code>送到了<code>R12(IP)</code>进行保存（这里可以看出<code>IP</code>的临时保存作用，将函数调用前的SP栈顶指针暂存起来以便后续恢复）：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125132222836.png" alt="image-20241125132222836"></p>
<p>接着我们看下一条指令的执行：</p>
<p>压栈PC,LR,IP,FP</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125105604588.png" alt="image-20241125105604588"></p>
<p>将<code>R11(FP)、R12(IP)、R14(LR)、PC(R15)</code>通过 <code>STMDB</code>指令进行压栈（参考另一篇文章《ARM核学习（二）指令集》），值得注意的是：</p>
<ul>
<li>ATPCS标准规定使用<mark>满减栈模式</mark>（从高地址向低地址增长，栈顶指针SP指向最后一个入栈的数据地址）</li>
<li><code>STM</code>：多数据传输指令，同时将多个数据进行压栈</li>
<li><code>DB</code>： <mark>Decrease&nbsp;Before</mark>（先递减SP然后压栈数据），这里压栈4个寄存器（字宽4字节），所以SP会递减4*4=16</li>
<li>同时压栈多个寄存器时，序号（Rn中的n）大的寄存器对应栈的高地址，序号小的则对应低地址</li>
</ul>
<p>寄存器状态示意图：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125132238290.png" alt="image-20241125132238290" style="zoom:50%;">
<h3 id="she-zhi-zhan-ji-zhi-fp-zhan-di-shu-ju-de-di-zhi">设置栈基址FP（栈底数据的地址）</h3>
<p>将R12(IP，之前保存了SP，即调用方caller的SP)，通过 <code>SUB</code>指令减4，赋值给R11（FP，栈基值，被调方callee即 <code>main_label</code>函数的栈的起始地址）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125115123312.png" alt="image-20241125115123312"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125120006973.png" alt="image-20241125120006973"></p>
<p>寄存器示意图:</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125132458366.png" alt="image-20241125132458366"></p>
<blockquote>
<p>caller表示调用方，callee表示被调方</p>
</blockquote>
<h3 id="zeng-jia-sp-kuo-da-zhan-kong-jian">增加SP，扩大栈空间</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125121914111.png" alt="image-20241125121914111"></p>
<p>接着通过 <code>SUB</code>指令，将SP(R13)减去 <code>0x00000010</code>（即16字节，4个字），相当于将SP下移了四个存储单元</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125132531947.png" alt="image-20241125132531947"></p>
<p>这样就相当于在栈中空出四个存储单元，为什么要这样做呢，我们接着往下看</p>
<h3 id="han-shu-ru-can-ya-zhan">函数入参压栈</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125131249986.png" alt="image-20241125131249986"></p>
<p>这里将R0写到R11（FP，栈基址）向下偏移 <code>0x0018</code>（即24字节，六个字）对应的存储单元中：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125133004294.png" alt="image-20241125133004294"></p>
<p>同样的，将R1写到FP向下偏移 <code>0x001C</code>（28个字节，7个字）的存储单元中：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125134213403.png" alt="image-20241125134213403"></p>
<p>根据ATPCS标准的规范，<code>r0</code>通常用来传递第一个参数<code>a1</code>，<code>r1</code>通常用来传递第二个参数<code>a2</code>，因此上述操作起始就是将函数的两个入参 <code>main_label(int argc, const char *argv[])</code> 压栈</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125131207660.png" alt="image-20241125131207660" style="zoom:33%;">
<h3 id="han-shu-ju-bu-bian-liang-ya-zhan">函数局部变量压栈</h3>
<p>对应 <code>int i = 0</code></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125133712296.png" alt="image-20241125133712296"></p>
<p>先将常量 <code>0</code>传输到寄存器R3中（这里R3作为通用寄存器存放临时的常量），再通过 <code>STR</code>指令压栈：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125134430454.png" alt="image-20241125134430454"></p>
<p>同样的，将局部变量 <code>b</code>压栈：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125134728492.png" alt="image-20241125134728492"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125134805022.png" alt="image-20241125134805022"></p>
<h3 id="ji-yu-zhan-he-ji-cun-qi-zuo-yun-suan">基于栈和寄存器做运算</h3>
<p>接着就到了 <code>b = i++ + ++i;</code>这一行代码的执行，它的过程是这样的：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">++</span>i<span class="token punctuation">;</span>
b <span class="token operator">=</span> i <span class="token operator">+</span> i<span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125135029185.png" alt="image-20241125135029185"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125135429854.png" alt="image-20241125135429854"></p>
<p>接着分析，我们会发现处理器的行为与我们在C语言的预期步骤是有出入的，这可能是因为指令重排序的原因，<mark>但无论怎样重排序，其结果与C语言的预期步骤得出的结果要保持一致。</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125141616740.png" alt="image-20241125141616740"></p>
<h3 id="diao-yong-zi-han-shu-zi-guo-cheng-subroutine">调用子函数/子过程（subroutine）</h3>
<p>这与我们从汇编开始调用 <code>main_label</code>的分析思路是一样的，这里不在赘述。</p>
<h3 id="han-shu-fan-hui">函数返回</h3>
<p>接下来我们看一看 <code>main_label</code>函数的最后一行 <code>return 0;</code>都做了什么：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125144155014.png" alt="image-20241125144155014"></p>
<p>首先将常量 <code>0</code>（返回值）传输到R3进行临时保存；然后根据ATPCS标准，应该将返回值通过R0来传递，因此又将R3传输到了R0</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125144454192.png" alt="image-20241125144454192" style="zoom:33%;">
<p>接着通过 <code>SUB</code>，将R13(SP)指向R11(FP)向下偏移<code>0xC</code>的位置。如下图，SP指向这个位置后，相当于将函数参数和局部变量出栈释放了（对应图中灰色部分）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125144022274.png" alt="image-20241125144022274"></p>
<p>接着通过 <code>LDMIA</code>将还保存在栈中的调用方的<code>LR, SP, FP</code>恢复到<code>R14, R13, R11</code>中</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125145835783.png" alt="image-20241125145835783"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125145806719.png" alt="image-20241125145806719"></p>
<p>接着通过 <code>BX</code>指令根据LR(R14)跳转回调用方：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125150802906.png" alt="image-20241125150802906"></p>
<blockquote>
<p>为什么通过LR可以跳转回去呢？</p>
</blockquote>
<p>这是因为我们是通过 <code>bl main_label</code>跳转的，<code>l</code>后缀会将当前PC暂存到LR中，因此可以通过 <code>BX R14</code>跳转回去。</p>
<h1 id="hui-bian-yu-c-hun-he-bian-cheng">汇编与C混合编程</h1>
<h2 id="hui-bian-yu-yan-diao-yong-c-yu-yan">汇编语言调用C语言</h2>
<h3 id="zai-kan-c-yu-yan-cheng-xu-ru-kou">再看C语言程序入口</h3>
<blockquote>
<p>C语言程序的入口是main函数吗？</p>
</blockquote>
<p>经过上文的分析，我们知道C语言函数的执行过程是依赖栈的，在函数代码真正执行前需要将调用方程序状态相关的寄存器压栈保护（例如 <code>LR, SP, FP</code>）、函数参数压栈，如果有局部变量则也需要压栈，执行过程中的运算是基于栈和寄存器的配合来完成的。</p>
<p>因此每个函数的在执行前都需要设置栈的起始地址（SP），<code>main</code>当然也不例外，而这需要借助汇编来完成。</p>
<h3 id="mei-you-she-zhi-sp-han-shu-wu-fa-zheng-chang-zhi-xing">没有设置SP，函数无法正常执行</h3>
<p>让我们来看下如下程序：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125154604074.png" alt="image-20241125154604074"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x2			
	mov r1,#0x3
	bl add	
	
stop:
	b stop				
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">int add(int a, int b) {
    return a + b;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>调试前需要先禁用编译器优化并重新编译：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125154632764.png" alt="image-20241125154632764" style="zoom:33%;">
<p>调试时会发现，函数执行前的压栈导致SP变成了<code>0xFFFFFFF0</code>，并且接着步进，程序无法按照预期结束。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125155225192.png" alt="image-20241125155225192"></p>
<p>这是因为调用函数时没有设置SP，SP默认为零值：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125155435833.png" alt="image-20241125155435833"></p>
<h3 id="han-shu-diao-yong-qian-xu-yao-zheng-que-she-zhi-sp">函数调用前需要正确设置SP</h3>
<p>于是我们在函数调用前，设置一下栈指针SP，并将相应的内存范围映射一下</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x2			
	mov r1,#0x3
    ldr sp,=0x4000FFF0
	bl add	
	
stop:
	b stop				
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><mark>注意，这里要将SP设置为4的整数倍</mark></p>
<p><code>0x40000000,0x4000FFFF</code></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125160139087.png" alt="image-20241125160139087" style="zoom: 50%;">
<p>调整后发现可以正常执行到 <code>stop</code>，并且函数返回值 <code>2+3=5</code>也通过R0传递了过来</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125164223712.png" alt="image-20241125164223712"></p>
<p>我们还可以打开函数调用栈窗口来更直观地观察入参压栈的过程：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125164542704.png" alt="image-20241125164542704" style="zoom: 50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125165001604.png" alt="image-20241125165001604"></p>
<h2 id="c-yu-yan-nei-qian-hui-bian">C语言内嵌汇编</h2>
<h3 id="ge-shi">格式</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125165243027.png" alt="image-20241125165243027" style="zoom: 50%;">
<h3 id="shi-li">示例</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125172126182.png" alt="image-20241125172126182"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
	mov r0,#0x2			
	mov r1,#0x3
    ldr sp,=0x4000FFF0
	bl add	
	
stop:
	b stop				
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    
    <span class="token keyword">asm</span><span class="token punctuation">(</span>
        <span class="token string">"add r0,%1,%2\n"</span>
        <span class="token string">"mov %0,r0\n"</span>
        <span class="token operator">:</span><span class="token string">"=r"</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token operator">:</span><span class="token string">"r"</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token operator">:</span><span class="token string">"r0"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：可以通过%n引用输入列表、输出列表中的寄存器，从输出列表开始编号，输出列表的编号接着输入列表的最后一个</p>
</blockquote>
<ul>
<li>
<p>通过 <code>asm</code>关键字内嵌一段汇编代码</p>
</li>
<li>
<p><code>:"r"(a), "r"(b)</code>：<mark>输入列表</mark>，声明将C程序中哪些变量输入到内嵌汇编的通用寄存器中（具体哪个寄存器是无法预知的，可以通过 <code>%</code>进行引用）。<mark>如果没有输入，则留一个空的冒号即可，但不能去掉该行。</mark></p>
</li>
<li>
<p><code>"add r0,%1,%2\n"</code>：<mark>汇编指令</mark>，通过 <code>%1</code>、<code>%2</code>引用输入列表的中的变量 <code>a</code>、<code>b</code>对应的寄存器，并通过 <code>add</code>指令将这两个寄存器相加，结果存入 <code>r0</code>；<mark>注意，换行是不可省略的，标示这条指令结束</mark></p>
</li>
<li>
<p><code>:"=r"(c)</code>：<mark>输出列表</mark>，声明将C程序的哪些变量的值由内嵌汇编输出。<code>=</code>标示了该汇编结束时需要将寄存器写入变量中。</p>
</li>
<li>
<p><code>"mov %0,r0\n"</code>：<mark>汇编指令</mark>，将 <code>r0</code>中的值输入到 <code>%0</code>引用的寄存器中，由于引用编号是从输出列表开始的，因此引用的就是变量 <code>c</code>关联的寄存器</p>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125165906124.png" alt="image-20241125165906124"></p>
<p>调试前别忘了映射下内存 <code>0x40000000,0x4000FFFF</code></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125174751017.png" alt="image-20241125174751017"></p>
<h1 id="volatile-guan-jian-zi">volatile关键字</h1>
<h2 id="gcc-bian-yi-you-hua">gcc编译优化</h2>
<h3 id="shi-li-cheng-xu">示例程序</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125181741845.png" alt="image-20241125181741845"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.global _start

_start:
    ldr sp,=0x4000FFF0
	bl add	
	
stop:
	b stop				
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> global_a <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> global_b <span class="token operator">=</span> <span class="token number">0x4</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> global_a <span class="token operator">+</span> global_b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>global_a <span class="token operator">&gt;</span> global_b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="kai-qi-bian-yi-qi-you-hua">开启编译器优化</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125181830904.png" alt="image-20241125181830904" style="zoom: 50%;">
<h3 id="you-hua-hou-de-hui-bian-zhi-ling-fen-xi">优化后的汇编指令分析</h3>
<p>内存映射：<code>0x40000000,0x4000FFFF</code></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125181717824.png" alt="image-20241125181717824"></p>
<p>可以发现在执行 <code>int c = global_a + global_b;</code>时从内存读取 <code>global_a</code>和 <code>global_b</code>的值到<code>R2, R3</code>中；但是执行 <code>if(global_a &gt; global_b)</code>，并没重新从内存读取 <code>global_a</code>和 <code>global_b</code>的值，而是使用了此前<code>R2, R3</code>的快照。</p>
<h3 id="bian-yi-qi-you-hua-si-xiang-ji-bi-duan">编译器优化思想及弊端</h3>
<blockquote>
<p>[!NOTE]</p>
<p>根据另一篇文章《ARM核学习（三）指令流水线分析及伪指令》的分析，这是因为内存访问操作较低，无法发挥指令流水线的最佳性能，因此编译器优化会使用寄存器快照代替内存访问</p>
</blockquote>
<p>那么在<mark>并发场景</mark>下，如果在执行 <code>if(global_a &gt; global_b)</code>时发生了上下文切换，并且全局变量 <code>global_a</code>和 <code>global_b</code>的值被修改，那么 <code>R2, R3</code>中的值就不是最新的，因而会产生并发问题。</p>
<h2 id="volatile-guan-jian-zi-de-zuo-yong">volatile关键字的作用</h2>
<blockquote>
<p>[!TIP]</p>
<p><code>volatile</code>关键字的语意是易变的，被该关键字修饰的变量在读写时能够禁止编译器优化，从而使得每次读 <code>volatile</code>变量强制从内存读取最新值（在CPU Cache模型中每次写 <code>volatile</code>变量 也会立即将寄存器中的值刷新到内存）</p>
</blockquote>
<p>下面我们给 <code>global_a</code>和 <code>global_b</code>加上 <code>volatile</code>修饰后再来调试下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241125184042361.png" alt="image-20241125184042361"></p>
<p>可以发现 <code>if(global_a &gt; global_b)</code>时，通过 <code>LDR</code>指令，强制从内存读值了。</p>
<h1 id="the-end">The End</h1>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>ARM</tag>
        <tag>ARMv7</tag>
        <tag>ATPCS</tag>
      </tags>
  </entry>
  <entry>
    <title>RTC和BKP：为STM32添加持久化时钟与关键数据存储</title>
    <url>/2024/12/18/36496.html</url>
    <content><![CDATA[<h1 id="hou-bei-ji-cun-qi-bkp">后备寄存器-BKP</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218165141262.png" alt="image-20241218165141262"></p>
<h2 id="ji-cun-qi-shi-xian">寄存器实现</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218170348501.png" alt="image-20241218170348501" style="zoom:50%;">
<h2 id="hal-shi-xian">HAL实现</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218172338725.png" alt="image-20241218172338725"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218172438717.png" alt="image-20241218172438717" style="zoom: 25%;">
<h3 id="yuan-ma-fen-xi">源码分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218172533254.png" alt="image-20241218172533254"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218172604416.png" alt="image-20241218172604416"></p>
<h1 id="rtc-shi-shi-shi-zhong">RTC实时时钟</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218203341971.png" alt="image-20241218203341971"></p>
<h2 id="yuan-li-fen-xi">原理分析</h2>
<h3 id="kuang-tu">框图</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218183552806.png" alt="image-20241218183552806"></p>
<h3 id="hou-bei-yu-zhong-zhi">后备域重置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218192521184.png" alt="image-20241218192521184"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218195313254.png" alt="image-20241218195313254"></p>
<h3 id="rtc-shi-zhong-yuan">RTC时钟源</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218200313953.png" alt="image-20241218200313953"></p>
<h4 id="shi-li-dai-ma">示例代码</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 配置RTC内部时钟源为LSE</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtc_clksource_config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启后后备域写保护</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_PWREN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_BKPEN<span class="token punctuation">;</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_DBP<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>BKP<span class="token operator">-&gt;</span>DR2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"识别到BKP-DR2标识，跳过RTC时钟源的配置"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 软件重置后备域（重置后才能配置RTC时钟源）</span>
    RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_BDRST<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_BDCR_BDRST<span class="token punctuation">;</span>

    <span class="token comment">// 使能LSE</span>
    RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_LSEON<span class="token punctuation">;</span>
    <span class="token comment">// 选择LSE作为RTC时钟源</span>
    RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_RTCSEL_LSE<span class="token punctuation">;</span>

    <span class="token comment">// 使用后备寄存器DR2标识RTC时钟源已经配置过</span>
    BKP<span class="token operator">-&gt;</span>DR2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"RTC时钟源已配置位LSE"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="pei-zhi-rtc-ji-cun-qi-liu-cheng">配置RTC寄存器流程</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218191047351.png" alt="image-20241218191047351"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218202928641.png" alt="image-20241218202928641"></p>
<h3 id="ying-jian-zhi-wei-biao-zhi-wei-amp-xie-cao-zuo-tong-bu">硬件置位标志位 &amp; 写操作同步</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218191656801.png" alt="image-20241218191656801"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218191156436.png" alt="image-20241218191156436"></p>
<h3 id="du-ji-cun-qi-tong-bu">读寄存器同步</h3>
<ul>
<li>RTC 核心时钟和 APB1 接口时钟是独立的。</li>
<li>软件通过 APB1 接口访问 RTC 数据时，实际上读取的是同步后的副本。</li>
<li>当 APB1 接口重新启用后，第一次读取 RTC 数据可能出错，因为寄存器副本还未同步完成。</li>
<li>软件需要在读取 RTC 数据之前，等待寄存器同步完成（通过检测 <code>RSF</code> 标志）</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218221117011.png" alt="image-20241218221117011"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218221222165.png" alt="image-20241218221222165"></p>
<h2 id="an-li-shi-yong-unix-shi-jian-chuo-zuo-wei-rtc-ji-shu-zhi">案例-使用Unix时间戳作为RTC计数值</h2>
<h3 id="hou-bei-yu-ji-cun-qi-fang-wen-shi-neng">后备域寄存器访问使能</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BKP_EnableAccess</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_PWREN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_BKPEN<span class="token punctuation">;</span>
    <span class="token comment">// 开启后后备域写保护</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_DBP<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="rtc-shi-zhong-yuan-pei-zhi-lse">RTC时钟源配置（LSE)</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * @brief 配置 RTC 的时钟源为 LSE。
 * @details 如果后备域已经配置，则直接返回。
 *          否则，软件复位后备域，启用 LSE 时钟，并将其配置为 RTC 时钟源。
 */</span>
<span class="token keyword">void</span> <span class="token function">RTC_ConfigLSE</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BKP<span class="token operator">-&gt;</span>DR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 软件重置后备域（重置后才能重新选择RTC时钟源）</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_BDRST<span class="token punctuation">;</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_BDCR_BDRST<span class="token punctuation">;</span>

        <span class="token comment">// 使能LSE</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_LSEON<span class="token punctuation">;</span>

        <span class="token comment">// 选择LSE作为RTC时钟源</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_RTCSEL_LSE<span class="token punctuation">;</span>

        <span class="token comment">// 设置后备寄存器DR，指示RTC时钟源已经配置过</span>
        BKP<span class="token operator">-&gt;</span>DR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"RTC时钟源已配置为LSE"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"识别到BKP-DR标识，跳过RTC时钟源的配置"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="rtc-chu-shi-hua-xie-yu-fen-pin-zhuang-zai-zhi">RTC初始化（写预分频装载值）</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">RTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">BKP_EnableAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_ConfigLSE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 时钟配置 */</span>
    <span class="token comment">// 等待LSE就绪</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">&amp;</span> RCC_BDCR_LSERDY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使能RTC-APB1接口时钟</span>
    RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_RTCEN<span class="token punctuation">;</span>

    <span class="token comment">/* 参考手册RTC寄存器配置流程 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 进入RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> RTC_CRL_CNF<span class="token punctuation">;</span>

    <span class="token comment">// 配置RTC预分频装载值，例如32768(7FFF)，分频后得到TR_CLK=1Hz</span>
    RTC<span class="token operator">-&gt;</span>PRLH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    RTC<span class="token operator">-&gt;</span>PRLL <span class="token operator">=</span> <span class="token number">0x7FFF</span> <span class="token operator">&amp;</span> RTC_PRLL_PRL<span class="token punctuation">;</span>

    <span class="token comment">// 退出RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_CNF<span class="token punctuation">;</span>
    <span class="token comment">// 退出RTC配置模式后，写操作才会被执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="she-zhi-unix-shi-jian-chuo-xie-ji-shu-zhi">设置Unix时间戳（写计数值）</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">RTC_SetUnixSecond</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> unixSecond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 参考手册RTC寄存器配置流程 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 进入RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> RTC_CRL_CNF<span class="token punctuation">;</span>

    <span class="token comment">// 配置RTC计数值，例如当前unix时间戳（秒）1734524925</span>
    <span class="token comment">// 等待秒标志位置位后才能配置RTC计数值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_SECF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    RTC<span class="token operator">-&gt;</span>CNTH <span class="token operator">=</span> unixSecond <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    RTC<span class="token operator">-&gt;</span>CNTL <span class="token operator">=</span> unixSecond<span class="token punctuation">;</span>

    <span class="token comment">// 退出RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_CNF<span class="token punctuation">;</span>
    <span class="token comment">// 退出RTC配置模式后，写操作才会被执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RTC 的计数器和分频器在每一秒钟的末尾更新，并通过 <code>SECF</code> 标志告知硬件和软件：</p>
<ul>
<li>当前秒钟周期已经结束，计数器即将被更新到下一秒。</li>
<li>在 <code>SECF</code> 置位时，RTC 内部时钟稳定且处于受控状态，允许执行对 RTC 计数器的更新操作。</li>
</ul>
<p>因此，等待 <code>SECF</code> 被置位确保了：</p>
<ul>
<li>RTC 当前的计时周期已经稳定。</li>
<li>分频器的状态是同步的（与 1Hz 的时钟频率对齐）。</li>
</ul>
<h3 id="huo-qu-unix-shi-jian-chuo-du-ji-shu-zhi">获取Unix时间戳（读计数值）</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint32_t</span> <span class="token function">RTC_GetUnixSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待寄存器同步</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RSF<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清除RSF</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_RSF<span class="token punctuation">;</span>
    <span class="token comment">// 读取计数器中的值</span>
    <span class="token keyword">return</span> RTC<span class="token operator">-&gt;</span>CNTH <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> RTC<span class="token operator">-&gt;</span>CNTL<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ce-shi-diao-dian-hou-rtc-reng-zai-yun-xing">测试掉电后RTC仍在运行</h3>
<p>先运行一次，设置时间戳；然后注释时间戳的设置，测试重启、断电重新上电后，后备域仍在运行。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218223711578.png" alt="image-20241218223711578"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//RTC_SetUnixSecond(1734524925);</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"unix sencod = %d"</span><span class="token punctuation">,</span> <span class="token function">RTC_GetUnixSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shi-jian-chuo-jie-xi">时间戳解析</h3>
<p>cmd获取时间戳方法：</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">powershell -Command "[int][double]::Parse((Get-Date -UFormat %s))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>时间戳解析：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">RTC_GetCalendar</span><span class="token punctuation">(</span>CalendarTypeDef <span class="token operator">*</span>calendarBuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待寄存器同步</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RSF<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清除RSF</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_RSF<span class="token punctuation">;</span>
    <span class="token comment">// 读取计数器中的值</span>
    <span class="token class-name">uint32_t</span> second <span class="token operator">=</span> RTC<span class="token operator">-&gt;</span>CNTH <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> RTC<span class="token operator">-&gt;</span>CNTL<span class="token punctuation">;</span>

    <span class="token comment">// 解析时间戳</span>
    <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>time     <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>year   <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>month  <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>day    <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_mday<span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>hour   <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_hour<span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>minute <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_min<span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>second <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_sec<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//RTC_SetUnixSecond(1734606383);</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>

    CalendarTypeDef calendar<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">RTC_GetCalendar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%04d-%02d-%02d %02d:%02d:%02d"</span><span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>year<span class="token punctuation">,</span>
                  calendar<span class="token punctuation">.</span>month<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>day<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>hour<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>minute<span class="token punctuation">,</span>
                  calendar<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="you-hua-shi-jian-chuo-chu-shi-hua">优化-时间戳初始化</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">RTC_SetUnixSecond</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> unixSecond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>BKP<span class="token operator">-&gt;</span>DR3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"已初始化过时间戳"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    BKP<span class="token operator">-&gt;</span>DR3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"开始初始化时间戳"</span><span class="token punctuation">)</span>

    <span class="token comment">/* 参考手册RTC寄存器配置流程 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 进入RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> RTC_CRL_CNF<span class="token punctuation">;</span>

    <span class="token comment">// 配置RTC计数值，例如当前unix时间戳（秒）1734524925</span>
    <span class="token comment">// 等待秒标志位置位后才能配置RTC计数值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_SECF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    RTC<span class="token operator">-&gt;</span>CNTH <span class="token operator">=</span> unixSecond <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    RTC<span class="token operator">-&gt;</span>CNTL <span class="token operator">=</span> unixSecond<span class="token punctuation">;</span>

    <span class="token comment">// 退出RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_CNF<span class="token punctuation">;</span>
    <span class="token comment">// 退出RTC配置模式后，写操作才会被执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_SetUnixSecond</span><span class="token punctuation">(</span><span class="token number">1734606383</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>

    CalendarTypeDef calendar<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">RTC_GetCalendar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%04d-%02d-%02d %02d:%02d:%02d"</span><span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>year<span class="token punctuation">,</span>
                  calendar<span class="token punctuation">.</span>month<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>day<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>hour<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>minute<span class="token punctuation">,</span>
                  calendar<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241219111723558.png" alt="image-20241219111723558"></p>
<h3 id="wan-zheng-dai-ma">完整代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"time.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> year<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> month<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> day<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> hour<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> minute<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> second<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> weekday<span class="token punctuation">;</span>
<span class="token punctuation">}</span> CalendarTypeDef<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">BKP_EnableAccess</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_PWREN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_BKPEN<span class="token punctuation">;</span>
    <span class="token comment">// 开启后后备域写保护</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_DBP<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * @brief 配置 RTC 的时钟源为 LSE。
 * @details 如果后备域已经配置，则直接返回。
 *          否则，软件复位后备域，启用 LSE 时钟，并将其配置为 RTC 时钟源。
 */</span>
<span class="token keyword">void</span> <span class="token function">RTC_ConfigLSE</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BKP<span class="token operator">-&gt;</span>DR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 软件重置后备域（重置后才能重新选择RTC时钟源）</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_BDRST<span class="token punctuation">;</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_BDCR_BDRST<span class="token punctuation">;</span>

        <span class="token comment">// 使能LSE</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_LSEON<span class="token punctuation">;</span>

        <span class="token comment">// 选择LSE作为RTC时钟源</span>
        RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_RTCSEL_LSE<span class="token punctuation">;</span>

        <span class="token comment">// 设置后备寄存器DR，指示RTC时钟源已经配置过</span>
        BKP<span class="token operator">-&gt;</span>DR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"RTC时钟源已配置为LSE"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"识别到BKP-DR标识，跳过RTC时钟源的配置"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">RTC_SetUnixSecond</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> unixSecond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>BKP<span class="token operator">-&gt;</span>DR3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"已初始化过时间戳"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    BKP<span class="token operator">-&gt;</span>DR3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"开始初始化时间戳"</span><span class="token punctuation">)</span>

    <span class="token comment">/* 参考手册RTC寄存器配置流程 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 进入RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> RTC_CRL_CNF<span class="token punctuation">;</span>

    <span class="token comment">// 配置RTC计数值，例如当前unix时间戳（秒）1734524925</span>
    <span class="token comment">// 等待秒标志位置位后才能配置RTC计数值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_SECF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    RTC<span class="token operator">-&gt;</span>CNTH <span class="token operator">=</span> unixSecond <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    RTC<span class="token operator">-&gt;</span>CNTL <span class="token operator">=</span> unixSecond<span class="token punctuation">;</span>

    <span class="token comment">// 退出RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_CNF<span class="token punctuation">;</span>
    <span class="token comment">// 退出RTC配置模式后，写操作才会被执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">RTC_GetCalendar</span><span class="token punctuation">(</span>CalendarTypeDef <span class="token operator">*</span>calendarBuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待寄存器同步</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RSF<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清除RSF</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_RSF<span class="token punctuation">;</span>
    <span class="token comment">// 读取计数器中的值</span>
    <span class="token class-name">uint32_t</span> second <span class="token operator">=</span> RTC<span class="token operator">-&gt;</span>CNTH <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> RTC<span class="token operator">-&gt;</span>CNTL<span class="token punctuation">;</span>

    <span class="token comment">// 解析时间戳</span>
    <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>time     <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>year   <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>month  <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>day    <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_mday<span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>hour   <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_hour<span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>minute <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_min<span class="token punctuation">;</span>
    calendarBuf<span class="token operator">-&gt;</span>second <span class="token operator">=</span> time<span class="token operator">-&gt;</span>tm_sec<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">RTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">BKP_EnableAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_ConfigLSE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 时钟配置 */</span>
    <span class="token comment">// 等待LSE就绪</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">&amp;</span> RCC_BDCR_LSERDY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使能RTC-APB1接口时钟</span>
    RCC<span class="token operator">-&gt;</span>BDCR <span class="token operator">|=</span> RCC_BDCR_RTCEN<span class="token punctuation">;</span>

    <span class="token comment">/* 参考手册RTC寄存器配置流程 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 进入RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> RTC_CRL_CNF<span class="token punctuation">;</span>

    <span class="token comment">// 配置RTC预分频装载值，例如32768(7FFF)，分频后得到TR_CLK=1Hz</span>
    RTC<span class="token operator">-&gt;</span>PRLH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    RTC<span class="token operator">-&gt;</span>PRLL <span class="token operator">=</span> <span class="token number">0x7FFF</span> <span class="token operator">&amp;</span> RTC_PRLL_PRL<span class="token punctuation">;</span>

    <span class="token comment">// 退出RTC配置模式</span>
    RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>RTC_CRL_CNF<span class="token punctuation">;</span>
    <span class="token comment">// 退出RTC配置模式后，写操作才会被执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RTC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;</span> RTC_CRL_RTOFF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTC_SetUnixSecond</span><span class="token punctuation">(</span><span class="token number">1734606383</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>

    CalendarTypeDef calendar<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">RTC_GetCalendar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%04d-%02d-%02d %02d:%02d:%02d"</span><span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>year<span class="token punctuation">,</span>
                  calendar<span class="token punctuation">.</span>month<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>day<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>hour<span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>minute<span class="token punctuation">,</span>
                  calendar<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="hal-ku-shi-xian">HAL库实现</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241219115411267.png" alt="image-20241219115411267"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241219120116173.png" alt="image-20241219120116173" style="zoom: 50%;">
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>RTC</tag>
        <tag>备份域</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32+W5500：解锁以太网开发的潜力</title>
    <url>/2024/12/14/25286.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
<li>数据手册：<a href="https://docs.wiznet.io/img/products/w5500/W5500_ds_v110e.pdf">W5500 Datasheet v1.1.0 - English</a></li>
<li>官方驱动：<a href="https://github.com/Wiznet/ioLibrary_Driver">https://github.com/Wiznet/ioLibrary_Driver</a></li>
</ul>
<h1 id="shi-yan-ping">实验-Ping</h1>
<h2 id="ying-jian-dian-lu">硬件电路</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214160129237.png" alt="image-20241214160129237"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214160135462.png" alt="image-20241214160135462"></p>
<p>（1）W5500-RST：重置硬件，重置（Reset）低电平有效；该引脚需要保持低电平至少 500 us，才能重置 W5500；（正常使用应该高电平，需要重置芯片的时候置为低电平不少500us）。连接的是PG7。</p>
<p>（2）W5500-INT：中断输出（Interrupt output）低电平有效；低电平：W5500的中断生效。高电平：无中断；连接的是PG6。</p>
<p>（3）W5500-CS片选引脚。连接的是PD3</p>
<p>（4）连接的是STM32的SPI2外设。</p>
<h2 id="w-5500-guan-fang-qu-dong-yi-zhi">W5500官方驱动移植</h2>
<p><a href="https://github.com/Wiznet/ioLibrary_Driver">https://github.com/Wiznet/ioLibrary_Driver</a></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214160231952.png" alt="image-20241214160231952" style="zoom:50%;">
<h3 id="yi-zhi-wo-men-xu-yao-de">移植我们需要的</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214160305162.png" alt="image-20241214160305162"></p>
<h3 id="xiu-gai-hong-ding-yi">修改宏定义</h3>
<p>修改<code>wizchip_conf.h</code></p>
<p>找到宏定义<code>_WIZCHIP_</code>，如果不是W5500，就改成W5500。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_WIZCHIP_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_WIZCHIP_</span> <span class="token expression">W5500 </span><span class="token comment">// W5100, W5100S, W5200, W5300, W5500</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>修改工作模式为可变数据长度模式（大致在155行，<code>_WIZCHIP_IO_MODE_SPI_FDM_</code>）</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>_WIZCHIP_ <span class="token operator">==</span> W5500<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_WIZCHIP_ID_</span> <span class="token string">"W5500\0"</span></span>

<span class="token comment">/**
 * @brief Define interface mode. \n
 * @todo Should select interface mode as chip.
 *        - @ref \_WIZCHIP_IO_MODE_SPI_ \n
 *          -@ref \_WIZCHIP_IO_MODE_SPI_VDM_ : Valid only in @ref \_WIZCHIP_ == W5500 \n
 *          -@ref \_WIZCHIP_IO_MODE_SPI_FDM_ : Valid only in @ref \_WIZCHIP_ == W5500 \n
 *        - @ref \_WIZCHIP_IO_MODE_BUS_ \n
 *          - @ref \_WIZCHIP_IO_MODE_BUS_DIR_ \n
 *          - @ref \_WIZCHIP_IO_MODE_BUS_INDIR_ \n
 *        - Others will be defined in future. \n\n
 *        ex&gt; &lt;code&gt; #define \_WIZCHIP_IO_MODE_ \_WIZCHIP_IO_MODE_SPI_VDM_ &lt;/code&gt;
 *
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_WIZCHIP_IO_MODE_</span></span>
<span class="token comment">// #define _WIZCHIP_IO_MODE_           _WIZCHIP_IO_MODE_SPI_FDM_</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_WIZCHIP_IO_MODE_</span> <span class="token expression">_WIZCHIP_IO_MODE_SPI_VDM_</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="gou-zi-han-shu-amp-zhu-ce">钩子函数 &amp; 注册</h3>
<p><code>wizchip_conf.c</code>文件中，官方提供了一些接口，待用户补充。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span>    <span class="token function">wizchip_cris_enter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 进入临界区(没有上系统,默认即可)</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_cris_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 退出临界区(没有上系统,默认即可)</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_cs_select</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 片选使能</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_cs_deselect</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 片选失能</span>
<span class="token class-name">iodata_t</span> <span class="token function">wizchip_bus_readdata</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> AddrSel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">iodata_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ptrdiff_t</span><span class="token punctuation">)</span> AddrSel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 总线读函数</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_bus_writedata</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> AddrSel<span class="token punctuation">,</span> <span class="token class-name">iodata_t</span> wb<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">iodata_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ptrdiff_t</span><span class="token punctuation">)</span>AddrSel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> wb<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 总线写函数</span>
<span class="token class-name">uint8_t</span> <span class="token function">wizchip_spi_readbyte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 读一个字节</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_spi_writebyte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> wb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 写一个字节</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_spi_readburst</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//按长度读</span>
<span class="token keyword">void</span>    <span class="token function">wizchip_spi_writeburst</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 按长度写</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实现上述函数后需要通过如下函数进行注册</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//注册进入/退出临界区函数</span>
<span class="token keyword">void</span> <span class="token function">reg_wizchip_cris_cbfunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>cris_en<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>cris_ex<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//注册SPI片选(CS)使能/失能函数</span>
<span class="token keyword">void</span> <span class="token function">reg_wizchip_cs_cbfunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>cs_sel<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>cs_desel<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//注册总线 读/写 函数</span>
<span class="token keyword">void</span> <span class="token function">reg_wizchip_bus_cbfunc</span><span class="token punctuation">(</span><span class="token class-name">iodata_t</span><span class="token punctuation">(</span><span class="token operator">*</span>bus_rb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>bus_wb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">iodata_t</span> wb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//注册 SPI 按字节 读/写 函数</span>
<span class="token keyword">void</span> <span class="token function">reg_wizchip_spi_cbfunc</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>spi_rb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>spi_wb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> wb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//注册 SPI 按长度 读/写函数</span>
<span class="token keyword">void</span> <span class="token function">reg_wizchip_spiburst_cbfunc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>spi_rb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>spi_wb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="dui-jie-spi">对接SPI</h3>
<h4 id="spi-h">spi.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SPI_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SPI_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token comment">// CS</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOD<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR3<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOD<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR3<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SPI_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="wizchip-conf-c">wizchip_conf.c</h4>
<p>实现钩子函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> 	<span class="token function">wizchip_cs_select</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>
    CS_LOW<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> 	<span class="token function">wizchip_cs_deselect</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>
    CS_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">wizchip_spi_readbyte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> 	<span class="token function">wizchip_spi_writebyte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> wb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增注册接口</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">wizchip_register_callbacks</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reg_wizchip_cris_cbfunc</span><span class="token punctuation">(</span>wizchip_cris_enter<span class="token punctuation">,</span> wizchip_cris_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reg_wizchip_cs_cbfunc</span><span class="token punctuation">(</span>wizchip_cs_select<span class="token punctuation">,</span> wizchip_cs_deselect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reg_wizchip_spi_cbfunc</span><span class="token punctuation">(</span>wizchip_spi_readbyte<span class="token punctuation">,</span> wizchip_spi_writebyte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="spi-stm-32-f-103-wai-she-spi-2">SPI（STM32F103外设SPI2）</h2>
<h3 id="spi-h-1">spi.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SPI_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SPI_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token comment">// CS</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOD<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR3<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOD<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR3<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SPI_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="spi-c">spi.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_SPI2EN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPDEN<span class="token punctuation">;</span>

    <span class="token comment">// CS-PD3 通用推挽 MODE=11 CNF=00</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE3<span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF3<span class="token punctuation">;</span>

    <span class="token comment">// SCK-PB13，MOSI-PB15 复用推挽 MODE=11 CNF=10</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE13<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF13_1<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF13_0<span class="token punctuation">;</span>

    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE15<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF15_1<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF15_0<span class="token punctuation">;</span>

    <span class="token comment">// MISO-PB14 浮空输入 MODE=00, CNF=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE14<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF14_0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF14_1<span class="token punctuation">;</span>

    <span class="token comment">// 波特率配置为PCLK/4 即 72M/4=18M =&gt; 001</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_BR<span class="token punctuation">;</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_BR_0<span class="token punctuation">;</span>
    <span class="token comment">// SPI模式0（时钟极性=0，相位=0）</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_CPOL<span class="token punctuation">;</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_CPHA<span class="token punctuation">;</span>
    <span class="token comment">// 数据帧格式 8bit</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_DFF<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_LSBFIRST<span class="token punctuation">;</span>
    <span class="token comment">// NSS为当前MCU作为从设备时的片选信号输入，主模式下，要么硬件上将该引脚拉高，要么通过SSM和SSI将其强制置1</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_SSM<span class="token punctuation">;</span> <span class="token comment">// 将NSS输入配置为软件控制</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_SSI<span class="token punctuation">;</span> <span class="token comment">// 通过SSI=1将NSS强制拉高</span>
    <span class="token comment">// 设置主模式</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_MSTR<span class="token punctuation">;</span>
    <span class="token comment">// 使能SPI外设</span>
    SPI2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_SPE<span class="token punctuation">;</span>

    <span class="token comment">// SPI模式0（极性=0，相位=0） 空闲状态 CS拉高（低电平使能），SCK拉低</span>
    CS_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> CS_LOW<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> CS_HIGH<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待发送缓冲区为空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SPI2<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> SPI_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 发送数据</span>
    SPI2<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> dataByte<span class="token punctuation">;</span>
    <span class="token comment">// 等待接收缓冲区非空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SPI2<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> SPI_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接收数据</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>SPI2<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="yi-tai-qu-dong-feng-zhuang">以太驱动封装</h2>
<h3 id="logger-h">logger.h</h3>
<blockquote>
<p>[!NOTE]</p>
<p>增加打印IP信息的工具接口 <code>LOG_ARR</code></p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LOGGER_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOGGER_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USE_LOG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_LOG</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USE_DUMP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_DUMP</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USE_BLOCK</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_BLOCK</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ONLY_FILENAME</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">strrchr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> </span><span class="token char">'\\'</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> </span><span class="token char">'\\'</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> x<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">log_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_BLOCK <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCK</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                                                          </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n[BLOCK %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">",按任意键继续"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                               </span><span class="token punctuation">\</span>
        <span class="token expression">block_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                        </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">while</span> <span class="token punctuation">(</span>block_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                                                </span><span class="token punctuation">\</span>
            <span class="token expression"><span class="token punctuation">;</span>                                                                  </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCK</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_LOG <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ARR</span><span class="token expression"><span class="token punctuation">(</span>info<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                                          </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[1;36m\r\n[DEBUG %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        </span><span class="token punctuation">\</span>
               <span class="token expression"><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                                           </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">" =&gt; "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">log_arr</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[1;36m\r\n[DEBUG %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        </span><span class="token punctuation">\</span>
               <span class="token expression"><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_INFO</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                                                       </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[0;32m\r\n[INFO] "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[0;31m\r\n[ERROR %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        </span><span class="token punctuation">\</span>
               <span class="token expression"><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ASSERT</span><span class="token expression"><span class="token punctuation">(</span>cond<span class="token punctuation">)</span>                                                       </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                         </span><span class="token punctuation">\</span>
            <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n[ASSERT] File=[%s],Line=[%ld] Failed to vertify thc "</span>  <span class="token punctuation">\</span>
                   <span class="token string">"condition [\"%s\"]\r\n"</span><span class="token expression"><span class="token punctuation">,</span>                                   </span><span class="token punctuation">\</span>
                   <span class="token expression"><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> #cond<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                      </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_INFO</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR3</span><span class="token expression"><span class="token punctuation">(</span>cond<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR4</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ASSERT</span><span class="token expression"><span class="token punctuation">(</span>cond<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_DUMP <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DUMP</span><span class="token expression"><span class="token punctuation">(</span>info<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                                         </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[1;36m\r\n[DUMP] "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                                           </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">log_dump</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                   </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

<span class="token keyword">void</span> <span class="token function">log_dump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DUMP</span><span class="token expression"><span class="token punctuation">(</span>info<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* LOGGER_H */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="logger-c">logger.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">log_dump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> ch<span class="token punctuation">,</span> cl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
        cl <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> ch <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            ch <span class="token operator">+=</span> <span class="token char">'A'</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> cl <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            cl <span class="token operator">+=</span> <span class="token char">'A'</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">log_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ethernet-h">ethernet.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ETHERNET_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__ETHERNET_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RST_HIGH</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR7</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RST_LOW</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR7</span></span>

<span class="token keyword">void</span> <span class="token function">Ethernet_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_SetMac</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_SetIP</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __ETHERNET_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ethernet-c">ethernet.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ethernet.h"</span></span>

<span class="token class-name">uint8_t</span> mac<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> ip<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>         <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> gateway<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> subnetMask<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Ethernet_GPIOConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
    <span class="token comment">// RST-PG7 推挽输出 MODE=11 CNF=00</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE7<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF7<span class="token punctuation">;</span>
    <span class="token comment">// INT-PG6 上拉输入 MODE=00 CNF=10 ODR=1</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_MODE6<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF6_1<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF6_0<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR6<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">RST_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RST_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wizchip_register_callbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">Ethernet_GPIOConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Ethernet_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Ethernet_SetMac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Ethernet_SetIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> macBuf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">getSHAR</span><span class="token punctuation">(</span>macBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"mac"</span><span class="token punctuation">,</span> macBuf<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> ipBuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> gatewayBuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> subBuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">getSHAR</span><span class="token punctuation">(</span>macBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getSIPR</span><span class="token punctuation">(</span>ipBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getGAR</span><span class="token punctuation">(</span>gatewayBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getSUBR</span><span class="token punctuation">(</span>subBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> ipBuf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"gateway"</span><span class="token punctuation">,</span> gatewayBuf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">,</span> subBuf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> mr <span class="token operator">=</span> <span class="token function">getMR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"mr"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_SetMac</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">setSHAR</span><span class="token punctuation">(</span>mac<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Ethernet_SetIP</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setSIPR</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setGAR</span><span class="token punctuation">(</span>gateway<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setSUBR</span><span class="token punctuation">(</span>subnetMask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ip-pei-zhi-zhu-yi-shi-xiang">IP配置注意事项</h3>
<blockquote>
<p>[!IMPORTANT]</p>
<ul>
<li>要和电脑在同一局域网下，STM32可以通过水晶头网线接入交换机</li>
<li>MAC地址要保持唯一性</li>
<li>静态IP地址：网段、网关要和电脑保持一一致，同时确保IP地址没有被占用（可以换一些IP多试下）</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214162538777.png" alt="image-20241214162538777"></p>
<h2 id="ce-shi-ping-gong-neng">测试Ping功能</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ethernet.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Ethernet_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214205658007.png" alt="image-20241214205658007"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214162450520.png" alt="image-20241214162450520"></p>
<h2 id="shi-xu-zhu-yi-shi-xiang">时序——注意事项</h2>
<blockquote>
<p>[!IMPORTANT]</p>
<ul>
<li>复位低电平至少保持500us</li>
<li>复位拉高后，W5500需要最多1ms来稳定自身内部的PLL时钟，因此我们需要在复位拉高后至少1ms之后才开始与其通信</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214162046415.png" alt="image-20241214162046415"></p>
<h1 id="spi-w-5500-luo-ji-fen-xi-cha-jian">SPI-W5500逻辑分析插件</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214164451376.png" alt="image-20241214164451376"></p>
<h1 id="shi-yan-tcp-jian-li-lian-jie">实验-TCP建立连接</h1>
<h2 id="shi-li-dai-ma">示例代码</h2>
<h3 id="w-5500-tcpserver-h">w5500_tcpserver.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__W5500_TCPSERVER_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__W5500_TCPSERVER_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"socket.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W5500_TCPServer_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __W5500_TCPSERVER_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="w-5500-tcpserver-c">w5500_tcpserver.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_tcpserver.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_SN</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TCP_PORT</span> <span class="token expression"><span class="token number">8080</span></span></span>

<span class="token keyword">void</span> <span class="token function">W5500_TCPServer_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> sockStatus <span class="token operator">=</span> <span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> result     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> clientIP<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> clientPort <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sockStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SOCK_CLOSED<span class="token operator">:</span>
            <span class="token comment">/*
            1. 要打开的socket序列号sn
            2. socket协议模式：TCP
            3. TCP Nagle算法配置：不延迟ack的发送
            */</span>
            result <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_MR_TCP<span class="token punctuation">,</span> TCP_PORT<span class="token punctuation">,</span> SF_TCP_NODELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_SN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket open failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket open success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_INIT<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket listen failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket listen success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_ESTABLISHED<span class="token operator">:</span>
            <span class="token function">getSn_DIPR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clientIP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            clientPort <span class="token operator">=</span> <span class="token function">getSn_DPORT</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"client port = %d, ip"</span><span class="token punctuation">,</span> clientIP<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> clientPort<span class="token punctuation">)</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// handle client socket</span>
            <span class="token punctuation">}</span>
            
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ethernet.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_tcpserver.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"usart test"</span><span class="token punctuation">)</span>
    <span class="token function">Ethernet_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">W5500_TCPServer_Handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi">测试</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214205734147.png" alt="image-20241214205734147" style="zoom:33%;">
<h3 id="ke-hu-duan-qing-qiu-lian-jie">客户端请求连接</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214214202495.png" alt="image-20241214214202495"></p>
<h3 id="fu-wu-duan-socket-lian-jie-jian-li">服务端socket连接建立</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214205922046.png" alt="image-20241214205922046"></p>
<h1 id="shi-yan-tcp-server-shou-fa">实验-TCPServer收发</h1>
<h2 id="qu-dong-yi-lai">驱动依赖</h2>
<ul>
<li><code>socket.h</code></li>
</ul>
<h2 id="shi-li-dai-ma-1">示例代码</h2>
<h3 id="w-5500-tcpserver-c-1">w5500_tcpserver.c</h3>
<blockquote>
<p>[!NOTE]</p>
<p><code>socket</code>的入参 <code>flag</code>可以配置 <code>socket</code>为非阻塞模式</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_tcpserver.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_SN</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TCP_PORT</span> <span class="token expression"><span class="token number">8080</span></span></span>
<span class="token comment">// W5500每个socket有2kb的接收缓冲区、2kb的发送缓冲区</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_RX_BUFFER_MAX_SIZE</span> <span class="token expression"><span class="token number">2048</span></span></span>

<span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span>SOCK_RX_BUFFER_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W5500_TCPServer_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> sockStatus    <span class="token operator">=</span> <span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> result         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> clientIP<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> clientPort   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> receivedSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sockStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SOCK_CLOSED<span class="token operator">:</span>
            <span class="token comment">/*
            1. 要打开的socket序列号sn
            2. socket协议模式：TCP
            3. socket参数配置：不延迟ack的发送
            */</span>
            result <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_MR_TCP<span class="token punctuation">,</span> TCP_PORT<span class="token punctuation">,</span> SF_TCP_NODELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_SN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket open failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket open success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_INIT<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket listen failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket listen success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_ESTABLISHED<span class="token operator">:</span>
            <span class="token function">getSn_DIPR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> clientIP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            clientPort <span class="token operator">=</span> <span class="token function">getSn_DPORT</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"client port = %d, ip"</span><span class="token punctuation">,</span> clientIP<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> clientPort<span class="token punctuation">)</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 轮询方式处理接收事件中断标志位，当有数据可读时进行处理</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getSn_IR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Sn_IR_RECV<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 轮询过程中，如果客户端断开连接，则关闭socket，走重新监听的流程</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span> <span class="token operator">!=</span> SOCK_ESTABLISHED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket state changed, close socket."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">close</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 轮询结束，清除中断标志</span>
                <span class="token function">setSn_IR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_IR_RECV<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取socket接收缓冲区中的数据大小</span>
                receivedSize <span class="token operator">=</span> <span class="token function">getSn_RX_RSR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// received size</span>
                <span class="token function">recv</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> receivedSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"received msg = %.*s, port = %d, ip"</span><span class="token punctuation">,</span> clientIP<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
                        receivedSize<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> clientPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回送消息</span>
                <span class="token function">send</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> receivedSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-1">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214214514823.png" alt="image-20241214214514823"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214214755653.png" alt="image-20241214214755653"></p>
<h1 id="shi-yan-tcp-client-shou-fa">实验-TCPClient收发</h1>
<h2 id="qu-dong-yi-lai-1">驱动依赖</h2>
<ul>
<li><code>socket.h</code></li>
</ul>
<h2 id="shi-li-dai-ma-2">示例代码</h2>
<h3 id="w-5500-tcpclient-h">w5500_tcpclient.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__W5500_TCPCLIENT_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__W5500_TCPCLIENT_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"socket.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W5500_TCPClient_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __W5500_TCPCLIENT_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="w-5500-tcpclient-c">w5500_tcpclient.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_tcpclient.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_SN</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TCP_PORT</span> <span class="token expression"><span class="token number">8080</span></span></span>
<span class="token comment">// W5500每个socket有2kb的接收缓冲区、2kb的发送缓冲区</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_RX_BUFFER_MAX_SIZE</span> <span class="token expression"><span class="token number">2048</span></span></span>

<span class="token class-name">uint8_t</span> serverIP<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint16_t</span> serverPort <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span>SOCK_RX_BUFFER_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W5500_TCPClient_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> sockStatus    <span class="token operator">=</span> <span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> result         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> receivedSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sockStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SOCK_CLOSED<span class="token operator">:</span>
            <span class="token comment">/*
            1. 要打开的socket序列号sn
            2. socket协议模式：TCP
            3. socket参数配置：不延迟ack的发送
            */</span>
            result <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_MR_TCP<span class="token punctuation">,</span> TCP_PORT<span class="token punctuation">,</span> SF_TCP_NODELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_SN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket open failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket open success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_INIT<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> serverIP<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket connect failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
                <span class="token function">close</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket connect success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_ESTABLISHED<span class="token operator">:</span>
            <span class="token comment">// 发送数据</span>
            <span class="token function">send</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> <span class="token string">"hello server"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 轮询接收数据</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 轮询方式处理接收事件中断标志位，当有数据可读时进行处理</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getSn_IR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Sn_IR_RECV<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 轮询过程中，如果socket状态变化，则关闭socket，走重新连接的流程</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span> <span class="token operator">!=</span> SOCK_ESTABLISHED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket state changed, close socket."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">close</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 轮询结束，清除中断标志</span>
                <span class="token function">setSn_IR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_IR_RECV<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取socket接收缓冲区中的数据大小</span>
                receivedSize <span class="token operator">=</span> <span class="token function">getSn_RX_RSR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// received size</span>
                <span class="token function">recv</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> receivedSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"received msg = %.*s, port = %d, ip"</span><span class="token punctuation">,</span> serverIP<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
                        receivedSize<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回送消息</span>
                <span class="token function">send</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> receivedSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"unexpected socket status = %d"</span><span class="token punctuation">,</span> sockStatus<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-2">测试</h2>
<h3 id="chuan-kou-zhu-shou-tcp-server-mo-shi">串口助手TCPServer模式</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215092719982.png" alt="image-20241215092719982"></p>
<h3 id="mcu-ri-zhi">MCU日志</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215092801097.png" alt="image-20241215092801097"></p>
<h1 id="shi-yan-udp-shou-fa">实验-UDP收发</h1>
<h2 id="shi-li-dai-ma-3">示例代码</h2>
<h3 id="w-5500-udp-h">w5500_udp.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__W5500_UDP_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__W5500_UDP_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"socket.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W5500_UDP_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __W5500_UDP_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="w-5500-udp-c">w5500_udp.c</h3>
<blockquote>
<p>[!NOTE]</p>
<p>通过<code>recvfrom</code>获取报文及其来源IP端口</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_udp.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_SN</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UDP_PORT</span> <span class="token expression"><span class="token number">8080</span></span></span>
<span class="token comment">// W5500每个socket有2kb的接收缓冲区、2kb的发送缓冲区</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCK_RX_BUFFER_MAX_SIZE</span> <span class="token expression"><span class="token number">2048</span></span></span>

<span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span>SOCK_RX_BUFFER_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W5500_UDP_Handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> sockStatus    <span class="token operator">=</span> <span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> result         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> receivedSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> sourceIP<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> sourcePort   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sockStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SOCK_CLOSED<span class="token operator">:</span>
            <span class="token comment">/*
            1. 要打开的socket序列号sn
            2. socket协议模式：UDP
            3. socket参数配置：不配置任何参数
            */</span>
            result <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_MR_UDP<span class="token punctuation">,</span> UDP_PORT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SOCK_SN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"socket open failed, result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket open success"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> SOCK_UDP<span class="token operator">:</span>
            <span class="token comment">// 轮询接收数据</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 轮询方式处理接收事件中断标志位，当有数据可读时进行处理</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getSn_IR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Sn_IR_RECV<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 轮询过程中，如果socket状态变化，则关闭socket</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSn_SR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span> <span class="token operator">!=</span> SOCK_UDP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"socket state changed, close socket."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">close</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 轮询结束，清除中断标志</span>
                <span class="token function">setSn_IR</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> Sn_IR_RECV<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取报文以及来源IP端口</span>
                receivedSize <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> SOCK_RX_BUFFER_MAX_SIZE<span class="token punctuation">,</span>
                                        sourceIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sourcePort<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">LOG_ARR</span><span class="token punctuation">(</span><span class="token string">"received msg = %.*s, size = %d, port = %d, ip"</span><span class="token punctuation">,</span>
                        sourceIP<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> receivedSize<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> receivedSize<span class="token punctuation">,</span>
                        sourcePort<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 回送消息</span>
                <span class="token function">sendto</span><span class="token punctuation">(</span>SOCK_SN<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> receivedSize<span class="token punctuation">,</span> sourceIP<span class="token punctuation">,</span> sourcePort<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"unexpected socket status = %d"</span><span class="token punctuation">,</span> sockStatus<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-3">测试</h2>
<h3 id="chuan-kou-zhu-shou-mo-ni-fa-song-fang">串口助手模拟发送方</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215101226563.png" alt="image-20241215101226563"></p>
<h3 id="mcu-ri-zhi-1">MCU日志</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215101414638.png" alt="image-20241215101414638"></p>
<h1 id="shi-yan-da-jian-http-server-amp-web-kong-zhi-led">实验-搭建HTTPServer &amp; WEB控制LED</h1>
<h2 id="bu-shu-web-zi-yuan">部署WEB资源</h2>
<h3 id="w-5500-httpserver-h">w5500_httpserver.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__W5500_HTTPSERVER_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__W5500_HTTPSERVER_H__</span></span>

<span class="token keyword">void</span> <span class="token function">W5500_HTTPServer_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W5500_HTTPServer_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __W5500_HTTPSERVER_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="w-5500-httpserver-c">w5500_httpserver.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_httpserver.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"httpServer.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"socket.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCKET_MAX_BUFFER_SIZE_TX</span> <span class="token expression"><span class="token number">2048</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCKET_MAX_BUFFER_SIZE_RX</span> <span class="token expression"><span class="token number">2048</span></span></span>

<span class="token class-name">uint8_t</span> txbuf<span class="token punctuation">[</span>SOCKET_MAX_BUFFER_SIZE_TX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span>SOCKET_MAX_BUFFER_SIZE_RX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// socket序号列表</span>
<span class="token class-name">uint8_t</span> socketList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> socketSize   <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>socketList<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>socketList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>contentName <span class="token operator">=</span> <span class="token string">"index.html"</span><span class="token punctuation">;</span>

<span class="token comment">/* 响应的网页的内容 */</span>
<span class="token keyword">const</span> <span class="token class-name">uint8_t</span> content<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"&lt;!doctype html&gt;\n"</span>
                        <span class="token string">"&lt;html lang=\"en\"&gt;\n"</span>
                        <span class="token string">"&lt;head&gt;\n"</span>
                        <span class="token string">"    &lt;meta charset=\"GBK\"&gt;\n"</span>
                        <span class="token string">"    &lt;meta name=\"viewport\"\n"</span>
                        <span class="token string">"          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;\n"</span>
                        <span class="token string">"    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n"</span>
                        <span class="token string">"    &lt;title&gt;尚硅谷嵌入式课程&lt;/title&gt;\n"</span>
                        <span class="token string">"\n"</span>
                        <span class="token string">"    &lt;style type=\"text/css\"&gt;\n"</span>
                        <span class="token string">"        #open_red{\n"</span>
                        <span class="token string">"            color: red;\n"</span>
                        <span class="token string">"            width: 100px;\n"</span>
                        <span class="token string">"            height: 40px;\n"</span>
                        <span class="token string">"\n"</span>
                        <span class="token string">"\n"</span>
                        <span class="token string">"        }\n"</span>
                        <span class="token string">"        #close_red{\n"</span>
                        <span class="token string">"            color: black;\n"</span>
                        <span class="token string">"            width: 100px;\n"</span>
                        <span class="token string">"            height: 40px;\n"</span>
                        <span class="token string">"        }\n"</span>
                        <span class="token string">"    &lt;/style&gt;\n"</span>
                        <span class="token string">"&lt;/head&gt;\n"</span>
                        <span class="token string">"&lt;body&gt;\n"</span>
                        <span class="token string">"&lt;a href=\"/index.html?action=0\"&gt;&lt;button id=\"open_red\" &gt;开灯&lt;/button&gt;&lt;/a&gt;\n"</span>
                        <span class="token string">"&lt;a href=\"/index.html?action=1\"&gt;&lt;button id=\"close_red\" &gt;关灯&lt;/button&gt;&lt;/a&gt;\n"</span>
                        <span class="token string">"&lt;a href=\"/index.html?action=2\"&gt;&lt;button id=\"close_red\" &gt;翻转&lt;/button&gt;&lt;/a&gt;\n"</span>
                        <span class="token string">"&lt;/body&gt;\n"</span>
                        <span class="token string">"&lt;/html&gt;"</span><span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">W5500_HTTPServer_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化httpserver, 使用多少个socket来支撑http服务</span>
    <span class="token function">httpServer_init</span><span class="token punctuation">(</span>txbuf<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> socketSize<span class="token punctuation">,</span> socketList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注册web资源</span>
    <span class="token function">reg_httpServer_webContent</span><span class="token punctuation">(</span>contentName<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W5500_HTTPServer_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 启动http，监听并处理一次http请求</span>
        <span class="token function">httpServer_run</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ethernet.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w5500_httpserver.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"usart test"</span><span class="token punctuation">)</span>
    <span class="token function">Ethernet_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token function">W5500_HTTPServer_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W5500_HTTPServer_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="liu-lan-qi-fang-wen-web">浏览器访问WEB</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215120557766.png" alt="image-20241215120557766"></p>
<h3 id="an-niu-fa-chu-http-qing-qiu">按钮发出HTTP请求</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215120646017.png" alt="image-20241215120646017"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215120708524.png" alt="image-20241215120708524"></p>
<h2 id="http-qing-qiu-can-shu-jie-xi">HTTP请求参数解析</h2>
<h3 id="guan-fang-qu-dong-http-server-c">官方驱动httpServer.c</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215120814482.png" alt="image-20241215120814482"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">parse_http_request</span><span class="token punctuation">(</span>parsed_http_request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>http_request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//LOG_DEBUG("request uri = %s", parsed_http_request-&gt;URI)</span>
<span class="token function">parse_http_request_post_process</span><span class="token punctuation">(</span>parsed_http_request<span class="token operator">-&gt;</span>URI<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__weak <span class="token keyword">void</span> <span class="token function">parse_http_request_post_process</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="http-server-h">httpServer.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">parse_http_request_post_process</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="zi-ding-yi-uri-chu-li-luo-ji">自定义uri处理逻辑</h3>
<p><code>w5500_httpserver.h</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">int8_t</span> <span class="token function">parse_uri</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>token <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">"action="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>token <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">parse_http_request_post_process</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"uri = %s"</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> actionType <span class="token operator">=</span> <span class="token function">parse_uri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"actionType = %d"</span><span class="token punctuation">,</span> actionType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>actionType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token function">LED_On</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token function">LED_Off</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token function">LED_Toggle</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-4">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215121112679.png" alt="image-20241215121112679"></p>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
        <category>协议</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>W5500</tag>
        <tag>以太网</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32存储器和寄存器分析</title>
    <url>/2024/12/08/34188.html</url>
    <content><![CDATA[<h1 id="chang-jian-cun-chu-qi-jie-shao">常见存储器介绍</h1>
<p>存储器是计算机结构的重要组成部分。存储器是用来存储程序代码和数据的部件，有了存储器计算机才具有记忆功能。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208202713661.png" alt="image-20241208202713661"></p>
<h2 id="ram">RAM</h2>
<h3 id="sram">SRAM</h3>
<p>Static Random-Access Memory，静态随机存取存储器。是RAM的一种，所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。</p>
<p>是用电路存储数据，基本结构就是前面大家学习过的那种<mark>触发器</mark>结构（比如D触发器）。容量一般较低，用于<mark>高速缓存</mark>。比如芯片内部的寄存器就可以看成一种SRAM。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208204117868.png" alt="image-20241208204117868"></p>
<h3 id="dram">DRAM</h3>
<p>动态随机存储器DRAM的存储单元以<strong>电容的电荷</strong>来表示数据，有电荷代表1，无电荷代表0。</p>
<p>但时间一长，<mark>代表1的电容会放电，代表0的电容会吸收电荷，因此它需要定期刷新操作</mark>，这就是“动态（Dynamic）”一词所形容的特性。</p>
<p>刷新操作会对电容进行检查，若电量大于满电量的1 / 2，则认为其代表1，并把电容充满电；若电量小于1 / 2，则认为其代表 0，并把电容放电，藉此来保证数据的正确性。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208204137999.png" alt="image-20241208204137999"></p>
<h2 id="rom">ROM</h2>
<p>ROM 是“Read Only Memory”的缩写，意为只能读的存储器。由于技术的发展，后来设计出了可以方便写入数据的ROM，而这个“Read Only Memory”的名称被沿用下来了，现在一般用于指代非易失性半导体存储器，包括后面介绍的 FLASH 存储器，有些人也把它归到 ROM 类里边。</p>
<h3 id="mask-rom">MASK ROM</h3>
<p>MASK（掩膜）ROM 就是正宗的“<mark>Read Only Memory</mark>”，存储在它内部的数据是在出厂时使用特殊工艺固化的，生产后就不可修改，其主要优势是大批量生产时成本低。当前在生产量大，数据不需要修改的场合，还有应用。</p>
<h3 id="prom">PROM</h3>
<p>PROM（<strong>Programable</strong> ROM）为<mark>可编程</mark>ROM。但是只供用户写入一次。</p>
<h3 id="eprom">EPROM</h3>
<p>EPROM（<mark>Erasable Programmable</mark> ROM）是<mark>可重复擦写</mark>的存储器，它解决了PROM芯片只能写入一次的问题。这种存储器使用紫外线照射（30分钟）芯片内部擦除数据，擦除和写入都要专用的设备。现在这种存储器基本淘汰，被EEPROM取代。</p>
<h3 id="e-2-prom">E²PROM</h3>
<p>E²PROM（Electrically Erasable Programmable ROM）是<mark>电可擦除</mark>存储器。EEPROM可以重复擦写，它的<mark>擦除和写入都是直接使用电路控制</mark>，不需要再使用外部设备来擦写。而且可以按字节为单位修改数据，无需整个芯片擦除。现在主要使用的ROM芯片都是EEPROM。</p>
<h3 id="flash">Flash</h3>
<p>FLASH存储器又称为<mark>闪存</mark>，它也是可重复擦写的存储器，部分书籍会把FLASH存储器称为 FLASH ROM，但它的<mark>容量一般比EEPROM大得多</mark>，且在擦除时，一般以多个字节为单位。</p>
<h3 id="ying-pan-ci-pan">硬盘（磁盘）</h3>
<p>又称磁盘，是靠磁性来存储数据的。</p>
<h1 id="stm-32-f-103-de-cun-chu-qi">STM32F103的存储器</h1>
<p>STM32包含：</p>
<ul>
<li>
<p>片内SRAM（64K）：它可以以字节、半字（16位）或全字（32位）访问。SRAM的起始地址是0x2000 0000。</p>
</li>
<li>
<p>片内Flash（最大可达2M）。</p>
</li>
</ul>
<h2 id="cun-chu-qi-ying-she">存储器映射</h2>
<p>什么叫存储器映射呢？<mark>存储器本身并不具备地址信息</mark>，那么CPU要准确找到存储某个信息的存储单元，就必须为这些单元分配一个相互可区分的标识，这个标识就是常说的<mark>地址编码</mark>。</p>
<p>STM32中集成多种存储器（<mark>各种外设也需要分配地址</mark>），同一类型的存储器当作一组block，为每一个block分配一个数值连续，存储单元数相等，以16进制表示的自然数集合作为存储器Block的地址编码。这种自然数集合与存储器Block的对应关系就是存储器映射。</p>
<p>存储器映射其实就是将芯片理论上的地址（32位总线可寻址范围为4G个字节存储单元）分配给各个存储器。</p>
<p>需要注意的是：存储器映射并不是只针对SRAM和片内Flash做地址映射，其实所有的片内外设（比如IO口）都需要地址，也都需要做映射。</p>
<h2 id="cun-chu-qi-ying-she-tu">存储器映射图</h2>
<p>芯片能访问的存储空间有多大，是由谁定的？这个是由芯片的地址总线的数量决来定的，STM32芯片内部的地<mark>址总线为32根</mark>。所以STM32有4G的<mark>地址空间</mark>。（这个4GB的是STM32理论分配的地址空间。也就是说实际上并不是有这么大的存储单元，很多地址都是预留地址，空着还没用呢）。</p>
<p>程序存储器、数据存储器、寄存器和输入输出端口被组织在这个4GB的线性地址空间内。数据字节以<mark>小端格式</mark>（数据低位字节存放在低位地址）存放在存储器中。</p>
<blockquote>
<p>[!NOTE]</p>
<p>使用小端格式存储数据有个好处：当发生向下类型转换时，能够方便地从低位字节开始截断数据。</p>
</blockquote>
<p>ARM把可访问的存储器空间分成8个主要块，每个块为512MB。这个容量是非常大的，因此芯片厂商就在每块容量范围内设计各自特色的外设。但是每块区域容量占用越大，芯片成本就越高，所以说我们使用的 STM32 芯片都是只用了其中一部分。ARM 在对这 4GB 容量分块的时候是<mark>按照其功能划分</mark>，每块都有它特殊的用途。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208211220547.png" alt="image-20241208211220547"></p>
<p>在这8个Block里面，要特别注意Block0、Block1和Block2这3个块。因为其中包含了STM32芯片的内部 Flash、RAM和片上外设。下面还是根据存储器映射图内信息来简单的介绍下这3个Block里面的具体区域功能划分。</p>
<h3 id="block-0">Block0</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208211250072.png" alt="image-20241208211250072"></p>
<ul>
<li>
<p><code>0x0000 0000-0x0007 FFFF</code>：取决于<mark>BOOT引脚</mark>，可以是 Flash 的别名，也可以是系统存储器的别名。（512K）</p>
</li>
<li>
<p><code>0x0008 0000-0x07FF FFFF</code>：预留。（1M）</p>
</li>
<li>
<p><code>0x0800 0000-0x0807 FFFF</code>：片内 FLASH，我们编写的程序就放在这一区域（512K）</p>
</li>
<li>
<p><code>0x0808 0000-0x1FFF EFFF</code>：预留。（383M）</p>
</li>
<li>
<p><code>0x1FFF F000-0x1FFF F7FF</code>：系统存储器，里面存放的是 ST 出厂时烧写好的ISP自举程序，用户无法改动。使用串口下载的时候需要用到这部分程序。（2K）</p>
</li>
<li>
<p><code>0x1FFF F800-0x1FFF F80F</code>：可选字节，用于配置读写保护、BOR级别、软件/硬件看门狗以及器件处于待机或停止模式下的复位。当芯片不小心被锁住之后，我们可以从RAM里面启动来修改这部分相应的寄存器位。</p>
</li>
<li>
<p><code>0x1FFF F810-0x1FFF FFFF</code>：预留。</p>
</li>
</ul>
<h3 id="block-1">Block1</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208211508171.png" alt="image-20241208211508171"></p>
<p>Block1用于设计片内的SRAM，例如STM32F103ZET6的SRAM是64KB。从存储器映射图中可以看到Block1内部又划分了几个功能块，我们按地址从低到高顺序依次介绍。</p>
<ul>
<li>0x2000 0000-0x2000 FFFF：SRAM，容量为 64KB。</li>
<li>0x2001 0000-0x3FFF FFFF：预留。</li>
</ul>
<h3 id="block-2">Block2</h3>
<p>Block2用于设计片内外设，根据外设总线速度的不同，Block2被划分为AHB和APB 两部分，APB又被分成APB1和APB2。这些都可以在上面存储器映射图中可看到。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208211719069.png" alt="image-20241208211719069"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208211732607.png" alt="image-20241208211732607"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208211739568.png" alt="image-20241208211739568"></p>
<ul>
<li><code>0x4000 0000-0x4000 77FF</code>：APB1总线外设。</li>
<li><code>0x4001 0000-0x4001 57FF</code>：APB2总线外设。</li>
<li><code>0x4001 8000-0x4002 33FF</code>：AHB总线外设。</li>
</ul>
<h3 id="block-3-4-5">Block3,4,5</h3>
<p>在Block3、Block4、Block5中包含了FSMC扩展区域，可用于扩展如 SRAM，NORFLASH 和NANDFLASH等的外部存储器。</p>
<h1 id="ji-cun-qi">寄存器</h1>
<h2 id="shi-yao-shi-ji-cun-qi">什么是寄存器</h2>
<p>前面我们学习了存储器ROM和RAM，还包括我们所有的片上外设我们都可以称为存储器，STM32通过存储器映射，就可以找到这些存储器。</p>
<p>我们编程的时候用的最多的还是**寄存器，**那么什么叫寄存器呢？</p>
<p>在存储器 Block2 这块区域，设计的是<strong>片上外设</strong>，它们以4个字节为1个单元，共 32bit，每一个单元对应不同的功能，当我们控制这些单元时就可以驱动外设工作。我们可以找到每个单元的起始地址，然后通过 C 语言指针的操作方式来访问这些单元，如果每次都是通过这种地址的方式来访问，不仅不好记忆还容易出错，这时我们可以根据每个单元功能的不同，以功能为名给这个内存单元取一个别名。</p>
<p>这个<strong>别名</strong>就是我们经常说的<strong>寄存器。</strong></p>
<p>一句话总结：寄存器是单片机内部一种特殊的存储器，可以实现对单片机各个功能的控制。</p>
<h2 id="ji-cun-qi-ying-she">寄存器映射</h2>
<p>这个给已经分配好地址的有特定功能的存储器单元取别名的过程就叫寄存器映射。</p>
<p>寄存器映射在ST提供的头文件stm32f10x.h中已经通过预编译的形式完全映射好了，以后如果再操作某个特定外设的时候，就不用直接操作地址，直接操作对应的寄存器名就可以了。</p>
<p>比如PA这组IO端口的映射：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 外设基址</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PERIPH_BASE</span>           <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x40000000</span><span class="token punctuation">)</span> </span></span>
<span class="token comment">// APB2外设的基址 </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">APB2PERIPH_BASE</span>       <span class="token expression"><span class="token punctuation">(</span>PERIPH_BASE <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> </span></span>
<span class="token comment">// GPIOA 外设的基址</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIOA_BASE</span>            <span class="token expression"><span class="token punctuation">(</span>APB2PERIPH_BASE <span class="token operator">+</span> d<span class="token punctuation">)</span></span></span>
<span class="token comment">// 做了类型转换，地址仍然是GPIOA 外设的基址</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIOA</span>               <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>GPIO_TypeDef <span class="token operator">*</span><span class="token punctuation">)</span> GPIOA_BASE<span class="token punctuation">)</span></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>Memory</tag>
        <tag>存储器</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 与 ESP32-C3 的“无线配对”：WiFi 和蓝牙功能大揭秘</title>
    <url>/2024/12/15/32686.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
</ul>
<h2 id="esp-32-c-3">ESP32-C3</h2>
<ul>
<li><a href="https://www.espressif.com.cn/zh-hans/support/download/other-tools?keys=&amp;field_type_tid%5B%5D=785">Flash下载工具</a></li>
<li><a href="https://docs.espressif.com/projects/esp-at/zh_CN/latest/esp32c3/AT_Binary_Lists/esp_at_binaries.html">AT固件</a></li>
<li><a href="https://docs.espressif.com/projects/esp-at/zh_CN/latest/esp32c3/AT_Binary_Lists/esp_at_binaries.html">ESP32-C3数据手册</a></li>
<li><a href="https://docs.espressif.com/projects/esp-at/en/latest/esp32/Get_Started/index.html">ESP32-AT官方文档</a></li>
</ul>
<p>AT固件烧录成功后，重启，串口输出日志如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215211656572.png" alt="image-20241215211656572"></p>
<blockquote>
<p>这里要注意以下AT固件的串口波特率配置，稍后STM32和与之通信时，需要配置相同的波特率</p>
</blockquote>
<h1 id="ying-jian-lian-jie">硬件连接</h1>
<ul>
<li>STM32F103ZET6</li>
<li>ESP32-C3FN4</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215210956751.png" alt="image-20241215210956751"></p>
<h1 id="ce-shi-at-zhi-ling">测试AT指令</h1>
<h2 id="cube-pei-zhi">Cube配置</h2>
<h3 id="chuan-kou-1-yong-lai-da-yin-ri-zhi">串口1用来打印日志</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215211448149.png" alt="image-20241215211448149"></p>
<h3 id="chuan-kou-2-yong-lai-he-esp-32-tong-xin">串口2用来和ESP32通信</h3>
<blockquote>
<p>波特率需要和ESP32 AT固件的保持一致：115200</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215211520223.png" alt="image-20241215211520223"></p>
<h2 id="shi-li-dai-ma">示例代码</h2>
<h3 id="esp-32-h">esp32.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/12/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">INC_40_ESP32_HAL_ESP32_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INC_40_ESP32_HAL_ESP32_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f1xx.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>atCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//INC_40_ESP32_HAL_ESP32_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="esp-32-c">esp32.c</h3>
<blockquote>
<p>要特别注意复用缓冲区<code>responseBuf</code>时，如果上一次事务留存的数据影响下一次事务处理过程中的判断，需要在每次事务的开头将其清零。</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/12/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ESP32.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXBUF_MAX_SIZE</span> <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESPONSE_BUF_MAX_SIZE</span> <span class="token expression"><span class="token number">512</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_OK</span> <span class="token string">"OK"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_ERROR</span> <span class="token string">"ERROR"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_SUFFIX</span> <span class="token string">"\r\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_RST</span> <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+RST"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_TEST</span> <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_GMR</span> <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+GMR"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>

<span class="token class-name">uint8_t</span> rxBuf<span class="token punctuation">[</span>RXBUF_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
__IO <span class="token class-name">uint8_t</span> rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> responseBuf<span class="token punctuation">[</span>RESPONSE_BUF_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
__IO <span class="token class-name">uint8_t</span> responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 接收定长/空闲检测+中断 非阻塞接收数据到rxBuf中</span>
    <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> RXBUF_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送复位指令</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_RST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待芯片复位完成</span>

    <span class="token comment">// 测试AT指令</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_GMR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>atCmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录发送指令后，收到的响应字节数量</span>
    rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录接收中断时收到的字节数量</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须清零，避免残留数据影响对后续流程的判断</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> atCmd<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>atCmd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最多接收三次响应</span>
    <span class="token class-name">uint8_t</span> rxCount <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token comment">// 轮询等待AT响应</span>
        <span class="token class-name">uint32_t</span> timeout <span class="token operator">=</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>rxSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>
        <span class="token comment">// 收到一次响应，将接收缓冲区rxBuf收到的数据拷贝到响应结果中暂存</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>responseBuf <span class="token operator">+</span> responseSize<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> rxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        responseSize <span class="token operator">+=</span> rxSize<span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 继续接收响应</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_OK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
             <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_ERROR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> rxCount<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"rxCount = %d, responseSize = %d, responseBuf = %s"</span><span class="token punctuation">,</span> rxCount<span class="token punctuation">,</span> responseSize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>responseBuf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>huart <span class="token operator">==</span> <span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rxSize <span class="token operator">=</span> Size<span class="token punctuation">;</span>
        <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> RXBUF_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215212630869.png" alt="image-20241215212630869"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215212920978.png" alt="image-20241215212920978"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215212936964.png" alt="image-20241215212936964" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241215212950842.png" alt="image-20241215212950842"></p>
<h1 id="tong-guo-esp-lian-jie-re-dian">通过ESP连接热点</h1>
<h2 id="chuang-jian-re-dian">创建热点</h2>
<p>使用手机创建一个2.4G的热点，设置热点名称和密码，以备后续esp32来连接该热点</p>
<h2 id="shi-li-dai-ma-1">示例代码</h2>
<h3 id="esp-32-c-1">esp32.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWMODE_STATION</span>     <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWMODE=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWJAP</span>              <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWJAP=\""</span> <span class="token expression">WIFI_NAME </span><span class="token string">"\",\""</span> <span class="token expression">WIFI_PASSWORD </span><span class="token string">"\""</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWSTATE</span>            <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWSTATE?"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>

<span class="token comment">// 热点的名称和密码</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIFI_NAME</span>       <span class="token string">"HONOR 90"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIFI_PASSWORD</span>   <span class="token string">"Zawalliswell1998"</span></span>

<span class="token keyword">void</span> <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置WIFI工作模式：station（作为终端连接热点）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWMODE_STATION<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置热点的名称和密码</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWJAP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看WIFI状态（是否连接成功）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWSTATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="wan-zheng-dai-ma">完整代码</h3>
<h4 id="esp-32-h-1">esp32.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/12/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">INC_40_ESP32_HAL_ESP32_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INC_40_ESP32_HAL_ESP32_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f1xx.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>atCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">//INC_40_ESP32_HAL_ESP32_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="esp-32-c-2">esp32.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/12/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"esp32.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXBUF_MAX_SIZE</span>        <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESPONSE_BUF_MAX_SIZE</span> <span class="token expression"><span class="token number">512</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_OK</span>                 <span class="token string">"OK"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_ERROR</span>              <span class="token string">"ERROR"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_SUFFIX</span>             <span class="token string">"\r\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_RST</span>                <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+RST"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_TEST</span>               <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_GMR</span>                <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+GMR"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWMODE_STATION</span>     <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWMODE=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWJAP</span>              <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWJAP=\""</span> <span class="token expression">WIFI_NAME </span><span class="token string">"\",\""</span> <span class="token expression">WIFI_PASSWORD </span><span class="token string">"\""</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWSTATE</span>            <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWSTATE?"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>

<span class="token comment">// 热点的名称和密码</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIFI_NAME</span>       <span class="token string">"HONOR 90"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIFI_PASSWORD</span>   <span class="token string">"Zawalliswell1998"</span></span>

<span class="token class-name">uint8_t</span> rxBuf<span class="token punctuation">[</span>RXBUF_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
__IO <span class="token class-name">uint8_t</span> rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> responseBuf<span class="token punctuation">[</span>RESPONSE_BUF_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
__IO <span class="token class-name">uint8_t</span> responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 接收定长/空闲检测+中断 非阻塞接收数据到rxBuf中</span>
    <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> RXBUF_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送复位指令</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_RST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待芯片复位完成</span>

    <span class="token comment">// 测试AT指令</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_GMR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置WIFI工作模式：station（作为终端连接热点）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWMODE_STATION<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置热点的名称和密码</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWJAP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看WIFI状态（是否连接成功）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWSTATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>atCmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 记录发送指令后，收到的响应字节数量</span>
    rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 记录接收中断时收到的字节数量</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
           <span class="token keyword">sizeof</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 必须清零，避免残留数据影响对后续流程的判断</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> atCmd<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>atCmd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最多接收五次响应</span>
    <span class="token class-name">uint8_t</span> rxCount <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token comment">// 轮询等待AT响应</span>
        <span class="token class-name">uint32_t</span> timeout <span class="token operator">=</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>rxSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>
        <span class="token comment">// 收到一次响应，将接收缓冲区rxBuf收到的数据拷贝到响应结果中暂存</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>responseBuf <span class="token operator">+</span> responseSize<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> rxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        responseSize <span class="token operator">+=</span> rxSize<span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 继续接收响应</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_OK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
             <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_ERROR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> rxCount<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"rxCount = %d, responseSize = %d, responseBuf = %s"</span><span class="token punctuation">,</span> rxCount<span class="token punctuation">,</span> responseSize<span class="token punctuation">,</span>
              <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>huart <span class="token operator">==</span> <span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rxSize <span class="token operator">=</span> Size<span class="token punctuation">;</span>
        <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> RXBUF_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="main-c-2">main.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-1">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216102311387.png" alt="image-20241216102311387"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216102410687.png" alt="image-20241216102410687" style="zoom: 33%;">
<h1 id="tong-guo-esp-da-jian-tcp-server">通过ESP搭建TCPServer</h1>
<h2 id="qi-dong-tcp-fu-wu">启动TCP服务</h2>
<h3 id="at-zhi-ling-qi-dong-tcp-fu-wu">AT指令启动TCP服务</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CIPMUX_MULTI</span>      <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPMUX=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CREATE_TCP_SERVER</span> <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPSERVER=1,"</span> <span class="token expression">TCP_SERVER_PORT AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_IPD_MODE1</span>         <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPDINFO=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>

<span class="token comment">// TCP服务端口</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TCP_SERVER_PORT</span> <span class="token string">"8080"</span></span>

<span class="token keyword">void</span> <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 启用复用连接</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CIPMUX_MULTI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动TCP服务，指定端口</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CREATE_TCP_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * 设置入站数据包格式（incoming package data）
     * 0: does not show the remote host and port in “+IPD” and “+CIPRECVDATA” messages.
     * 1: show the remote host and port in “+IPD” and “+CIPRECVDATA” messages.
     * */</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_IPD_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lun-xun-jie-shou-tcp-ru-zhan-shu-ju-bao">轮询接收TCP入站数据包</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%.*s"</span><span class="token punctuation">,</span> rxSize<span class="token punctuation">,</span> rxBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ce-shi-tcp-lian-jie">测试TCP连接</h3>
<blockquote>
<p>注意：</p>
<ul>
<li>在手机热点上查看分配给esp、电脑的IP地址，本例中为 <code>192.168.201.181</code>、<code>192.168.201.38</code></li>
<li>远程端口要和AT指令 <code>AT+CIPSERVER</code>中指定的端口号一致，本地端口填0会自动分配</li>
</ul>
</blockquote>
<p><img src="C:%5CUsers%5C86157%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241216110308642.png" alt="image-20241216110308642"></p>
<p>连接后，我们的 <code>ESP32_TCP_HandleReceive</code> 会打印ESP发给我们的TCP入站数据包</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216114314439.png" alt="image-20241216114314439"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216110907876.png" alt="image-20241216110907876"></p>
<h2 id="ru-zhan-shu-ju-bao-jie-xi">入站数据包解析</h2>
<h3 id="esp-32-c-4">esp32.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> <span class="token operator">*</span>connectionId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>port<span class="token punctuation">,</span>
                             <span class="token class-name">uint16_t</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 解析esp抄送的入站数据包，示例：\r\n+IPD,0,5,"192.168.201.38",51105:hello\r\n</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> rxBuf<span class="token punctuation">,</span> <span class="token string">"+IPD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"&lt;%s&gt;"</span><span class="token punctuation">,</span> rxBuf<span class="token punctuation">)</span>
            <span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> rxBuf<span class="token punctuation">,</span> <span class="token string">"%*[\r\n]+IPD,%hu,%hu,\"%[^\"]\",%hu"</span><span class="token punctuation">,</span> connectionId<span class="token punctuation">,</span>
                   dataSize<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 数据中可能包含\r\n，scanf遇到后会停止匹配，因此需要单独解析</span>
            <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> rxBuf<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"connectionId = %hu, ip = %s, port = %hu, dataSize = %hu, data = "</span>
                      <span class="token string">"%.*s"</span><span class="token punctuation">,</span>
                      <span class="token operator">*</span>connectionId<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token operator">*</span>port<span class="token punctuation">,</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>rxBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rxBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-3">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token class-name">uint16_t</span> connectionId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> dataSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>connectionId<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dataSize<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ce-shi-2">测试</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216132411773.png" alt="image-20241216132411773"></p>
<h2 id="fa-song-shu-ju-gei-ke-hu-duan">发送数据给客户端</h2>
<h3 id="esp-32-c-5">esp32.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CIPMUX_MULTI</span>      <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPMUX=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CREATE_TCP_SERVER</span> <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPSERVER=1,"</span> <span class="token expression">TCP_SERVER_PORT AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_IPD_MODE1</span>         <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPDINFO=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CIPSEND</span>           <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPSEND=%hu,%hu"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>

<span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleTransmit</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> connectionId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> dataSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> AT_CIPSEND<span class="token punctuation">,</span> connectionId<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_WaitResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ESP32_WaitResponse</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 记录发送指令后，收到的响应字节数量</span>
    rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 记录每次接收中断收到的字节数量</span>
    <span class="token comment">// 必须清零，避免残留数据影响对后续流程的判断</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最多接收五次响应</span>
    <span class="token class-name">uint8_t</span> rxCount <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token comment">// 轮询等待AT响应</span>
        <span class="token class-name">uint32_t</span> timeout <span class="token operator">=</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>rxSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>
        <span class="token comment">// 收到一次响应，将接收缓冲区rxBuf收到的数据拷贝到响应结果中暂存</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>responseBuf <span class="token operator">+</span> responseSize<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> rxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        responseSize <span class="token operator">+=</span> rxSize<span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 继续接收响应</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_OK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
             <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_ERROR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> rxCount<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"rxCount = %d, responseSize = %d, responseBuf = %s"</span><span class="token punctuation">,</span> rxCount<span class="token punctuation">,</span> responseSize<span class="token punctuation">,</span>
              <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-4">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token class-name">uint16_t</span> connectionId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> dataSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>connectionId<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dataSize<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_TCP_HandleTransmit</span><span class="token punctuation">(</span>connectionId<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ce-shi-3">测试</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216175721948.png" alt="image-20241216175721948"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216175909143.png" alt="image-20241216175909143"></p>
<h2 id="wan-zheng-dai-ma-1">完整代码</h2>
<h3 id="esp-32-h-2">esp32.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/12/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">INC_40_ESP32_HAL_ESP32_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INC_40_ESP32_HAL_ESP32_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f1xx.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>atCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> <span class="token operator">*</span>connectionId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>port<span class="token punctuation">,</span>
                             <span class="token class-name">uint16_t</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleTransmit</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> connectionId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">//INC_40_ESP32_HAL_ESP32_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="esp-32-c-6">esp32.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/12/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"esp32.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXBUF_MAX_SIZE</span>        <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESPONSE_BUF_MAX_SIZE</span> <span class="token expression"><span class="token number">512</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_OK</span>                <span class="token string">"OK"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_ERROR</span>             <span class="token string">"ERROR"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_SUFFIX</span>            <span class="token string">"\r\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_RST</span>               <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+RST"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_TEST</span>              <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_GMR</span>               <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+GMR"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWMODE_STATION</span>    <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWMODE=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWJAP</span>             <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWJAP=\""</span> <span class="token expression">WIFI_NAME </span><span class="token string">"\",\""</span> <span class="token expression">WIFI_PASSWORD </span><span class="token string">"\""</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CWSTATE</span>           <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CWSTATE?"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CIPMUX_MULTI</span>      <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPMUX=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CREATE_TCP_SERVER</span> <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPSERVER=1,"</span> <span class="token expression">TCP_SERVER_PORT AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_IPD_MODE1</span>         <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPDINFO=1"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AT_CIPSEND</span>           <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">"AT+CIPSEND=%hu,%hu"</span> <span class="token expression">AT_SUFFIX<span class="token punctuation">)</span></span></span>

<span class="token comment">// TCP服务端口</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TCP_SERVER_PORT</span> <span class="token string">"8080"</span></span>
<span class="token comment">// 热点的名称和密码</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIFI_NAME</span>     <span class="token string">"HONOR 90"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIFI_PASSWORD</span> <span class="token string">"Zawalliswell1998"</span></span>

<span class="token class-name">uint8_t</span> rxBuf<span class="token punctuation">[</span>RXBUF_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
__IO <span class="token class-name">uint8_t</span> rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> responseBuf<span class="token punctuation">[</span>RESPONSE_BUF_MAX_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
__IO <span class="token class-name">uint8_t</span> responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ESP32_WaitResponse</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 接收定长/空闲检测+中断 非阻塞接收数据到rxBuf中</span>
    <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> RXBUF_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送复位指令</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_RST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待芯片复位完成</span>

    <span class="token comment">// 测试AT指令</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_GMR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置WIFI工作模式：station（作为终端连接热点）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWMODE_STATION<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置热点的名称和密码</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWJAP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看WIFI状态（是否连接成功）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CWSTATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 启用复用连接</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CIPMUX_MULTI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动TCP服务，指定端口</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_CREATE_TCP_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * 设置入站数据包格式（incoming package data）
     * 0: does not show the remote host and port in “+IPD” and “+CIPRECVDATA” messages.
     * 1: show the remote host and port in “+IPD” and “+CIPRECVDATA” messages.
     * */</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_IPD_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> <span class="token operator">*</span>connectionId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>port<span class="token punctuation">,</span>
                             <span class="token class-name">uint16_t</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 解析esp抄送的入站数据包，示例：\r\n+IPD,0,5,"192.168.201.38",51105:hello\r\n</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> rxBuf<span class="token punctuation">,</span> <span class="token string">"+IPD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//LOG_DEBUG("&lt;%s&gt;", rxBuf)</span>
            <span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> rxBuf<span class="token punctuation">,</span> <span class="token string">"%*[\r\n]+IPD,%hu,%hu,\"%[^\"]\",%hu"</span><span class="token punctuation">,</span> connectionId<span class="token punctuation">,</span>
                   dataSize<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 数据中可能包含\r\n，scanf遇到后会停止匹配，因此需要单独解析</span>
            <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> rxBuf<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"connectionId = %hu, ip = %s, port = %hu, dataSize = %hu, data = "</span>
                      <span class="token string">"%.*s"</span><span class="token punctuation">,</span>
                      <span class="token operator">*</span>connectionId<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token operator">*</span>port<span class="token punctuation">,</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> <span class="token operator">*</span>dataSize<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>rxBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rxBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ESP32_TCP_HandleTransmit</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> connectionId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> dataSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> AT_CIPSEND<span class="token punctuation">,</span> connectionId<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_WaitResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>atCmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> atCmd<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>atCmd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_WaitResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>huart <span class="token operator">==</span> <span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rxSize <span class="token operator">=</span> Size<span class="token punctuation">;</span>
        <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> RXBUF_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ESP32_WaitResponse</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    responseSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 记录发送指令后，收到的响应字节数量</span>
    rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 记录每次接收中断收到的字节数量</span>
    <span class="token comment">// 必须清零，避免残留数据影响对后续流程的判断</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>responseBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最多接收五次响应</span>
    <span class="token class-name">uint8_t</span> rxCount <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token comment">// 轮询等待AT响应</span>
        <span class="token class-name">uint32_t</span> timeout <span class="token operator">=</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>rxSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>
        <span class="token comment">// 收到一次响应，将接收缓冲区rxBuf收到的数据拷贝到响应结果中暂存</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>responseBuf <span class="token operator">+</span> responseSize<span class="token punctuation">,</span> rxBuf<span class="token punctuation">,</span> rxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        responseSize <span class="token operator">+=</span> rxSize<span class="token punctuation">;</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 继续接收响应</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_OK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
             <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">,</span> AT_ERROR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> rxCount<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"rxCount = %d, responseSize = %d, responseBuf = %s"</span><span class="token punctuation">,</span> rxCount<span class="token punctuation">,</span> responseSize<span class="token punctuation">,</span>
              <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> responseBuf<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-5">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART2_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_ModeStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ESP32_TCP_StartServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token class-name">uint16_t</span> connectionId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> dataSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_TCP_HandleReceive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>connectionId<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dataSize<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP32_TCP_HandleTransmit</span><span class="token punctuation">(</span>connectionId<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="shi-yan-esp-32-lan-ya-tou-chuan">实验-ESP32蓝牙透传</h1>
<h2 id="guan-fang-shi-li">官方示例</h2>
<p><a href="https://docs.espressif.com/projects/esp-at/en/latest/esp32/AT_Command_Examples/bluetooth_le_at_examples.html#id5">Establish SPP connection between ESP32 and mobile phone and transmit data in UART-Bluetooth LE passthrough mode</a></p>
<blockquote>
<p>在ESP32和手机之间建立SPP(Serial Port Profile, UART-Bluetooth LE passthrough mode)连接后，能够实现MCU串口和手机之间经过透传通道（对两者之间BLE的存在无感知）收发原始数据。</p>
<p>透传的好处（MCU对于BLE无感知）：</p>
<ol>
<li>与之前的WIFI案例对比，MCU接收数据不需要解析 <code>+IPD</code>格式的数据包了，通过串口接收到的就是手机发送的原始数据</li>
<li>MCU发送数据直接发到串口，不需要先指定AT指令了（对比之前案例中的 <code>AT+CIPSEND</code>）</li>
</ol>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216212311794.png" alt="image-20241216212311794"></p>
<h2 id="lan-ya-yan-bo-amp-lian-jie">蓝牙广播&amp;连接</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ESP32_Bluetooth_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 示例：https://docs.espressif.com/projects/esp-at/en/latest/esp32/AT_Command_Examples/bluetooth_le_at_examples.html#establish-spp-connection-between-esp32-and-mobile-phone-and-transmit-data-in-uart-bluetooth-le-passthrough-mode</span>
    <span class="token comment">// 初始化蓝牙，模式为服务端（等待被连接）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEINIT_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端创建GATT服务</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEGATTSSRVCRE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端启动服务</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEGATTSSRVSTART<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端设置广播参数，例如广播时间间隔</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVPARAM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端设置广播数据，例如蓝牙名称</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVDATAEX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端开始广播</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVSTART<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="qi-dong-ri-zhi">启动日志</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216213633239.png" alt="image-20241216213633239"></p>
<h3 id="lian-jie-lan-ya">连接蓝牙</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216213925196.png" alt="image-20241216213925196"></p>
<h3 id="lian-jie-jian-li-duan-kai-ri-zhi">连接建立/断开日志</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216214315568.png" alt="image-20241216214315568" style="zoom: 33%;">
<h3 id="wifi-lian-jie-duan-kai-ri-zhi">WIFI连接/断开日志</h3>
<blockquote>
<p>此前的案例对WIFI的配置被保存到了NVS（<strong>Non-Volatile Storage</strong>非易失性存储）中。</p>
<p><a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/storage/nvs_flash.html">Non-Volatile Storage Library</a></p>
<p>见<a href="https://docs.espressif.com/projects/esp-at/en/latest/esp32/AT_Command_Set/Wi-Fi_AT_Commands.html#wifi-at">AT+CWJAP</a>中的note</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216214350072.png" alt="image-20241216214350072" style="zoom: 50%;">
<h2 id="shou-ji-fa-song-shu-ju">手机发送数据</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216215443827.png" alt="image-20241216215443827" style="zoom: 33%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241216215514376.png" alt="image-20241216215514376"></p>
<h2 id="she-zhi-lian-jie-wei-tou-chuan-mo-shi">设置连接为透传模式</h2>
<h3 id="chu-shi-hua-shi-zeng-jia-tou-chuan-xiang-guan-can-shu-de-ti-qian-pei-zhi">初始化时增加透传相关参数的提前配置</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ESP32_Bluetooth_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ESP32_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 示例：https://docs.espressif.com/projects/esp-at/en/latest/esp32/AT_Command_Examples/bluetooth_le_at_examples.html#establish-spp-connection-between-esp32-and-mobile-phone-and-transmit-data-in-uart-bluetooth-le-passthrough-mode</span>
    <span class="token comment">// 初始化蓝牙，模式为服务端（等待被连接）</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEINIT_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端创建GATT服务</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEGATTSSRVCRE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端启动服务</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEGATTSSRVSTART<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端设置广播参数，例如广播时间间隔</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVPARAM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端设置广播数据，例如蓝牙名称</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVDATAEX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端开始广播</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVSTART<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 配置透传参数</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLESPPCFG<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 透传模式下，Wi-Fi、socket、Bluetooth LE 或 Bluetooth 状态改变时会打印提示信息</span>
    <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_SYSMSG<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="qi-dong-lan-ya-hou-gen-ju-esp-de-lian-jie-zhuang-tai-ti-shi-xin-xi-jin-ru-huo-tui-chu-tou-chuan">启动蓝牙后根据ESP的连接状态提示信息进入或退出透传</h3>
<blockquote>
<p>esp进入透传模式后，就不能给esp发送AT指令了，因为通过串口发给esp的，esp会原样通过蓝牙发送给客户端。详见 <a href="https://docs.espressif.com/projects/esp-at/en/latest/esp32/AT_Command_Set/BLE_AT_Commands.html#cmd-blespp">note</a></p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ESP32_Bluetooth_HandleReceive</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%.*s"</span><span class="token punctuation">,</span> rxSize<span class="token punctuation">,</span> rxBuf<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ESP32_Bluetooth_HandleConnChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BLE_DATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"收到客户端数据 = %s"</span><span class="token punctuation">,</span> rxBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        rxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>rxBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rxBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * 蓝牙连接/断开
 * [DEBUG esp32.c:86] +BLECONN:0,"60:8f:c2:b1:9a:22"
 * [DEBUG esp32.c:86] +BLEDISCONN:0,"60:8f:c2:b1:9a:22"
 *
 * [DEBUG esp32.c:86] +BLECONNPARAM:0,0,0,6,0,500
 * [DEBUG esp32.c:86] +BLESETPHY:"60:8f:c2:b1:9a:22",2,2
 * [DEBUG esp32.c:86] +BLECONNPARAM:0,0,0,24,0,500
 *
 * WIFI连接/断开
 * [DEBUG esp32.c:86] WIFI DISCONNECT
 * [DEBUG esp32.c:86] WIFI CONNECTED
 * [DEBUG esp32.c:86] WIFI GOT IP
 *
 * 客户端（如手机蓝牙调试助手）发来的数据
 * [DEBUG esp32.c:86] +WRITE:0,1,3,,4,1234
 * */</span>
ESP32_BLE_STATE <span class="token function">ESP32_Bluetooth_HandleConnChange</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>rxBuf<span class="token punctuation">,</span> <span class="token string">"+BLECONN:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 连接建立，开启透传（蓝牙收到的数据原样发给串口，串口发给蓝牙的数据原样发给客户端）</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"连接建立成功，准备使能透传"</span><span class="token punctuation">)</span>
        <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLESPP<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使能透传</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"连接建立成功，使能透传完成"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> BLE_CONNECT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>rxBuf<span class="token punctuation">,</span> <span class="token string">"+BLEDISCONN:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"连接断开，关闭透传模式"</span><span class="token punctuation">)</span>
        <span class="token comment">// 连接断开，关闭透传，进入正常命令模式。要特别注意透传模式下，直接发送“+++”才能返回正常命令模式</span>
        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"+++"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 至少等待1s以确保esp返回命令模式</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"进入正常命令模式"</span><span class="token punctuation">)</span>
        <span class="token comment">// 继续广播,等待连接</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"开始广播"</span><span class="token punctuation">)</span>
        <span class="token function">ESP32_SendAtCmd</span><span class="token punctuation">(</span>AT_BLEADVSTART<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BLE_DISCONNECT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>rxBuf<span class="token punctuation">,</span> <span class="token string">"WIFI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"wifi状态变化"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> BLE_WIFI_CHANGE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>rxBuf<span class="token punctuation">,</span> <span class="token string">"+BLECONNPARAM:"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>rxBuf<span class="token punctuation">,</span> <span class="token string">"+BLESETPHY:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> BLE_OTHER<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> BLE_DATA<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shou-ji-lian-jie-lan-ya-bing-fa-song-shu-ju">手机连接蓝牙并发送数据</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217092335587.png" alt="image-20241217092335587" style="zoom:33%;">
<p><img src="C:%5CUsers%5C86157%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241217083900288.png" alt="image-20241217083900288"></p>
<h3 id="shou-ji-duan-kai-lian-jie-amp-zhong-lian">手机断开连接 &amp; 重连</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217092746436.png" alt="image-20241217092746436"></p>
<h3 id="lan-ya-xiang-shou-ji-fa-song-shu-ju">蓝牙向手机发送数据</h3>
<blockquote>
<p>通过串口透传SPP可以直接将数据发送到客户端</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217093457819.png" alt="image-20241217093457819"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217093220260.png" alt="image-20241217093220260"></p>
<h3 id="zhu-yi-shi-xiang">注意事项</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217094852017.png" alt="image-20241217094852017"></p>
<h1 id="thn-end">THN END</h1>
]]></content>
      <categories>
        <category>STM32</category>
        <category>ESP32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>ESP32</tag>
        <tag>WIFI</tag>
        <tag>蓝牙</tag>
        <tag>无线通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32存储资源扩展之FSMC</title>
    <url>/2024/12/09/16017.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<p><strong>STM32</strong></p>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
</ul>
<p><strong>FSMC扩展SRAM</strong></p>
<ul>
<li><a href="https://www.issi.com/WW/pdf/62WV51216ALL.pdf">SRAM IS62WV51216BLL-55TLI 数据手册</a></li>
</ul>
<p><strong>FSMC扩展LCD模组</strong></p>
<ul>
<li>LCD驱动模组：中景园ZJY350IT002</li>
<li>LCD驱动芯片：<a href="https://www.hpinfotech.ro/ILI9486.pdf">ILI9486</a></li>
</ul>
<p><strong>字模取模工具</strong></p>
<ul>
<li><a href="https://github.com/materone/Arduino/blob/master/TFTToolsDocs/%E6%96%87%E5%AD%97%E5%8F%96%E6%A8%A1%E8%BD%AF%E4%BB%B6(%E8%B5%A0%E9%80%81)/PCtoLCD2002%E5%AE%8C%E7%BE%8E%E7%89%88/PCtoLCD2002.exe">PCtoLCD2002完美版</a></li>
</ul>
<p><strong>图片取模工具</strong></p>
<ul>
<li><a href="https://www.e-paper-display.com/download_detail/downloadsId=625.html">Image2Lcd Ver3.2</a></li>
</ul>
<p><strong>MDK参考手册</strong></p>
<ul>
<li><a href="https://www.keil.com/arm/man/arm.htm">ARM Product Manuals</a></li>
<li>[µVision User’s Guide]<a href="https://www.keil.com/support/man/docs/uv4/">https://www.keil.com/support/man/docs/uv4/</a>)
<ul>
<li><a href="https://developer.arm.com/documentation/101407/0541/Dialogs/Project/Options/Compiler/Arm-C-C---Compiler?lang=en">Optimization</a></li>
</ul>
</li>
<li><a href="https://developer.arm.com/documentation/100748/0623/Using-Common-Compiler-Options/Selecting-optimization-options">Arm® Compiler for Embedded User Guide 6.23</a>
<ul>
<li><a href="https://developer.arm.com/documentation/100748/0623/Using-Common-Compiler-Options/Selecting-optimization-options">Selecting optimization options</a></li>
</ul>
</li>
</ul>
<h1 id="fsmc-gai-shu">FSMC概述</h1>
<p>MCU自带的FLASH和SRAM资源是十分有限的，相比于PC机的存储空间而言要小的可怜。一般情况对于嵌入式应用来说这点存储空间一般也就够用了，但避免不了一些<mark>大量消耗内存的应用</mark>， 比如说<mark>图像处理</mark>。对于这类<mark>对内存要求较高的应用，我们往往需要扩展一个FLASH或者SRAM</mark>。STM32提供的FSMC就是用来完成这项功能的。</p>
<p>FSMC（Flexible static memory controller，灵活的静态存储器控制器），STM32可以通过FSMC与SRAM、ROM、PSRAM、Nor Flash和NandFlash存储器的引脚相连，从而进行数据的交换。要注意的是，<mark>FSMC 只能扩展静态的内存（S:static），不能是动态的内存</mark>，比如 SDRAM 就不能扩展。</p>
<p><mark>FSMC把AHB总线上的数据转换为对应外设的通信协议</mark>，<mark>控制外设的访问时序</mark>，<mark>以至于我们可以直接在程序中寻址访问</mark>。</p>
<h1 id="fsmc-zu-cheng">FSMC组成</h1>
<h2 id="gong-neng-kuang-tu">功能框图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209090941576.png" alt="image-20241209090941576"></p>
<p>FSMC主要由4部分组成：AHB总线接口（包括FSMC的配置寄存器）、NOR闪存/SRAM控制器、NAND闪存/PC卡控制器、外设接口四个部分构成。</p>
<p>本次实验需要用到的引脚如下：</p>
<ul>
<li>FSMC_A[25:0]：地址总线</li>
<li>FSMC_D[15:0]：双向数据总线</li>
<li>FSMC_NE[4:1]：片选引脚，低电平有效</li>
<li>FSMC_NOE：读使能，低电平有效</li>
<li>FSMC_NWE：写使能，低电平有效</li>
</ul>
<h2 id="ahb-zong-xian-jie-kou">AHB总线接口</h2>
<p>AHB总线接口是CPU、DMA等AHB总线主设备访问FSMC的通道，它负责<mark>把AHB总线事务转换成为外设通信的协议</mark>。</p>
<p>AHB总线事务的请求可以是8、16或者32位的，但外设器件的数据线位宽是恒定的。如果两者宽度相同就不存在什么问题，如果总线事务的位宽大于外设的位宽，那么总线接口将把总线事务拆分为多个连续的8位或16位形式访问外设。我们应当尽量避免总线事务宽度小于外设宽度的情况出现，因为这将可能导致数据的不一致，具体与外设类型有关系。</p>
<p>配置寄存器则描述了<mark>扩展外设的具体形式、通信协议和接口形式</mark>。用于总线接口将AHB总线事务转换为外设通信协议， 驱动NOR闪存/SRAM控制器和NAND闪存/PC卡控制器，进而控制外设。</p>
<h2 id="nor-shan-cun-psram-kong-zhi-qi">NOR闪存/PSRAM控制器</h2>
<p>NOR/PSRAM内存控制器支持各种同步和异步的内存。所谓<mark>同步内存</mark>就是在读写内存的时候<mark>需要一个同步时钟来指导数据的发送和接收</mark>， 与我们在串口通信中提到的同步/异步通信是一个道理。对于同步内存，FSMC只会在读写操作的时候产生驱动时钟，而且其频率是系统总线时钟<mark>HCLK的分频</mark>。</p>
<p>NOR/PSRAM控制器用于生成<mark>适当的时序</mark>，以驱动8位、16位、32位的异步SRAM和ROM、异步或者突发模式的PSRAM和NOR闪存。我们通过<mark>配置寄存器</mark>描述<mark>外设的特征和时序</mark>后，控制器就可以为我们生成对应的<mark>驱动时序</mark>。</p>
<h2 id="nand-shan-cun-pc-qia-kong-zhi-qi">NAND闪存/PC卡控制器</h2>
<p>NAND/PC卡控制器用于驱动8位或者16位的NAND闪存以及16位的PC卡兼容设备。</p>
<h2 id="wai-she-jie-kou">外设接口</h2>
<p>用于与要扩展外设联通用的。在接线时必须根据每个外设的特点，来进行合适的接线。</p>
<h1 id="wai-bu-she-bei-di-zhi-ying-she">外部设备地址映射</h1>
<p>从FSMC的角度看，可以把外部存储器划分为固定大小为4个256M字节的存储块。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209091825457.png" alt="image-20241209091825457"></p>
<p>存储块1用于访问最多4个NOR闪存或PSRAM存储设备。这个存储区被划分为4个NOR/PSRAM区并有4个专用的片选。存储块2和3用于访问NAND闪存设备，每个存储块连接一个NAND闪存。存储块4用于访问PC卡设备。</p>
<p>每一个存储块上的存储器类型是由用户在配置寄存器中定义的。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209092125741.png" alt="image-20241209092125741"></p>
<h1 id="fsmc-kong-zhi-nor-shan-cun-huo-psram-de-shi-xu">FSMC控制NOR闪存或PSRAM的时序</h1>
<p>FSMC 外设支持输出多种不同的时序以便于控制不同的存储器，它具有6种模式：1，A，2/B，C，D，复用模式。</p>
<p>所有信号由内部时钟HCLK保持同步，但该时钟不会输出到外部扩展的存储器。FSMC始终在片选信号NE失效前对数据线采样，这样能够保证符合存储器的数据保持时序。</p>
<p>所有的控制器输出信号在内部时钟（HCLK）的上升沿变化，在同步写模式（PSRAM）下，读写的数据在存储器时钟（CLK）的下降沿变化。</p>
<p>我们以读写SRAM的模式A为例来介绍。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209093534030.png" alt="image-20241209093534030"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209093541612.png" alt="image-20241209093541612"></p>
<p>当内核发出访问某个指向外部存储器的地址时，FSMC外设会<mark>根据配置</mark>控制信号线产生时序访问存储器（硬件自动生成对应的时序），上图中的是访问外部 SRAM 时 FSMC 外设的读写时序。</p>
<p>在读时序中，一个存储器操作周期由1个地址建立周期（ADDSET），1个数据建立周期（DATASET）和2个HCLK周期组成。</p>
<ul>
<li>在地址建立周期中，地址线发出要访问的地址，数据掩码信号线指示出要读取地址的高、低字节部分，片选信号使能存储器芯片</li>
<li>地址建立周期结束后读使能信号线发出读使能信号，接着存储器通过数据信号线把目标数据传输给 FSMC，FSMC 把它交给内核。</li>
</ul>
<p>写时序类似，区别是它的一个存储器操作周期仅由1个地址建立周期（ADDSET）和1个数据建立周期（DATAST）组成，且在数据建立周期期间写使能信号线发出写信号，接着 FSMC 把数据通过数据线传输到存储器中。</p>
<h1 id="fsmc-ying-yong-an-li-kuo-zhan-wai-bu-sram">FSMC应用案例：扩展外部SRAM</h1>
<h2 id="xu-qiu-miao-shu">需求描述</h2>
<p>使用FSMC扩展<strong>外部SRAM</strong>。然后把内存数据存储到外部SRAM中。</p>
<p>STM32F1 系列的芯片不支持扩展SDRAM（STM32F429 系列支持），它仅支持使用 FSMC 外设扩展 SRAM。由于引脚数量的限制，只有 STM32F103ZE 或以上型号的芯片才可以扩展外部 SRAM。</p>
<h2 id="sram-xin-pian-is-62-wv-51216">SRAM芯片IS62WV51216</h2>
<h3 id="yin-jiao-fen-xi">引脚分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209095609954.png" alt="image-20241209095609954"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209095617710.png" alt="image-20241209095617710"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209095704421.png" alt="image-20241209095704421" style="zoom:50%;">
<p>SRAM 的控制比较简单，只要控制信号线使能了访问，从地址线输入要访问的地址，即可从 I/O 数据线写入或读出数据。</p>
<h3 id="du-cao-zuo-shi-xu-fen-xi">读操作时序分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209153403455.png" alt="image-20241209153403455"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209152956978.png" alt="image-20241209152956978"></p>
<h3 id="xie-cao-zuo-shi-xu-fen-xi">写操作时序分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209160059962.png" alt="image-20241209160059962"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209153846776.png" alt="image-20241209153846776"></p>
<h2 id="mo-shi-1-kuo-zhan-sram-shi-jian">模式1扩展SRAM实践</h2>
<h3 id="ying-jian-lian-jie">硬件连接</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209164452355.png" alt="image-20241209164452355"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209170014723.png" alt="数据手册引脚定义"></p>
<h4 id="fsmc-pian-xuan-yin-jiao-amp-di-zhi-ying-she">FSMC片选引脚 &amp; 地址映射</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209165522561.png" alt="image-20241209165522561"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209165654692.png" alt="image-20241209165654692"></p>
<h3 id="rcc-shi-zhong-shi-neng">RCC时钟使能</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启FSMC和GPIO时钟-DEFG</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_FSMCEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPDEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPEEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPFEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="gpio-pei-zhi">GPIO配置</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209170812776.png" alt="image-20241209170812776" style="zoom: 33%;">
<p>如上，所有涉及到的引脚配置为复用推挽即可。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1 配置 A0-A18 地址端口的输出模式 复用推挽输出CNF:10 50MHz速度 MODE:11*/</span>
    <span class="token comment">/* =============MODE=============== */</span>
    GPIOF<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1 <span class="token operator">|</span>
                   GPIO_CRL_MODE2 <span class="token operator">|</span>
                   GPIO_CRL_MODE3 <span class="token operator">|</span>
                   GPIO_CRL_MODE4 <span class="token operator">|</span>
                   GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE12 <span class="token operator">|</span>
                   GPIO_CRH_MODE13 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span>
                   GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1 <span class="token operator">|</span>
                   GPIO_CRL_MODE2 <span class="token operator">|</span>
                   GPIO_CRL_MODE3 <span class="token operator">|</span>
                   GPIO_CRL_MODE4 <span class="token operator">|</span>
                   GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE11 <span class="token operator">|</span>
                   GPIO_CRH_MODE12 <span class="token operator">|</span>
                   GPIO_CRH_MODE13<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* =============CNF=============== */</span>
    GPIOF<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF2_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF3_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF4_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOF<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF2_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF3_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF4_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF12_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF13_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF12_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF13_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF2_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF3_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF4_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF2_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF3_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF4_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF11_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF12_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF13_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF11_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF12_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF13_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        2 数据端口 复用推挽输出
            在实际应用中，即使数据线被配置为输出模式，FSMC控制器仍然能够管理数据线的方向，使其在需要时成为输入线。
            这种自动切换是由FSMC控制器硬件管理的，不需要软件干预。
            因此，即使GPIO配置为复用推挽输出，FSMC依然可以实现读取操作。
    */</span>
    <span class="token comment">/* =============MODE=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span>
                   GPIO_CRH_MODE9 <span class="token operator">|</span>
                   GPIO_CRH_MODE10 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span>
                   GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span>
                   GPIO_CRH_MODE9 <span class="token operator">|</span>
                   GPIO_CRH_MODE10 <span class="token operator">|</span>
                   GPIO_CRH_MODE11 <span class="token operator">|</span>
                   GPIO_CRH_MODE12 <span class="token operator">|</span>
                   GPIO_CRH_MODE13 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span>
                   GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* =============CNF=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF9_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF9_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF7_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF7_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF9_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF11_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF12_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF13_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF9_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF11_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF12_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF13_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3 其他控制端口  复用推挽输出 */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE4 <span class="token operator">|</span>
                   GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF4_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF4_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="afio-pei-zhi">AFIO配置</h3>
<p>FSMC对引脚的复用只有一套，没有备用的重映射引脚，因此AFIO无需额外配置。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209165234660.png" alt="image-20241209165234660"></p>
<h3 id="fsmc-bank-jie-gou-ti">FSMC Bank结构体</h3>
<p>在访问FSMC的Bank寄存器的时stm32f10x.h并没有给所有的寄存器起名字，而是用了<strong>一个数组</strong>存储了所有的寄存器。每个数组长度为8，表示一共存储了8个寄存器。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    __IO <span class="token class-name">uint32_t</span> BTCR<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> FSMC_Bank1_TypeDef<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209172258808.png" alt="image-20241209172258808"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209173124836.png" alt="image-20241209173124836"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BCR3 =&gt; BTCR[4]</span>
    <span class="token comment">// 开启写使能，允许向SRAM写入数据</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR3_WREN<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器数据总线宽度为16</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR3_MWID<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR3_MWID_0<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器类型为SRAM</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR3_MTYP<span class="token punctuation">;</span>
    <span class="token comment">// 地址-数据复用使能：关闭</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR3_MUXEN<span class="token punctuation">;</span>
    <span class="token comment">// 使能存储器对应的Bank</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR3_MBKEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="kong-zhi-ji-cun-qi-bcr-fen-qu-3-bck-3">控制寄存器BCR（分区3-BCK3）</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209143356091.png" alt="Mode 1 - SRAM/PSRAM (CRAM)  "></p>
<h3 id="shi-xu-sheng-cheng-ji-cun-qi-btr-fen-qu-3-btr-3">时序生成寄存器BTR（分区3-BTR3）</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209161414874.png" alt="image-20241209161414874"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209200755382.png" alt="image-20241209200755382"></p>
<p>结合这里的STM32参考手册以及之前对SRAM读/写操作的时序分析，我们来看下ADDSET和DATASET该如何配置。</p>
<p>地址访问阶段</p>
<ul>
<li>SRAM读/写操作：对于地址访问时间/地址建立时间，最小值可以为0，因此ADDSET我们可以配置为0.</li>
</ul>
<p>数据访问阶段</p>
<ul>
<li>SRAM读操作：SRAM输出使能访问时间最小可以为0，对应<mark>DATASET可以配置为0</mark></li>
<li>SRAM写操作：写使能有效电平时间时间最小为40ns（55ns版本SRAM），根据STM32F103的HCLK频率72MHz（周期约13.9ns），对应<mark>DATASET我们可以配置为4</mark>，即4个HCLK周期满足最小40ns的时序要求。因为模式1时序生成寄存器只有一个BTR，因此DATASET可以取最大值4。（其他模式需要分开配置读、写时序参数时，可以通过BCR中的EXTMOD位和BWTR来实现）。</li>
</ul>
<blockquote>
<p>[!NOTE]</p>
<p>如下以55ns访问时间版本的SRAM为例（IS62WV51216BLL-55TLI  ）</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209162731600.png" alt="image-20241209162731600"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BTR3 =&gt; BTCR[5]</span>
    <span class="token comment">// 地址访问/建立时间（HCLK数量）配置为0，实际为(0+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR3_ADDSET<span class="token punctuation">;</span>
    <span class="token comment">// 数据访问/建立时间配置为4（4*HCLK），实际为(4+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR3_DATAST<span class="token punctuation">;</span>
    <span class="token comment">// 4 =&gt; 0100</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BTR3_DATAST_2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="wan-zheng-dai-ma">完整代码</h3>
<h4 id="fsmc-h">fsmc.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__FSMC_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__FSMC_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __FSMC_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fsmc-c">fsmc.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fsmc.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启FSMC和GPIO时钟-DEFG</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_FSMCEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPDEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPEEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPFEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1 配置 A0-A18 地址端口的输出模式 复用推挽输出CNF:10 50MHz速度 MODE:11*/</span>
    <span class="token comment">/* =============MODE=============== */</span>
    GPIOF<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1 <span class="token operator">|</span>
                   GPIO_CRL_MODE2 <span class="token operator">|</span>
                   GPIO_CRL_MODE3 <span class="token operator">|</span>
                   GPIO_CRL_MODE4 <span class="token operator">|</span>
                   GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE12 <span class="token operator">|</span>
                   GPIO_CRH_MODE13 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span>
                   GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1 <span class="token operator">|</span>
                   GPIO_CRL_MODE2 <span class="token operator">|</span>
                   GPIO_CRL_MODE3 <span class="token operator">|</span>
                   GPIO_CRL_MODE4 <span class="token operator">|</span>
                   GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE11 <span class="token operator">|</span>
                   GPIO_CRH_MODE12 <span class="token operator">|</span>
                   GPIO_CRH_MODE13<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* =============CNF=============== */</span>
    GPIOF<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF2_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF3_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF4_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOF<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF2_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF3_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF4_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF12_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF13_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF12_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF13_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF2_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF3_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF4_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF2_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF3_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF4_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF11_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF12_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF13_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF11_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF12_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF13_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        2 数据端口 复用推挽输出
            在实际应用中，即使数据线被配置为输出模式，FSMC控制器仍然能够管理数据线的方向，使其在需要时成为输入线。
            这种自动切换是由FSMC控制器硬件管理的，不需要软件干预。
            因此，即使GPIO配置为复用推挽输出，FSMC依然可以实现读取操作。
    */</span>
    <span class="token comment">/* =============MODE=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span>
                   GPIO_CRH_MODE9 <span class="token operator">|</span>
                   GPIO_CRH_MODE10 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span>
                   GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span>
                   GPIO_CRH_MODE9 <span class="token operator">|</span>
                   GPIO_CRH_MODE10 <span class="token operator">|</span>
                   GPIO_CRH_MODE11 <span class="token operator">|</span>
                   GPIO_CRH_MODE12 <span class="token operator">|</span>
                   GPIO_CRH_MODE13 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span>
                   GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* =============CNF=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF9_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF9_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF7_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF7_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF9_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF11_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF12_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF13_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF9_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF11_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF12_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF13_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3 其他控制端口  复用推挽输出 */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE4 <span class="token operator">|</span>
                   GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF4_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF4_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span>
                   GPIO_CRL_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span>
                   GPIO_CRL_CNF1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span>
                    GPIO_CRL_CNF1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BCR3 =&gt; BTCR[4]</span>
    <span class="token comment">// 开启写使能，允许向SRAM写入数据</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR3_WREN<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器数据总线宽度为16</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR3_MWID<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR3_MWID_0<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器类型为SRAM</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR3_MTYP<span class="token punctuation">;</span>
    <span class="token comment">// 地址-数据复用使能：关闭</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR3_MUXEN<span class="token punctuation">;</span>
    <span class="token comment">// 使能存储器对应的Bank</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR3_MBKEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BTR3 =&gt; BTCR[5]</span>
    <span class="token comment">// 地址访问/建立时间（HCLK数量）配置为0，实际为(0+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR3_ADDSET<span class="token punctuation">;</span>
    <span class="token comment">// 数据访问/建立时间配置为4（4*HCLK），实际为(4+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR3_DATAST<span class="token punctuation">;</span>
    <span class="token comment">// 4 =&gt; 0100</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BTR3_DATAST_2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fsmc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 编译器关键字：__attribute__用于设置变量的属性，at用于指定存放地址</span>
<span class="token class-name">uint16_t</span> var1 <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0x68000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint32_t</span> var2 <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0x68000004</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 地址必须4字节对齐</span>

<span class="token class-name">uint16_t</span> var3<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token comment">// 局部变量在栈上分配，其地址与函数执行时的栈指针SP有关</span>
    <span class="token class-name">uint16_t</span> var4 <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0x68000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x68000020</span><span class="token punctuation">;</span>

    var1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    var2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    var3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    var4 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"var1 = %d, @%p"</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var1<span class="token punctuation">)</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"var2 = %d, @%p"</span><span class="token punctuation">,</span> var2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var2<span class="token punctuation">)</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"var3 = %d, @%p"</span><span class="token punctuation">,</span> var3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var3<span class="token punctuation">)</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"var4 = %d, @%p"</span><span class="token punctuation">,</span> var4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var4<span class="token punctuation">)</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"p = %d, @%p"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> p<span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hal-ku-shi-xian">HAL库实现</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209214014618.png" alt="image-20241209214014618"></p>
<h1 id="zai-kan-nei-cun-ying-she">再看内存映射</h1>
<h3 id="sram-di-zhi-xian-jie-kou-25-0">SRAM地址线接口[25:0]</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209192818430.png" alt="image-20241209192818430" style="zoom:50%;">
<p>STM32将32bit-4G地址空间划分为了8个<mark>block块</mark>，因此32bit的高3位可以作为<mark>块号</mark>。</p>
<p>而在block3内，又可以使用一个bit来表示<mark>bank（内存组号）</mark>。高三位固定为011，0110表示bank1，0111表示bank2。</p>
<p>在bank1中，又可以使用两位来表示<mark>区号</mark>，对应NOR/PSRAM1~4。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209193611218.png" alt="image-20241209193611218"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209194339740.png" alt="image-20241209194339740"></p>
<p>这也解释了为什么FSMC框图中，地址线引脚只有26个，因为高6位（block-3bit，bank-1bit，分区-2bit）用于定位分区，低26bit才用于定位存储器内部单元</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209194648357.png" alt="image-20241209194648357" style="zoom:50%;">
<h2 id="shu-ju-kuan-du-amp-gao-di-zi-jie-yan-ma">数据宽度 &amp; 高/低字节掩码</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209195756530.png" alt="image-20241209195756530"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241209195955072.png" alt="image-20241209195955072"></p>
<h1 id="fsmc-kuo-zhan-lcd-xian-cun">FSMC扩展LCD显存</h1>
<h2 id="lcd-jie-kou-lei-xing">LCD接口类型</h2>
<p>LCD的接口有多种，分类很细。主要看LCD的驱动方式和控制方式，目前彩色LCD的连接方式一般有这么几种：MCU模式，RGB模式，SPI模式，VSYNC模式，MDDI模式，DSI模式。</p>
<p>但应用比较多的就是MCU模式和RGB模式。</p>
<h3 id="mcu-mo-shi">MCU模式</h3>
<p>因为主要针对单片机的领域在使用，因此得名，其主要特点是价格便宜。MCU-LCD接口的标准术语是Intel提出的<mark>8080总线标准</mark>，因此在很多文档中用 <mark>I80</mark> 来指MCU-LCD屏。</p>
<p>对于MCU接口的LCM（LCD Module），其内部的芯片就叫<mark>LCD驱动器</mark>，都<mark>带GRAM（显存）</mark>。主要功能是<mark>对主机发过的数据/命令，进行变换，变成每个像素的RGB数据，使之在屏上显示出来</mark>。</p>
<h3 id="rgb-mo-shi">RGB模式</h3>
<p>RGB模式是大屏采用较多的模式，比如我们电脑显示器。</p>
<p>对于RGB接口的LCM，主机输出的直接是每个像素的RGB数据，不需要进行变换（GAMMA校正等除外），对于这种接口，需要在主机部分有个LCD控制器(平常所说的显卡)，以产生RGB数据和点、行、帧同步信号。</p>
<h2 id="ye-jing-mo-kuai-z-350-it-002">液晶模块Z350IT002</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210115304883.png" alt="image-20241210115304883"></p>
<p>这里使用的液晶显示模块是Z350IT002。这是一款 <mark>TFT LCD（薄膜晶体管液晶显示器）模块</mark>。TFT LCD 以其优秀的显示性能和低功耗特性而广泛应用于各种电子设备。</p>
<p>（1）<strong>分辨率</strong></p>
<p>模块的分辨率为 320RGB × 480 点阵。这意味着屏幕横向有 320 个像素点，每个像素点由红、绿、蓝三种颜色组成，纵向有 480 个像素点。这种分辨率适合于显示清晰的图像和文字。</p>
<p>（2）<strong>构造</strong></p>
<p>它由 960 个源（source）和 480 个门（gate）构成。源用于横向的像素点驱动，门用于纵向的像素点驱动。这种结构有助于精确地控制每个像素点，从而提供清晰的图像显示。</p>
<p>（3）<strong>微控制器接口</strong></p>
<p>Z350IT002 设计了易于通过微控制器访问和控制的接口。这使得它非常适合于嵌入式系统或其他需要直接由微控制器控制显示屏的应用。</p>
<p>（4）<strong>应用领域</strong></p>
<p>考虑到其尺寸和分辨率，Z350IT002 特别适用于中小尺寸的显示需求，如便携式设备、工业控制面板、小型嵌入式系统等。</p>
<p>（5）<strong>显示效果</strong></p>
<p>作为一款 TFT LCD，Z350IT002 可以提供良好的颜色对比度和亮度，适合于需要中等分辨率和高色彩质量的应用。</p>
<p>总体而言，Z350IT002 是一款适用于多种中小型电子设备的TFT LCD显示模块，其易于微控制器集成的特点使其成为许多嵌入式应用和工业产品的理想选择。</p>
<h2 id="kong-zhi-qi-xin-pian-ili-9486">控制器芯片ILI9486</h2>
<p>液晶模块Z350IT002内部使用的控制芯片是：<mark>ILI9486</mark>。</p>
<p>ILI9486 是一款流行的 LCD 控制器芯片，由 <mark>Ilitek</mark> 公司生产，通常用于驱动中小尺寸的 TFT（薄膜晶体管）LCD 显示屏。</p>
<p>具有320RGBx480点的分辨率。它包括960通道的源驱动器和480通道的门驱动器，以及用于320RGBx480点图形数据的345600字节GRAM和电源供应电路。</p>
<p>另外ILI9486<strong>支持多种接口类型</strong>，包括：</p>
<p>（1）并行CPU数据总线接口，支持8位、9位、16位和18位。</p>
<p>（2）3线和4线串行外设接口（SPI）。</p>
<p>（3）符合RGB（16位/18位）数据总线，用于视频图像显示。</p>
<p>（4）高速串行接口，提供一个数据和时钟通道，支持最高达500Mbps的MIPI DSI链路。</p>
<p>（5）支持MDDI接口。</p>
<blockquote>
<p>[!IMPORTANT]</p>
<p>本案例使用的芯片接口固定为16位的并行8080接口。</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210115735601.png" alt="image-20241210115735601"></p>
<h2 id="shi-yong-stm-32-de-fsmc-lai-shi-xian-8080-shi-xu">使用STM32的FSMC来实现8080时序</h2>
<p>8080 通讯接口时序可以由 STM32 使用普通 I/O 接口进行模拟，但这样效率太低，STM32 提供了一种特别的控制方法——使用 FSMC 接口实现 8080 时序。我们在前面使用CubeMX扩展SRAM时候已经可以看到了这点。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210115908848.png" alt="image-20241210115908848"></p>
<p>时序的控制FSMC可以完成，但是如何向GRAM写数据，写什么格式的数据呢？</p>
<p><mark>GRAM</mark>，作用可以理解为显存， GRAM 中<mark>每个存储单元都对应着液晶面板的一个像素点</mark>。使像素点呈现特定的颜色，而多个像素点组合起来就成为一个你想表达的东西，一段文字或者一副图。</p>
<blockquote>
<p>[!IMPORTANT]</p>
<p>按照标准的格式，16 位的像素点的三原色描述的位数为R:G:B=5：6：5， 描述绿色的位数比较多是因为人眼对绿色更为敏感。</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210121109948.png" alt="image-20241210121109948"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210121308068.png" alt="image-20241210121308068"></p>
<h1 id="shi-yan-shi-yong-fsmc-kong-zhi-lcd-xian-shi">实验-使用FSMC控制LCD显示</h1>
<h2 id="ying-jian-dian-lu-she-ji">硬件电路设计</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210121354587.png" alt="image-20241210121354587"></p>
<p>（1）D0-D15是16位数据总线接口。分别接FSMC的D0-D15。</p>
<p>（2）RST是LCD复位引脚，低电平复位。接LCD-RST（PG15）。</p>
<p>（3）RD是读控制引脚，上升沿时读数据。接FSMC-NOE（PD4）。</p>
<p>（4）WR是写控制引脚，上升沿时写数据。接FSMC-NWE（PD5）。</p>
<p>（5）RS是数据或命令选择引脚RS=1写数据，RS=0写命令。接FSMC-A10（PG0）。</p>
<p>（6）CS是片选引脚，低电平有效。接FSMC-NE4（PG12）。</p>
<p>（7）LEDA是背光电源（3.0V-3.4V）引脚。</p>
<p>（8）LEDK是背光亮度控制引脚。通过LCD-BG（PB0）来驱动MOS管Q5的导通电流。可以通过给LCD-BG输出PWM波来控制背光的亮度。占空比越大，背光就会越亮。</p>
<p>（9）YD，XL，YU，XR是触摸屏控制引脚。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210152837116.png" alt="中景园ZJY350IT002 LCD模组"></p>
<h2 id="fsmc-xun-zhi">FSMC寻址</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210121607390.png" alt="image-20241210121607390" style="zoom:50%;">
<p>扩展LCD的时候,使用的是块1的地址，一共4*64MB = 256MB，每部分的地址如下：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210121731878.png" alt="image-20241210121731878" style="zoom:50%;">
<p>我们选择的是NE4， 所以地址范围是：<code>0X6C00 0000 ~ 0X6FFF FFFF</code>，寄存器的基地址是<code>6C000000</code>。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210121747875.png" alt="image-20241210121747875"></p>
<blockquote>
<p>[!NOTE]</p>
<p>注意：当使用16位宽的外部存储器时，用HADDR[25:1]表示外部的FSMC_A[24:0]，内部地址相当于左移了1位，所以计算地址的时候要注意。</p>
<p>LCD我们选择的是16位宽度的，选择地址线时，我们选择的是A10接LCD的D/CX（数据/命令引脚）。</p>
<p>当A10=0时，表示<strong>写命令</strong>，所以地址是：<code>0x6C00 0000</code>。</p>
<p>当A10=1时，表示<strong>写数据</strong>，所以地址是：<code>0x6C00 0000 + 1&lt;&lt;11 = 0x6C00 0800</code></p>
</blockquote>
<h2 id="fsmc-chu-shi-hua">FSMC初始化</h2>
<h3 id="fsmc-h-1">fsmc.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__FSMC_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__FSMC_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __FSMC_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fsmc-c-1">fsmc.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fsmc.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启FSMC和GPIO时钟-DEFG</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_FSMCEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPDEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPEEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1 配置 A10 地址端口的输出模式 复用推挽输出CNF:10 50MHz速度 MODE:11*/</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE0<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF0_1<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF0_0<span class="token punctuation">;</span>

    <span class="token comment">/*
        2 数据端口 复用推挽输出
            在实际应用中，即使数据线被配置为输出模式，FSMC控制器仍然能够管理数据线的方向，使其在需要时成为输入线。
            这种自动切换是由FSMC控制器硬件管理的，不需要软件干预。
            因此，即使GPIO配置为复用推挽输出，FSMC依然可以实现读取操作。
    */</span>
    <span class="token comment">/* =============MODE=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span> GPIO_CRL_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span> GPIO_CRH_MODE9 <span class="token operator">|</span> GPIO_CRH_MODE10 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span> GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span>
        <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span> GPIO_CRH_MODE9 <span class="token operator">|</span> GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11 <span class="token operator">|</span>
         GPIO_CRH_MODE12 <span class="token operator">|</span> GPIO_CRH_MODE13 <span class="token operator">|</span> GPIO_CRH_MODE14 <span class="token operator">|</span> GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* =============CNF=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span> GPIO_CRL_CNF1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span> GPIO_CRL_CNF1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span> GPIO_CRH_CNF9_1 <span class="token operator">|</span> GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span> GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span> GPIO_CRH_CNF9_0 <span class="token operator">|</span> GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span> GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF7_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF7_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span> GPIO_CRH_CNF9_1 <span class="token operator">|</span> GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF11_1 <span class="token operator">|</span> GPIO_CRH_CNF12_1 <span class="token operator">|</span> GPIO_CRH_CNF13_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span> GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span> GPIO_CRH_CNF9_0 <span class="token operator">|</span> GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF11_0 <span class="token operator">|</span> GPIO_CRH_CNF12_0 <span class="token operator">|</span> GPIO_CRH_CNF13_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span> GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3 其他控制端口  复用推挽输出 */</span>
    <span class="token comment">// NOE NWE PD4 PD5</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE4 <span class="token operator">|</span> GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF4_1 <span class="token operator">|</span> GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF4_0 <span class="token operator">|</span> GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// NE4 PG12</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE12<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF12_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF12_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BCR4 =&gt; BTCR[6]</span>
    <span class="token comment">// 开启写使能，允许向SRAM写入数据</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR4_WREN<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器数据总线宽度为16</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR4_MWID<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR4_MWID_0<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器类型为SRAM</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR4_MTYP<span class="token punctuation">;</span>
    <span class="token comment">// 地址-数据复用使能：关闭</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR4_MUXEN<span class="token punctuation">;</span>
    <span class="token comment">// 使能存储器对应的Bank</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR4_MBKEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BTR4 =&gt; BTCR[7]</span>
    <span class="token comment">// 地址访问/建立时间（HCLK数量）配置为0，实际为(0+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR4_ADDSET<span class="token punctuation">;</span>
    <span class="token comment">// 数据访问/建立时间配置为3 =&gt; 0011，实际为(3+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR4_DATAST<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BTR4_DATAST_0<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BTR4_DATAST_1<span class="token punctuation">;</span>
    <span class="token comment">// 总线读-写切换空闲时间配置为0 =&gt; (0+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR4_BUSTURN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lcd-chu-shi-hua">LCD初始化</h2>
<h3 id="lcd-h">lcd.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LCD_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LCD_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fsmc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SRAM_BANK4</span> <span class="token expression"><span class="token number">0x6C000000</span></span></span>
<span class="token comment">// PA10为0：发送命令</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LCD_ADDR_CMD</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>SRAM_BANK4<span class="token punctuation">)</span></span></span>
<span class="token comment">// PA10为1：发送数据（SRAM数据总线宽度为16时，FSMC会将AHB地址线[25:1]&gt;&gt;1输入到SRAM，因此这里的bit12对应FSMC的PA10-bit11）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LCD_ADDR_DATA</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SRAM_BANK4 <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x01</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPLAY_W</span> <span class="token expression"><span class="token number">320</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPLAY_H</span> <span class="token expression"><span class="token number">480</span></span></span>


<span class="token comment">//画笔颜色</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WHITE</span>         	 <span class="token expression"><span class="token number">0xFFFF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLACK</span>         	 <span class="token expression"><span class="token number">0x0000</span>	  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLUE</span>         	 <span class="token expression"><span class="token number">0x001F</span>  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BRED</span>             <span class="token expression"><span class="token number">0XF81F</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRED</span> 			 <span class="token expression"><span class="token number">0XFFE0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GBLUE</span>			 <span class="token expression"><span class="token number">0X07FF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RED</span>           	 <span class="token expression"><span class="token number">0xF800</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAGENTA</span>       	 <span class="token expression"><span class="token number">0xF81F</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GREEN</span>         	 <span class="token expression"><span class="token number">0x07E0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CYAN</span>          	 <span class="token expression"><span class="token number">0x7FFF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">YELLOW</span>        	 <span class="token expression"><span class="token number">0xFFE0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BROWN</span> 			 <span class="token expression"><span class="token number">0XBC40</span> </span><span class="token comment">//棕色</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BRRED</span> 			 <span class="token expression"><span class="token number">0XFC07</span> </span><span class="token comment">//棕红色</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRAY</span>  			 <span class="token expression"><span class="token number">0X8430</span> </span><span class="token comment">//灰色</span></span>

<span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 背光开关</span>
<span class="token keyword">void</span> <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_BGOff</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 基础参数配置</span>
<span class="token keyword">void</span> <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写命令、字节</span>
<span class="token keyword">void</span> <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读数据</span>
<span class="token class-name">uint16_t</span> <span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读LCD设备ID</span>
<span class="token class-name">uint32_t</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置显示区域</span>
<span class="token keyword">void</span> <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> width<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 清屏</span>
<span class="token keyword">void</span> <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __LCD_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lcd-c">lcd.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lcd.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCD_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    <span class="token comment">/* LCD 复位和背光  通用推挽输出 MODE=11 CNF=00 */</span>
    <span class="token comment">// PG15 PB0</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE15<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF15<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化FSMC，将LCD显存接入FMSC Bank1 NOR/PSRAM-4</span>
    <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化LCD特定引脚</span>
    <span class="token function">LCD_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD硬件复位初始化（上电后需要初始化LCD）</span>
    <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启LCD背光</span>
    <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置一些LCD基本参数</span>
    <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拉低RST，初始化LCD</span>
    GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR15<span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR15<span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR0<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_BGOff</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR0<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1. 设置灰阶电压以调整TFT面板的伽马特性， 正校准。一般出厂就设置好了 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x4B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 2. 设置灰阶电压以调整TFT面板的伽马特性，负校准 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XE1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3.  Adjust Control 3 (F7h)  */</span>
    <span class="token comment">/*LCD_WriteCmd(0XF7);
   LCD_WriteData(0xA9);
   LCD_WriteData(0x51);
   LCD_WriteData(0x2C);
   LCD_WriteData(0x82);*/</span>
    <span class="token comment">/* DSI write DCS command, use loose packet RGB 666 */</span>

    <span class="token comment">/* 4. 电源控制1*/</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 正伽马电压 */</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 负伽马电压 */</span>

    <span class="token comment">/* 5. 电源控制2 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xC1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 6. VCOM控制 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XC5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 7. Frame Rate Control (In Normal Mode/Full Colors) (B1h) */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 8.  Display Inversion Control (B4h) （正负电压反转，减少电磁干扰）*/</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 9.  Display Function Control (B6h)  */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0xA2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 10. Entry Mode Set (B7h)  */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0xc6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 11. HS Lanes Control (BEh) */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xBE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 12.  Interface Pixel Format (3Ah) */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0x55 : 16 bits/pixel  */</span>

    <span class="token comment">/* 13. Sleep Out (11h) 关闭休眠模式 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 14. 设置屏幕方向和RGB */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 14. display on */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">*</span>LCD_ADDR_CMD <span class="token operator">=</span> cmd<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">*</span>LCD_ADDR_DATA <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token class-name">uint16_t</span> <span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>LCD_ADDR_DATA<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token class-name">uint32_t</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// dummy read</span>
    <span class="token class-name">uint32_t</span> lcdId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    lcdId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    lcdId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    lcdId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> lcdId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> width<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置列范围</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Start Column 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// End Column 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置行范围</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Start Page 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// End Page 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DISPLAY_W<span class="token punctuation">,</span> DISPLAY_H<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写内存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> DISPLAY_W <span class="token operator">*</span> DISPLAY_H<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-du-qu-lcd-id-amp-zhi-ding-yan-se-qing-ping">测试——读取LCD ID &amp; 指定颜色清屏</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lcd.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint32_t</span> lcdId <span class="token operator">=</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"lcdId = %#x"</span><span class="token punctuation">,</span> lcdId<span class="token punctuation">)</span>

    <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span>MAGENTA<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hui-zhi-ascii-zi-fu">绘制Ascii字符</h2>
<h3 id="hui-zhi-dan-ge-zi-fu">绘制单个字符</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210195945067.png" alt="image-20241210195945067"></p>
<blockquote>
<p>[!NOTE]</p>
<p>取模说明：从第一行开始向右每取8个点作为一个字节，如果最后不足8个点就补满8位。   取模顺序是从低到高 ，即第一个点作为最低位。如<code>*-------</code>取为<code>00000001</code>。</p>
<p>代码中使用的字模见附录。</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> ch<span class="token punctuation">,</span>
                          <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">// 字符在码标中的索引</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">12</span> <span class="token operator">||</span> height <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dotMatrix <span class="token operator">=</span>
            <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">12</span> <span class="token operator">?</span> ascii_1206<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">:</span> ascii_1608<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 生成的码表中，列编码采用逆序，因此逐次判断字节的低位</span>
            <span class="token class-name">uint8_t</span> colByte <span class="token operator">=</span> dotMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>colByte <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                colByte <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">24</span> <span class="token operator">||</span> height <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dotMatrix <span class="token operator">=</span>
            <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">12</span> <span class="token operator">?</span> ascii_2412<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">:</span> ascii_3216<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 列为12或16，对应两个字节,因此要循环的字节数为 (height * 2)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 生成的码表中，列编码采用逆序，因此逐次判断字节的低位</span>
            <span class="token class-name">uint8_t</span> colByte <span class="token operator">=</span> dotMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果宽度为24/2=12，则奇数字节只取低4位</span>
            <span class="token class-name">uint8_t</span> colCount <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">24</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                colCount <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> colCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>colByte <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                colByte <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint32_t</span> lcdId <span class="token operator">=</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"lcdId = %#x"</span><span class="token punctuation">,</span> lcdId<span class="token punctuation">)</span>

    <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"display done"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="hui-zhi-zi-fu-chuan">绘制字符串</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_DisplayAsciiStr</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> width <span class="token operator">=</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token operator">||</span> x <span class="token operator">+</span> width <span class="token operator">&gt;</span> DISPLAY_W<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            y <span class="token operator">+=</span> height<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                str<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> textColor<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">+=</span> width<span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">LCD_DisplayAsciiStr</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>
                    <span class="token string">"Hello World! All is well!\nEnjoy yourself!"</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span>
                    WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="hui-zhi-zhong-wen">绘制中文</h3>
<blockquote>
<p>[!NOTE]</p>
<p>代码中引用的字模请见附录。</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210195222774.png" alt="image-20241210195222774"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_DisplayChinese</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> index<span class="token punctuation">,</span>
                        <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> height<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes <span class="token operator">=</span> chineses<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> colByte <span class="token operator">=</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>colByte <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            colByte <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_DisplayChinese</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> RED<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="hui-zhi-tu-pian">绘制图片</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210200150934.png" alt="image-20241210200150934"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210200539162.png" alt="image-20241210200539162"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_DisplayImg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 像素240*240，每个像素使用16bit真彩格式</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">240</span> <span class="token operator">*</span> <span class="token number">240</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将相邻的两个字节组装为16bit真彩格式</span>
        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gImage_img<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> gImage_img<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">LCD_DisplayImg(50, 50);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/6c22ee3d8fdf9b3ff1540890307ffb0.jpg" alt="6c22ee3d8fdf9b3ff1540890307ffb0" style="zoom: 33%;">
<h2 id="hui-zhi-ji-he-tu-xing-dian-xian-ju-xing-yuan">绘制几何图形——点/线/矩形/圆</h2>
<h3 id="lcd-c-1">lcd.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> w <span class="token operator">*</span> w<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> x2<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y2<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                  <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">==</span> x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 斜率不存在</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> y1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> i<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">double</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> y1 <span class="token operator">-</span> k <span class="token operator">*</span> x1<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x <span class="token operator">=</span> x1<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> x2<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>k <span class="token operator">*</span> x <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> x2<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y2<span class="token punctuation">,</span>
                       <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                          <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 极坐标方程 x = x0 + rcosθ, y = y0 + rsinθ</span>
    <span class="token comment">// θ =&gt; [0, π/2], α =&gt; [0, 90°]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> deltaX <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token class-name">uint16_t</span> deltaY <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token comment">// 确定四个象限中对应的点</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawSolidCircle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> i<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawSolidCirclePlus</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> deltaX <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token class-name">uint16_t</span> deltaY <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token comment">// 通过直线来画圆</span>
        <span class="token comment">// 一二象限的点连线</span>
        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 三四象限的点连线</span>
        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 线段两端端点颜色（圆周颜色）</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 斜线</span>
<span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 垂线</span>
<span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 矩形</span>
<span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 空心圆</span>
<span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实心圆</span>
<span class="token comment">// LCD_DrawSolidCircle(100, 350, 50, 2, BLUE, RED);</span>
<span class="token function">LCD_DrawSolidCirclePlus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wan-zheng-shi-li-dai-ma">完整示例代码</h2>
<h3 id="fsmc-h-2">fsmc.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__FSMC_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__FSMC_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __FSMC_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fsmc-c-2">fsmc.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fsmc.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_RCC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启FSMC和GPIO时钟-DEFG</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_FSMCEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPDEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPEEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1 配置 A10 地址端口的输出模式 复用推挽输出CNF:10 50MHz速度 MODE:11*/</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE0<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF0_1<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF0_0<span class="token punctuation">;</span>

    <span class="token comment">/*
        2 数据端口 复用推挽输出
            在实际应用中，即使数据线被配置为输出模式，FSMC控制器仍然能够管理数据线的方向，使其在需要时成为输入线。
            这种自动切换是由FSMC控制器硬件管理的，不需要软件干预。
            因此，即使GPIO配置为复用推挽输出，FSMC依然可以实现读取操作。
    */</span>
    <span class="token comment">/* =============MODE=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span> GPIO_CRL_MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span> GPIO_CRH_MODE9 <span class="token operator">|</span> GPIO_CRH_MODE10 <span class="token operator">|</span>
                   GPIO_CRH_MODE14 <span class="token operator">|</span> GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span>
        <span class="token punctuation">(</span>GPIO_CRH_MODE8 <span class="token operator">|</span> GPIO_CRH_MODE9 <span class="token operator">|</span> GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11 <span class="token operator">|</span>
         GPIO_CRH_MODE12 <span class="token operator">|</span> GPIO_CRH_MODE13 <span class="token operator">|</span> GPIO_CRH_MODE14 <span class="token operator">|</span> GPIO_CRH_MODE15<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* =============CNF=============== */</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF0_1 <span class="token operator">|</span> GPIO_CRL_CNF1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF0_0 <span class="token operator">|</span> GPIO_CRL_CNF1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span> GPIO_CRH_CNF9_1 <span class="token operator">|</span> GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span> GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span> GPIO_CRH_CNF9_0 <span class="token operator">|</span> GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span> GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF7_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF7_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF8_1 <span class="token operator">|</span> GPIO_CRH_CNF9_1 <span class="token operator">|</span> GPIO_CRH_CNF10_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF11_1 <span class="token operator">|</span> GPIO_CRH_CNF12_1 <span class="token operator">|</span> GPIO_CRH_CNF13_1 <span class="token operator">|</span>
                   GPIO_CRH_CNF14_1 <span class="token operator">|</span> GPIO_CRH_CNF15_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOE<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF8_0 <span class="token operator">|</span> GPIO_CRH_CNF9_0 <span class="token operator">|</span> GPIO_CRH_CNF10_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF11_0 <span class="token operator">|</span> GPIO_CRH_CNF12_0 <span class="token operator">|</span> GPIO_CRH_CNF13_0 <span class="token operator">|</span>
                    GPIO_CRH_CNF14_0 <span class="token operator">|</span> GPIO_CRH_CNF15_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3 其他控制端口  复用推挽输出 */</span>
    <span class="token comment">// NOE NWE PD4 PD5</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_MODE4 <span class="token operator">|</span> GPIO_CRL_MODE5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRL_CNF4_1 <span class="token operator">|</span> GPIO_CRL_CNF5_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOD<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_CNF4_0 <span class="token operator">|</span> GPIO_CRL_CNF5_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// NE4 PG12</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE12<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF12_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF12_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_BCR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BCR4 =&gt; BTCR[6]</span>
    <span class="token comment">// 开启写使能，允许向SRAM写入数据</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR4_WREN<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器数据总线宽度为16</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR4_MWID<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR4_MWID_0<span class="token punctuation">;</span>
    <span class="token comment">// 配置存储器类型为SRAM</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR4_MTYP<span class="token punctuation">;</span>
    <span class="token comment">// 地址-数据复用使能：关闭</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BCR4_MUXEN<span class="token punctuation">;</span>
    <span class="token comment">// 使能存储器对应的Bank</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BCR4_MBKEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">FSMC_BTR_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BTR4 =&gt; BTCR[7]</span>
    <span class="token comment">// 地址访问/建立时间（HCLK数量）配置为0，实际为(0+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR4_ADDSET<span class="token punctuation">;</span>
    <span class="token comment">// 数据访问/建立时间配置为3 =&gt; 0011，实际为(3+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR4_DATAST<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BTR4_DATAST_0<span class="token punctuation">;</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FSMC_BTR4_DATAST_1<span class="token punctuation">;</span>
    <span class="token comment">// 总线读-写切换空闲时间配置为0 =&gt; (0+1)HCLK</span>
    FSMC_Bank1<span class="token operator">-&gt;</span>BTCR<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>FSMC_BTR4_BUSTURN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lcd-h-1">lcd.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LCD_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LCD_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fsmc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SRAM_BANK4</span> <span class="token expression"><span class="token number">0x6C000000</span></span></span>
<span class="token comment">// PA10为0：发送命令</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LCD_ADDR_CMD</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>SRAM_BANK4<span class="token punctuation">)</span></span></span>
<span class="token comment">// PA10为1：发送数据（SRAM数据总线宽度为16时，FSMC会将AHB地址线[25:1]&gt;&gt;1输入到SRAM，因此这里的bit12对应FSMC的PA10-bit11）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LCD_ADDR_DATA</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SRAM_BANK4 <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x01</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPLAY_W</span> <span class="token expression"><span class="token number">320</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPLAY_H</span> <span class="token expression"><span class="token number">480</span></span></span>

<span class="token comment">// 画笔颜色</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WHITE</span> <span class="token expression"><span class="token number">0xFFFF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLACK</span> <span class="token expression"><span class="token number">0x0000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLUE</span> <span class="token expression"><span class="token number">0x001F</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BRED</span> <span class="token expression"><span class="token number">0XF81F</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRED</span> <span class="token expression"><span class="token number">0XFFE0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GBLUE</span> <span class="token expression"><span class="token number">0X07FF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RED</span> <span class="token expression"><span class="token number">0xF800</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAGENTA</span> <span class="token expression"><span class="token number">0xF81F</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GREEN</span> <span class="token expression"><span class="token number">0x07E0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CYAN</span> <span class="token expression"><span class="token number">0x7FFF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">YELLOW</span> <span class="token expression"><span class="token number">0xFFE0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BROWN</span> <span class="token expression"><span class="token number">0XBC40</span> </span><span class="token comment">// 棕色</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BRRED</span> <span class="token expression"><span class="token number">0XFC07</span> </span><span class="token comment">// 棕红色</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRAY</span> <span class="token expression"><span class="token number">0X8430</span>  </span><span class="token comment">// 灰色</span></span>

<span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_BGOff</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint16_t</span> <span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint32_t</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> width<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> ch<span class="token punctuation">,</span>
                          <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayAsciiStr</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_DisplayChinese</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> index<span class="token punctuation">,</span>
                        <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayImg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> x2<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y2<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                  <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> x2<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y2<span class="token punctuation">,</span>
                       <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 空心圆</span>
<span class="token keyword">void</span> <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                          <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实心圆</span>
<span class="token keyword">void</span> <span class="token function">LCD_DrawSolidCircle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_DrawSolidCirclePlus</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                             <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __LCD_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lcd-c-2">lcd.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lcd.h"</span></span>
<span class="token comment">// #include "img.h"</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lcd_font.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCD_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPGEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    <span class="token comment">/* LCD 复位和背光  通用推挽输出 MODE=11 CNF=00 */</span>
    <span class="token comment">// PG15 PB0</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE15<span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF15<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化FSMC，将LCD显存接入FMSC Bank1 NOR/PSRAM-4</span>
    <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化LCD特定引脚</span>
    <span class="token function">LCD_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD硬件复位初始化（上电后需要初始化LCD）</span>
    <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启LCD背光</span>
    <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置一些LCD基本参数</span>
    <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拉低RST，初始化LCD</span>
    GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR15<span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOG<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR15<span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR0<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_BGOff</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR0<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1. 设置灰阶电压以调整TFT面板的伽马特性， 正校准。一般出厂就设置好了 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x4B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 2. 设置灰阶电压以调整TFT面板的伽马特性，负校准 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XE1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3.  Adjust Control 3 (F7h)  */</span>
    <span class="token comment">/*LCD_WriteCmd(0XF7);
   LCD_WriteData(0xA9);
   LCD_WriteData(0x51);
   LCD_WriteData(0x2C);
   LCD_WriteData(0x82);*/</span>
    <span class="token comment">/* DSI write DCS command, use loose packet RGB 666 */</span>

    <span class="token comment">/* 4. 电源控制1*/</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 正伽马电压 */</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 负伽马电压 */</span>

    <span class="token comment">/* 5. 电源控制2 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xC1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 6. VCOM控制 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XC5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 7. Frame Rate Control (In Normal Mode/Full Colors) (B1h) */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 8.  Display Inversion Control (B4h) （正负电压反转，减少电磁干扰）*/</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 9.  Display Function Control (B6h)  */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0xA2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 10. Entry Mode Set (B7h)  */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0xc6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 11. HS Lanes Control (BEh) */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xBE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 12.  Interface Pixel Format (3Ah) */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0x55 : 16 bits/pixel  */</span>

    <span class="token comment">/* 13. Sleep Out (11h) 关闭休眠模式 */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 14. 设置屏幕方向和RGB */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 14. display on */</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">*</span>LCD_ADDR_CMD <span class="token operator">=</span> cmd<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">*</span>LCD_ADDR_DATA <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token class-name">uint16_t</span> <span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>LCD_ADDR_DATA<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token class-name">uint32_t</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// dummy read</span>
    <span class="token class-name">uint32_t</span> lcdId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    lcdId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    lcdId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    lcdId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">LCD_ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> lcdId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> width<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置列范围</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Start Column 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// End Column 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置行范围</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Start Page 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// End Page 的高位字节、低位字节</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DISPLAY_W<span class="token punctuation">,</span> DISPLAY_H<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> DISPLAY_W <span class="token operator">*</span> DISPLAY_H<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> ch<span class="token punctuation">,</span>
                          <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">// 字符在码标中的索引</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">12</span> <span class="token operator">||</span> height <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dotMatrix <span class="token operator">=</span>
            <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">12</span> <span class="token operator">?</span> ascii_1206<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">:</span> ascii_1608<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 生成的码表中，列编码采用逆序，因此逐次判断字节的低位</span>
            <span class="token class-name">uint8_t</span> colByte <span class="token operator">=</span> dotMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>colByte <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                colByte <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">24</span> <span class="token operator">||</span> height <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dotMatrix <span class="token operator">=</span>
            <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">12</span> <span class="token operator">?</span> ascii_2412<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">:</span> ascii_3216<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 列为12或16，对应两个字节,因此要循环的字节数为 (height * 2)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 生成的码表中，列编码采用逆序，因此逐次判断字节的低位</span>
            <span class="token class-name">uint8_t</span> colByte <span class="token operator">=</span> dotMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果宽度为24/2=12，则奇数字节只取低4位</span>
            <span class="token class-name">uint8_t</span> colCount <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">24</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                colCount <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> colCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>colByte <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                colByte <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayAsciiStr</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> width <span class="token operator">=</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token operator">||</span> x <span class="token operator">+</span> width <span class="token operator">&gt;</span> DISPLAY_W<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            y <span class="token operator">+=</span> height<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                str<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> textColor<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">+=</span> width<span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayChinese</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> height<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> index<span class="token punctuation">,</span>
                        <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> height<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes <span class="token operator">=</span> chineses<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> colByte <span class="token operator">=</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>colByte <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            colByte <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DisplayImg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 像素240*240，每个像素使用16bit真彩格式</span>
    <span class="token comment">//     for (uint32_t i = 0; i &lt; 240 * 240 * 2; i += 2) {</span>
    <span class="token comment">//         // 将相邻的两个字节组装为16bit真彩格式</span>
    <span class="token comment">//         LCD_WriteData((gImage_img[i] &lt;&lt; 8) | gImage_img[i + 1]);</span>
    <span class="token comment">//     }</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_SetArea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写显存</span>
    <span class="token function">LCD_WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> w <span class="token operator">*</span> w<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> x2<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y2<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                  <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">==</span> x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 斜率不存在</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> y1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> i<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">double</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> y1 <span class="token operator">-</span> k <span class="token operator">*</span> x1<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x <span class="token operator">=</span> x1<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> x2<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>k <span class="token operator">*</span> x <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y1<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> x2<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y2<span class="token punctuation">,</span>
                       <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                          <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 极坐标方程 x = x0 + rcosθ, y = y0 + rsinθ</span>
    <span class="token comment">// θ =&gt; [0, π/2], α =&gt; [0, 90°]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> deltaX <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token class-name">uint16_t</span> deltaY <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token comment">// 确定四个象限中对应的点</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawSolidCircle</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> i<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCD_DrawSolidCirclePlus</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> r<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> w<span class="token punctuation">,</span>
                         <span class="token class-name">uint16_t</span> textColor<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> bgColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> deltaX <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token class-name">uint16_t</span> deltaY <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> a <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token comment">// 通过直线来画圆</span>
        <span class="token comment">// 一二象限的点连线</span>
        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 三四象限的点连线</span>
        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 线段两端端点颜色（圆周颜色）</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">-</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span>x <span class="token operator">-</span> deltaX<span class="token punctuation">,</span> y <span class="token operator">+</span> deltaY<span class="token punctuation">,</span> w<span class="token punctuation">,</span> textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-2">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lcd.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint32_t</span> lcdId <span class="token operator">=</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"lcdId = %#x"</span><span class="token punctuation">,</span> lcdId<span class="token punctuation">)</span>

    <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_DisplayAsciiStr</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>
                        <span class="token string">"Hello World! All is well!\nEnjoy yourself!"</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span>
                        WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_DisplayChinese</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> RED<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// LCD_DisplayImg(50, 50);</span>

    <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 斜线</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 垂线</span>
    <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 矩形</span>
    <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 空心圆</span>
    <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 实心圆</span>
    <span class="token comment">// LCD_DrawSolidCircle(100, 350, 50, 2, BLUE, RED);</span>
    <span class="token function">LCD_DrawSolidCirclePlus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"display done"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="zi-mo">字模</h3>
<ul>
<li>
<p>字符字模：<a href="https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_font.h">https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_font.h</a></p>
</li>
<li>
<p>图片字模：<a href="https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_img.h">https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_img.h</a></p>
</li>
</ul>
<h2 id="hal-ku-shi-xian-1">HAL库实现</h2>
<h3 id="fsmc-pei-zhi">FSMC配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210215152832.png" alt="image-20241210215152832"></p>
<h3 id="lcd-te-ding-yin-jiao-pei-zhi">LCD特定引脚配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210215244277.png" alt="image-20241210215244277"></p>
<h3 id="shi-li-dai-ma">示例代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化FSMC，将LCD显存接入FMSC Bank1 NOR/PSRAM-4</span>
    <span class="token function">FSMC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化LCD特定引脚</span>
    <span class="token function">LCD_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD硬件复位初始化（上电后需要初始化LCD）</span>
    <span class="token function">LCD_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启LCD背光</span>
    <span class="token function">LCD_BGOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置一些LCD基本参数</span>
    <span class="token function">LCD_RegConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_FSMC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> lcdId <span class="token operator">=</span> <span class="token function">LCD_ReadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lcdId = %#x\n"</span><span class="token punctuation">,</span> lcdId<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">LCD_ClearAll</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LCD_DisplayAsciiChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">LCD_DisplayAsciiStr</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>
                      <span class="token string">"Hello World! All is well!\nEnjoy yourself!"</span><span class="token punctuation">,</span> MAGENTA<span class="token punctuation">,</span>
                      WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LCD_DisplayChinese</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> RED<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// LCD_DisplayImg(50, 50);</span>

  <span class="token function">LCD_DrawPoint</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 斜线</span>
  <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 垂线</span>
  <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 矩形</span>
  <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 空心圆</span>
  <span class="token function">LCD_DrawHollowCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 实心圆</span>
  <span class="token comment">// LCD_DrawSolidCircle(100, 350, 50, 2, BLUE, RED);</span>
  <span class="token function">LCD_DrawSolidCirclePlus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"display done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="bian-yi-you-hua-ji-bie-dao-zhi-de-bug">编译优化级别导致的bug</h3>
<blockquote>
<p>[!WARNING]</p>
<p>CubeMX生成的MDK项目，编译器优化选项为<code>-O3</code>（最大程度优化），可能会导致程序被过度优化，可以调整为默认优化级别 <code>-O2</code>或不优化。</p>
<p>可以配合Keil的调试功能，单步调试确认FSMC相关的寄存器是否如期配置了，以及LCD初始化时 <code>LCD_RegConfig</code> 中的程序是否因编译器优化而没有执行。</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210215443940.png" alt="image-20241210215443940" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210222542846.png" alt="image-20241210222542846"></p>
<blockquote>
<p>[!NOTE]</p>
<p><a href="https://developer.arm.com/documentation/101407/0541/Dialogs/Project/Options/Compiler/Arm-C-C---Compiler">https://developer.arm.com/documentation/101407/0541/Dialogs/Project/Options/Compiler/Arm-C-C---Compiler</a></p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210221627343.png" alt="image-20241210221627343" style="zoom: 33%;">
<p>如上，有时编译器优化会认为重复调用同一函数是无效代码，从而将前面n-1的调用直接优化为不执行。</p>
<h1 id="yi-liu-wen-ti">遗留问题</h1>
<h2 id="fsmc-busturn-can-shu">FSMC BUSTURN参数</h2>
<h3 id="strong-1-is-62-wv-51216-bll-de-guan-jian-can-shu-strong"><strong>1. IS62WV51216BLL 的关键参数</strong></h3>
<p>查看 IS62WV51216BLL-55TLI 数据手册可知：</p>
<ul>
<li><strong>55ns</strong> 表示其最短的访问时间（Access Time）为 55ns。</li>
<li>这是片选有效到数据有效的时间。</li>
<li>对于 FSMC 配置，关键参数包括：
<ul>
<li><strong>Address Setup Time (tAS)</strong>：地址稳定到写/读使能的时间。</li>
<li><strong>Data Setup Time (tDS)</strong>：数据必须保持稳定的时间。</li>
<li><strong>Access Time (tACC)</strong>：从片选有效到数据有效的时间。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="strong-2-fsmc-de-xiang-guan-shi-xu-can-shu-strong"><strong>2. FSMC 的相关时序参数</strong></h3>
<p>FSMC 提供一系列寄存器用于配置与外部存储器的时序：</p>
<ul>
<li><strong>ADDSET</strong>（Address Setup Time）：地址信号建立到第一次时钟边沿的时间。</li>
<li><strong>DATAST</strong>（Data Setup Time）：数据稳定有效的时间。</li>
<li><strong>BUSRUN</strong>（Bus Turnaround Duration）：用于总线方向切换的时间。</li>
<li><strong>CLKDIV</strong>（Clock Divide Ratio）：外部存储器访问的时钟分频。</li>
<li><strong>ACCMOD</strong>（Access Mode）：访问模式，包括同步/异步。</li>
</ul>
<p>其中，<strong>BUSRUN</strong> 的作用是确保在读/写方向切换时，有足够的等待时间，避免总线争用。</p>
<hr>
<h3 id="strong-3-busrun-de-pei-zhi-si-lu-strong"><strong>3. BUSRUN 的配置思路</strong></h3>
<h4 id="strong-shi-yong-chang-jing-strong"><strong>使用场景</strong></h4>
<ul>
<li>BUSRUN 参数适用于以下场景：
<ol>
<li><strong>读/写切换</strong>：CPU 从写操作切换到读操作时，需要总线方向切换时间。</li>
<li><strong>多设备共享总线</strong>：如果多个设备共用 FSMC 的数据总线，切换时可能需要加入时间缓冲。</li>
</ol>
</li>
</ul>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/Snipaste_2024-12-09_21-28-42.png" alt="Snipaste_2024-12-09_21-28-42" style="zoom: 50%;">
<h4 id="strong-dian-xing-qing-kuang-strong"><strong>典型情况</strong></h4>
<p>对于 IS62WV51216BLL-55TLI：</p>
<ul>
<li>方向切换时间通常在 10ns 以下。</li>
<li>STM32F103 的 HCLK 假设为 72MHz（周期约为 13.88ns）。</li>
<li>因此，<strong>BUSRUN 通常设置为 1</strong>（对应 1 个 HCLK 周期）。</li>
</ul>
<h2 id="cube-mx-sheng-cheng-de-keil-bian-yi-you-hua-ji-bie-dao-zhi-cheng-xu-mei-you-bei-zhi-xing">CubeMX生成的Keil编译优化级别导致程序没有被执行</h2>
<blockquote>
<p>[!NOTE]</p>
<p><a href="https://developer.arm.com/documentation/101407/0541/Dialogs/Project/Options/Compiler/Arm-C-C---Compiler">https://developer.arm.com/documentation/101407/0541/Dialogs/Project/Options/Compiler/Arm-C-C---Compiler</a></p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210222959574.png" alt="image-20241210222959574"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241210223838925.png" alt="image-20241210223838925" style="zoom:50%;">
<h1 id="fu-lu">附录</h1>
<h2 id="lcd-zi-mo">LCD字模</h2>
<ul>
<li>
<p>字符字模：<a href="https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_font.h">https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_font.h</a></p>
</li>
<li>
<p>图片字模：<a href="https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_img.h">https://github.com/zanwen/Miscellaneous/blob/main/HexoBlog/lcd_img.h</a></p>
</li>
</ul>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>FSMC</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32系统时钟初始化源码解析（SPL库，STM32F103ZE）</title>
    <url>/2024/11/23/19447.html</url>
    <content><![CDATA[<h1 id="yi-bei-jing">一、背景</h1>
<h2 id="kai-fa-huan-jing">开发环境</h2>
<ul>
<li>STM32F103ZET6</li>
</ul>
<h2 id="yuan-li-tu">原理图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123160212385.png" alt="image-20241123160212385"></p>
<h3 id="hse-gao-su-wai-bu-jing-zhen-high-speed-external-oscillator">HSE-高速外部晶振High Speed External oscillator</h3>
<p>通过23、24号引脚接入8M的高速外部晶振。</p>
<h3 id="hsi-di-su-wai-bu-jing-zhen-low-speed-external-oscillator">HSI-低速外部晶振Low Speed External oscillator</h3>
<p>通过GPIO引脚PC14和PC15的复用接入32.768kHz低速外部晶振。</p>
<h2 id="yi-cube-de-tu-xing-hua-pei-zhi-wei-li-shuo-ming">以Cube的图形化配置为例说明</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123160112667.png" alt="image-20241123160112667"></p>
<p>MCU内置了两个RC震荡电路：</p>
<ul>
<li>HSI RC，High Speed Internal RC，8M高速内部RC震荡电路</li>
<li>LSI RC，Low Speed Internal RC，40kHz低速内部RC震荡电路</li>
</ul>
<h3 id="wei-shi-yao-mcu-nei-zhi-liao-huan-xu-yao-wai-jie-jing-zhen">为什么MCU内置了，还需要外接晶振</h3>
<ul>
<li>
<p>RC震荡电路容易受到其他电路干扰，导致信号不稳定，且精度远比晶振低。</p>
</li>
<li>
<p>由于MCU的微小封装，无法内嵌较大的晶振</p>
</li>
<li>
<p>将晶振的灵活选择权交给开发者</p>
</li>
</ul>
<h3 id="cube-pei-zhi-jie-xi">Cube配置解析</h3>
<p>外接晶振通过引脚接入MCU，但由于MCU的主频较高，一般将HSE通过PLL（锁相环，用来倍频）提高频率再作为系统时钟SYSCLK的来源。</p>
<p>图中 <mark>Mux</mark>是多路选择器 <mark>Multiplex</mark>的缩写，可以看到我们的8M HSE经过了1分频（即不分频），连接到了PLL Source Mux，通过这个多路选择器，我们使用HSE而不是HSI作为PLL的时钟来源（HSE在精度和稳定性上要比HSI好很多）。</p>
<p>接着经过了PLLMul，即锁相环倍频（PLL Multiply），将HSE的频率放大了9倍得到PLLCLK（8M * 9 = 72M），并连接到了System Clock Mux（即系统时钟多路选择器），这里我们当然选择稳定、高精度、高频的PLLCLK作为系统时钟。</p>
<h1 id="er-shi-zhong-chu-shi-hua-guo-cheng-yuan-ma-fen-xi-spl-ku">二、时钟初始化过程源码分析（SPL库）</h1>
<h2 id="shang-dian-fu-wei-hou-hui-fa-sheng-shi-yao">上电/复位后会发生什么？</h2>
<p>MCU启动的汇编文件 <code>startup.s</code>会被执行：</p>
<p><code>startup_stm32f10x_hd.s</code></p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Reset_Handler   PROC
                EXPORT  Reset_Handler             [WEAK]
                IMPORT  __main
                IMPORT  SystemInit
                LDR     R0, =SystemInit
                BLX     R0               
                LDR     R0, =__main
                BX      R0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><mark>执行SystemInit函数</mark></p>
<p>将 <code>SystemInit</code> 函数的入口地址加载到寄存器R0，通过 <code>BLX</code>跳转到其对应的代码段执行该函数，其中就包括了系统时钟的初始化过程。</p>
<p><mark>执行main函数</mark></p>
<p>将 <code>main</code> 函数的入口地址加载到寄存器R0，通过 <code>BX</code>跳转到其对应的代码段执行该函数，执行用户代码。</p>
<blockquote>
<p>该初始化顺序遵循ARM的CMSIS（Cortex Microcontroller Software Interface Standard）标准</p>
</blockquote>
<h2 id="system-init">SystemInit</h2>
<p><a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">STM32F107参考手册</a></p>
<h3 id="qi-yong-hsi-xian-rang-mcu-you-xin-tiao">启用HSI，先让MCU有心跳</h3>
<p>在<code>system_stm32f10x.c</code>中找到 <code>SystemInit</code>函数，条件编译显示灰色的部分可以忽略</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Set HSION bit */</span>
RCC<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x00000001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>先开启HSI高速内部时钟（时钟相当于MCU心跳，先让MCU有心跳能够工作，后面再将时钟源通过多路选择器切换为我们配置的HSE），将寄存器的第0位设置为1：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123165840693.png" alt="image-20241123165840693"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123165911410.png" alt="image-20241123165911410"></p>
<h3 id="fu-wei-shi-zhong-xiang-guan-ji-cun-qi-bi-te-wei">复位时钟相关寄存器比特位</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */</span>
RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0xF8FF0000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>该操作会将CFGR（时钟配置）寄存器如下比特位清零：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123170556835.png" alt="image-20241123170556835"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123170704055.png" alt="image-20241123170704055"></p>
<p>选择HSI（上一步已经开启了）作为系统时钟，其他的（HPRE, PPRE1, PPRE2, ADCPRE and MCO）分析过程类似。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Reset HSEON, CSSON and PLLON bits */</span>
RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0xFEF6FFFF</span><span class="token punctuation">;</span>

<span class="token comment">/* Reset HSEBYP bit */</span>
RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0xFFFBFFFF</span><span class="token punctuation">;</span>

<span class="token comment">/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */</span>
RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0xFF80FFFF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的，也是将一些位清零，将系统时钟初始化为仅由HSI作为时钟源的初始状态</p>
<h3 id="set-sys-clock-she-zhi-xi-tong-shi-zhong">SetSysClock设置系统时钟</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Enable HSE */</span>    
RCC<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_CR_HSEON<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">/* Wait till HSE is ready and if Time out is reached exit */</span>
<span class="token keyword">do</span>
<span class="token punctuation">{</span>
  HSEStatus <span class="token operator">=</span> RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;</span> RCC_CR_HSERDY<span class="token punctuation">;</span>
  StartUpCounter<span class="token operator">++</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HSEStatus <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>StartUpCounter <span class="token operator">!=</span> HSE_STARTUP_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里开启了HSE外部高速时钟，并等待HSE的状态转变为READY（由硬件置位）。</p>
<h3 id="xi-tong-shi-zhong-shu">系统时钟树</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* HCLK = SYSCLK */</span>
RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_CFGR_HPRE_DIV1<span class="token punctuation">;</span>
  
<span class="token comment">/* PCLK2 = HCLK */</span>
RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_CFGR_PPRE2_DIV1<span class="token punctuation">;</span>

<span class="token comment">/* PCLK1 = HCLK */</span>
RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_CFGR_PPRE1_DIV2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将系统时钟作为AHB和APB2的时钟源（对应HCLK和PCLK2），将系统时钟2分频，作为APB1的时钟源（对应PCLK2）。</p>
<blockquote>
<p>AHB挂载了Cortex核、DMA等主动单元</p>
<p>APB2挂载了GPIO、USRAT1、ADC等需要高速率时钟的单元</p>
<p>APB1则挂载了TIMER、I2C等不需要那么高频的单元</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241123172121666.png" alt="image-20241123172121666" style="zoom: 50%;">
<h3 id="pll-bei-pin">PLL倍频</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>RCC_CFGR_PLLSRC <span class="token operator">|</span> RCC_CFGR_PLLXTPRE <span class="token operator">|</span>
                                        RCC_CFGR_PLLMULL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>RCC_CFGR_PLLSRC_HSE <span class="token operator">|</span> RCC_CFGR_PLLMULL9<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>将PLL时钟来源RCC_CFGR_PLLSRC、HSE进入PLL后的分频RCC_CFGR_PLLXTPRE、PLL倍频系数RCC_CFGR_PLLMULL清零；</li>
<li>选择PLL时钟来源为HSE（RCC_CFGR_PLLSRC_HSE），倍频系数为9（RCC_CFGR_PLLMULL9）</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Enable PLL */</span>
    RCC<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> RCC_CR_PLLON<span class="token punctuation">;</span>

    <span class="token comment">/* Wait till PLL is ready */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;</span> RCC_CR_PLLRDY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动PLL锁相环，并等待它稳定。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Select PLL as system clock source */</span>
   RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>RCC_CFGR_SW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_CFGR_SW_PLL<span class="token punctuation">;</span>    

   <span class="token comment">/* Wait till PLL is used as system clock source */</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_CFGR_SWS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x08</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过系统时钟的多路选择器将PLL选择为系统时钟源，并等待此切换完成。</p>
]]></content>
      <categories>
        <category>STM32</category>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>SPL</tag>
        <tag>STM32F103ZE</tag>
        <tag>时钟</tag>
      </tags>
  </entry>
  <entry>
    <title>UART接收缓冲区溢出异常（HAL_UART_ERROR_ORE）问题记录</title>
    <url>/2024/11/12/13750.html</url>
    <content><![CDATA[<h1 id="wen-ti-bei-jing">问题背景</h1>
<h2 id="kai-fa-huan-jing">开发环境</h2>
<ul>
<li>硬件：GD32F407VET6开发版</li>
<li>IDE：STM32CubeMX + Clion + ARM GNU</li>
<li>烧录：OpenOCD</li>
</ul>
<h2 id="shi-yan-mu-biao">实验目标</h2>
<p>使用Cube配置串口USART1及其中断，引脚复用PA9/PA10，通过使能接收中断 <code>Receive_IT</code>，实现接收7字节时，在中断回调中处理该7个字节数据（简单回传，即echo），并再次开启接收中断，从而实现不断接收7字节、回传7字节的功能。</p>
<h2 id="yu-dao-wen-ti">遇到问题</h2>
<p>发送字节数为7时，能够正常echo；但是不为7时，本来期望是单次发送字节数：</p>
<ul>
<li>大于7字节时，应该也能每次触发中断，只是多余的字节数被丢弃了而已</li>
<li>少于7字节时（例如5），则通过再次发送也能触发中断</li>
</ul>
<p>但实验过程中发现这两种情况下，会发送echo了一两次之后，后面无论发送多少数据都无法再echo的情况</p>
<h1 id="qing-jing-zai-xian">情景再现</h1>
<h2 id="cube-pei-zhi">Cube配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112212649840.png" alt="image-20241112212649840"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112212742297.png" alt="image-20241112212742297"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112212813159.png" alt="image-20241112212813159"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112212840656.png" alt="image-20241112212840656"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112212935188.png" alt="image-20241112212935188"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112212959621.png" alt="image-20241112212959621"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112213059038.png" alt="image-20241112213059038"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112213254243.png" alt="image-20241112213254243"></p>
<h2 id="dao-ru-clion">导入Clion</h2>
<h3 id="bian-yi-pei-zhi-jiao-cha-bian-yi">编译配置-交叉编译</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112213601046.png" alt="image-20241112213601046"></p>
<h3 id="cmake-pei-zhi">Cmake配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112213656961.png" alt="image-20241112213656961"></p>
<h3 id="open-ocd-shao-lu-pei-zhi">OpenOCD烧录配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241112213740944.png" alt="image-20241112213740944"></p>
<p><code>daplink.cfg</code>：</p>
<pre class="line-numbers language-none"><code class="language-none"># choose st-link/j-link/dap-link etc.
adapter driver cmsis-dap
transport select swd

# 0x10000 = 64K Flash Size
# set FLASH_SIZE 0x20000

# 512KB Flash
set FLASH_SIZE 0x80000

source [find target/stm32f4x.cfg]

# download speed = 10MHz
# adapter speed 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="dai-ma-liu-cheng">代码流程</h2>
<ul>
<li>上电后启用接收中断</li>
<li>在接收完毕回调中echo，并再次启用接收中断</li>
</ul>
<p><code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 0 */</span>
<span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 0 */</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">/* USER CODE BEGIN 1 */</span>
    <span class="token function">__HAL_RCC_HSI_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__HAL_RCC_SYSCLK_CONFIG</span><span class="token punctuation">(</span>RCC_SYSCLKSOURCE_HSI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* USER CODE END 1 */</span>

    <span class="token comment">/* MCU Configuration--------------------------------------------------------*/</span>

    <span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
    <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* USER CODE BEGIN Init */</span>

    <span class="token comment">/* USER CODE END Init */</span>

    <span class="token comment">/* Configure the system clock */</span>
    <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* USER CODE BEGIN SysInit */</span>

    <span class="token comment">/* USER CODE END SysInit */</span>

    <span class="token comment">/* Initialize all configured peripherals */</span>
    <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* USER CODE BEGIN 2 */</span>
    <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* USER CODE END 2 */</span>

    <span class="token comment">/* Infinite loop */</span>
    <span class="token comment">/* USER CODE BEGIN WHILE */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        HAL_UART_Transmit_IT(&amp;huart1, (uint8_t *)"Hello, World!\r\n", 14);</span>
        <span class="token comment">//        HAL_Delay(1000);</span>
        <span class="token comment">/* USER CODE END WHILE */</span>

        <span class="token comment">/* USER CODE BEGIN 3 */</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* USER CODE END 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="yuan-ma-fen-xi">源码分析</h1>
<h2 id="qi-yong-jie-shou-zhong-duan-hal-uart-receive-it">启用接收中断HAL_UART_Receive_IT</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>HAL_UART_Receive_IT -&gt; UART_Start_Receive_IT</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">huart<span class="token operator">-&gt;</span>pRxBuffPtr <span class="token operator">=</span> pData<span class="token punctuation">;</span>
huart<span class="token operator">-&gt;</span>RxXferSize <span class="token operator">=</span> Size<span class="token punctuation">;</span>
huart<span class="token operator">-&gt;</span>RxXferCount <span class="token operator">=</span> Size<span class="token punctuation">;</span>

huart<span class="token operator">-&gt;</span>ErrorCode <span class="token operator">=</span> HAL_UART_ERROR_NONE<span class="token punctuation">;</span>
huart<span class="token operator">-&gt;</span>RxState <span class="token operator">=</span> HAL_UART_STATE_BUSY_RX<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
<span class="token comment">/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */</span>
<span class="token function">__HAL_UART_ENABLE_IT</span><span class="token punctuation">(</span>huart<span class="token punctuation">,</span> UART_IT_ERR<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Enable the UART Data Register not empty Interrupt */</span>
<span class="token function">__HAL_UART_ENABLE_IT</span><span class="token punctuation">(</span>huart<span class="token punctuation">,</span> UART_IT_RXNE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>pRxBuffPtr</code> ：<strong>保存我们传入的buf指针</strong></li>
<li><code>RxXferSize</code> ：<strong>保存我们传入的buf大小</strong></li>
<li><code>RxXferCount</code>： <strong>初始化待接收数据数量</strong></li>
<li><code>ErrorCode</code>：初始化错误码为 no error</li>
<li><code>RxState</code>：<strong>标识UART处于接收状态（Data Reception process is ongoing）</strong></li>
<li>开启UART异常中断
<ul>
<li>帧异常（Frame error）</li>
<li>噪声异常（noise error）</li>
<li><em><strong>接收缓冲区溢出异常（overrun error）</strong></em></li>
</ul>
</li>
<li>开启接收寄存器非空中断（Enable the UART Data Register not empty Interrupt）</li>
</ul>
<h2 id="uart-zhong-duan-xiang-liang-biao">UART中断向量表</h2>
<p><em><strong>startup_stm32f407vetx.s</strong></em></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>word     USART1_IRQHandler                 <span class="token comment">/* USART1                       */</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em><strong>stm32f4xx_it.c</strong></em></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN USART1_IRQn 0 */</span>

  <span class="token comment">/* USER CODE END USART1_IRQn 0 */</span>
  <span class="token function">HAL_UART_IRQHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN USART1_IRQn 1 */</span>

  <span class="token comment">/* USER CODE END USART1_IRQn 1 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="shu-ju-jie-shou-chu-li">数据接收处理</h2>
<p><em><strong>stm32f4xx_it.c</strong></em></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_UART_IRQHandler</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* If no error occurs */</span>
    errorflags <span class="token operator">=</span> <span class="token punctuation">(</span>isrflags <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>USART_SR_PE <span class="token operator">|</span> USART_SR_FE <span class="token operator">|</span> USART_SR_ORE <span class="token operator">|</span> USART_SR_NE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorflags <span class="token operator">==</span> RESET<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* UART in mode Receiver -------------------------------------------------*/</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>isrflags <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cr1its <span class="token operator">&amp;</span> USART_CR1_RXNEIE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">UART_Receive_IT</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行接收数据逻辑（UART_Receive_IT）的前置条件：</p>
<ul>
<li>没有UART相关的异常（errorflags）</li>
<li>接收寄存器非空（USART_SR_RXNE）</li>
<li>接收寄存器非空中断使能是开启的（USART_CR1_RXNEIE）</li>
</ul>
<h2 id="zhu-zi-jie-shou-shu-ju-data-register">逐字接收数据（Data Register）</h2>
<p><em><strong>stm32f4xx_hal_uart.c/UART_Receive_IT</strong></em></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Check that a Rx process is ongoing */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>huart<span class="token operator">-&gt;</span>RxState <span class="token operator">==</span> HAL_UART_STATE_BUSY_RX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">*</span>pdata8bits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>huart<span class="token operator">-&gt;</span>Instance<span class="token operator">-&gt;</span>DR <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span> <span class="token number">0x00FF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	huart<span class="token operator">-&gt;</span>pRxBuffPtr <span class="token operator">+=</span> <span class="token number">1U</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>huart<span class="token operator">-&gt;</span>RxXferCount <span class="token operator">==</span> <span class="token number">0U</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*Call legacy weak Rx complete callback*/</span>
		<span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>判断UART是不是处于接收进程中
<ul>
<li>我们之前调用过 <code>HAL_UART_Receive_IT</code>，里面会置位这个状态 <code>huart-&gt;RxState = HAL_UART_STATE_BUSY_RX</code></li>
</ul>
</li>
<li>从DR（UART数据寄存器）中读取一个字节到用户自定义缓冲区中（我们调用 <code>HAL_UART_Receive_IT</code> 时传入过一个7字节的<code>buf</code>）</li>
<li>递减剩余待接收数据数量 <code>huart-&gt;RxXferCount</code>（之前被初始化为7）
<ul>
<li>如果递减为0，则说明接收的字节数填满了用户指定缓冲区大小</li>
<li>然后调用 <code>HAL_UART_RxCpltCallback</code>，这是一个 <code>weak</code>函数（默认是一个空实现），用户可以声明一个对应的非 <code>weak</code>版以实现回调处理。这个理念是经典的<strong>hook钩子函数</strong>。</li>
</ul>
</li>
</ul>
<h2 id="zhong-xie-huan-chong-qu-jie-shou-wan-bi-hui-diao">重写缓冲区接收完毕回调</h2>
<p>原型：</p>
<p><em><strong>stm32f4xx_hal_uart.c</strong></em></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__weak <span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Prevent unused argument(s) compilation warning */</span>
    <span class="token function">UNUSED</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxCpltCallback could be implemented in the user file
     */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重写：</p>
<p><em><strong>main.c</strong></em></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 0 */</span>
<span class="token class-name">uint8_t</span> rxbuf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> rxbuf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>将缓冲区7字节数据通过UART TX发送，采用轮询方式（每发一个字节轮询发送状态），超时时间100ms</li>
<li>重新开启接收中断，以实现下一次的echo</li>
</ul>
<h2 id="ding-chang-7-zi-jie-echo-ce-shi">定长7字节echo测试</h2>
<p>至此，定长7字节数据echo功能就实现了</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241113084959956.png" alt="image-20241113084959956"></p>
<h2 id="chao-7-zi-jie-echo-ce-shi">超7字节echo测试</h2>
<p><img src="C:/Users/86157/AppData/Roaming/Typora/typora-user-images/image-20241113085040298.png" alt="image-20241113085040298"></p>
<p>为什么超过我们指定的缓冲区大小（<code>HAL_UART_Transmit</code>的入参 <code>Size</code>）后，功能就不整行了呢？</p>
<h2 id="uart-zhong-duan-isr-yi-chang-liu-cheng">UART中断ISR-异常流程</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_UART_IRQHandler</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* If no error occurs */</span>
    errorflags <span class="token operator">=</span> <span class="token punctuation">(</span>isrflags <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>USART_SR_PE <span class="token operator">|</span> USART_SR_FE <span class="token operator">|</span> USART_SR_ORE <span class="token operator">|</span> USART_SR_NE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorflags <span class="token operator">==</span> RESET<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">UART_Receive_IT</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
     
     <span class="token comment">/* If some errors occur */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errorflags <span class="token operator">!=</span> RESET<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cr3its <span class="token operator">&amp;</span> USART_CR3_EIE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>
                                  <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cr1its <span class="token operator">&amp;</span> <span class="token punctuation">(</span>USART_CR1_RXNEIE <span class="token operator">|</span> USART_CR1_PEIE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* UART Over-Run interrupt occurred
         huart-&gt;ErrorCode |= HAL_UART_ERROR_ORE;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>没有异常时，会执行 <code>UART_Receive_IT</code>逐字接收数据并在填满缓冲区后触发接收完毕回调 <code>HAL_UART_RxCpltCallback</code></li>
<li>但是当我们发送8字节时，会触发UART的接收溢出错误，继而转向异常处理流程</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">/* Call UART Error Call back function if need be --------------------------*/</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>huart<span class="token operator">-&gt;</span>ErrorCode <span class="token operator">!=</span> HAL_UART_ERROR_NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">/*Call legacy weak error callback*/</span>
    <span class="token function">HAL_UART_ErrorCallback</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为异常处理流程不会执行我们自定义的 <code>HAL_UART_RxCpltCallback</code>，也就没有重新开启接收中断 <code>HAL_UART_RxCpltCallback</code>，所以就出现了发送8字节时，后续没有回传的现象：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241113085040298.png" alt="image-20241113085040298"></p>
<h1 id="si-kao-yi-liu-wen-ti">思考/遗留问题</h1>
<h2 id="usart-sr-ore-shi-ru-he-bei-she-zhi-de">USART_SR_ORE是如何被设置的</h2>
<p>为什么发送8字节时会触发USART_SR_ORE错误？</p>
]]></content>
      <categories>
        <category>STM32</category>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>Clion</tag>
        <tag>GD32</tag>
        <tag>HAL</tag>
        <tag>UART</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/12/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>专职搬运工DMA(STM32F103ZE)</title>
    <url>/2024/12/06/62380.html</url>
    <content><![CDATA[<h1 id="dma-jie-shao">DMA介绍</h1>
<p>直接存储器存取（direct memory access，DMA）用来提供在<mark>外设和存储器之间</mark>或者<mark>存储器和存储器之间</mark>的高速数据传输。无须CPU干预，数据可以通过DMA快速地移动，这就节省了CPU的资源来做其他操作。</p>
<p>2个DMA控制器有12个通道（DMA1有7个通道，DMA2有5个通道），每个通道专门用来管理来自于一个或多个外设对存储器访问的请求。还有一个仲裁器来协调各个DMA请求的优先权。</p>
<p>DMA控制器和Cortex™-M3核心共享系统数据总线，执行直接存储器数据传输。当CPU和DMA同时访问相同的目标（RAM或外设）时，DMA请求会暂停CPU访问系统总线达若干个周期，总线仲裁器执行循环调度，以保证CPU至少可以得到一半的系统总线（存储器或外设）带宽。</p>
<p>要注意的是DMA2只存在于大容量产品和互联型产品中。</p>
<h2 id="dma-kuang-tu">DMA框图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206225250686.png" alt="image-20241206225250686"></p>
<h2 id="dma-qing-qiu">DMA请求</h2>
<p>如果外设要想通过DMA来传输数据，必须先给DMA控制器发送DMA请求，DMA控制器收到请求信号之后，控制器会给外设一个应答信号，当外设得到控制器的应答信号后，外设会立即释放它的请求。</p>
<p>DMA有DMA1和DMA2两个控制器，DMA1有7个通道，DMA2有5个通道，不同DMA控制器的通道对应着不同的外设请求，这决定了我们在软件编程上该怎么设置。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206225359841.png" alt="image-20241206225359841"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/Snipaste_2024-12-06_22-54-12.png" alt=""></p>
<h2 id="dma-tong-dao">DMA通道</h2>
<p>DMA具有12个独立可编程的通道，其中 DMA1有7个通道，DMA2有5个通道，每个通道对应不同的外设的DMA请求。虽然每个通道可以接收多个外设的请求，但是<strong>同一时间只能接收一个</strong>，不能同时接收多个。</p>
<h2 id="zhong-cai-qi">仲裁器</h2>
<p>当发生多个DMA通道请求时，就意味着有先后响应处理的顺序问题，这个就由仲裁器管理。仲裁器管理DMA通道请求分为两个阶段。</p>
<p>第一阶段属于软件阶段，可以在DMA_CCRx寄存器中设置，有4个等级：非常高、高、中和低四个优先级。</p>
<p>第二阶段属于硬件阶段，如果两个或以上的DMA通道请求设置的优先级一样，则他们优先级取决于通道编号，编号越低优先权越高，比如通道 1 高于通道 2。</p>
<p>在大容量产品和互联型产品中，DMA1控制器拥有高于DMA2控制器的优先级。</p>
<h2 id="chuan-shu-fang-xiang">传输方向</h2>
<p>存储器到外设，外设到存储器，存储器到存储器。这里的存储器指的是ROM和RAM。注意DMA没有办法把数据从RAM传输到ROM（flash）。</p>
<h1 id="shi-yan-rom-dao-ram">实验-ROM到RAM</h1>
<h2 id="xu-qiu">需求</h2>
<p>使用寄存器操作把ROM中的数据通过DMA传输到RAM，然后把数据通过printf发送到串口验证是否正确。</p>
<p>DMA传输不涉及外设，所以通道随便选。我们选DMA1的1通道。</p>
<h2 id="ji-cun-qi-fen-xi">寄存器分析</h2>
<h3 id="rcc-shi-zhong">RCC时钟</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206230728038.png" alt="image-20241206230728038"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206230802590.png" alt="image-20241206230802590"></p>
<h3 id="chuan-shu-fang-xiang-1">传输方向</h3>
<p><img src="C:%5CUsers%5C86157%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241206231014436.png" alt="image-20241206231014436"></p>
<blockquote>
<p>[!NOTE]</p>
<p>可以将ROM当做外设</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206231212616.png" alt="image-20241206231212616"></p>
<h3 id="yuan-mu-biao-de-ji-di-zhi">源/目标的基地址</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206232727151.png" alt="image-20241206232727151"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206232751481.png" alt="image-20241206232751481"></p>
<h3 id="chuan-shu-shu-ju-de-kuan-du">传输数据的宽度</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206231527504.png" alt="image-20241206231527504"></p>
<h3 id="wai-she-he-nei-cun-di-zhi-shi-fou-zi-zeng">外设和内存地址是否自增</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206231649649.png" alt="image-20241206231649649" style="zoom:50%;">
<h3 id="chuan-shu-shu-ju-de-chang-du">传输数据的长度</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206232018096.png" alt="image-20241206232018096"></p>
<h3 id="chuan-shu-zhong-duan-shi-neng">传输中断使能</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206232112172.png" alt="image-20241206232112172"></p>
<h3 id="tong-dao-chuan-shu-shi-neng">通道传输使能</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206232831121.png" alt="image-20241206232831121"></p>
<h3 id="zhong-duan-zhuang-tai-r-amp-zhong-duan-biao-zhi-qing-chu-w">中断状态® &amp; 中断标志清除(w)</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206233352731.png" alt="image-20241206233352731"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206233342185.png" alt="image-20241206233342185"></p>
<h2 id="shi-li-dai-ma">示例代码</h2>
<h3 id="dma-1-h">dma1.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__DMA1_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__DMA1_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">DMA1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DMA1_Transmit</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> srcAddr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> destAddr<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> byteSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DMA1_CH1_TransmitCompleteCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __DMA1_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="dma-1-c">dma1.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dma1.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">DMA1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使能AHB时钟</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_DMA1EN<span class="token punctuation">;</span>

    <span class="token comment">// 配置DMA通道（使用内存到内存模式时，DMA所有通道都可以选择，这里以通道1为例）</span>
    <span class="token comment">// 传输模式：内存到内存</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_MEM2MEM<span class="token punctuation">;</span>
    <span class="token comment">// 传输方向：从外设读取数据（内存到内存模式下，提供数据的内存可以当做外设）</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_DIR<span class="token punctuation">;</span>
    <span class="token comment">// 数据宽度，统一为8字节</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_PSIZE<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_MSIZE<span class="token punctuation">;</span>
    <span class="token comment">// 地址自动递增</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_PINC<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_MINC<span class="token punctuation">;</span>

    <span class="token comment">// 使能传输完成中断 Transmit Complete Interrupt Enable</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_TCIE<span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>DMA1_Channel1_IRQn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>DMA1_Channel1_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DMA1_Transmit</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> srcAddr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> destAddr<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> byteSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 外设地址（内存到内存模式下，为内存中源数据的基地址）</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CPAR <span class="token operator">=</span> srcAddr<span class="token punctuation">;</span>
    <span class="token comment">// 内存地址（内存到内存模式下，为内存中存放数据的目标地址）</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CMAR <span class="token operator">=</span> destAddr<span class="token punctuation">;</span>
    <span class="token comment">// 指定要传输的数据数量</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CNDTR <span class="token operator">=</span> byteSize<span class="token punctuation">;</span>

    <span class="token comment">// 使能通道，开始传输</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_EN<span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"DMA start"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DMA1_Channel1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"DMA1_Channel1_IRQHandler"</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断是否为传输完成事件对应的中断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DMA1<span class="token operator">-&gt;</span>ISR <span class="token operator">&amp;</span> DMA_ISR_TCIF1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清除中断标志</span>
        DMA1<span class="token operator">-&gt;</span>IFCR <span class="token operator">|=</span> DMA_IFCR_CTCIF1<span class="token punctuation">;</span>
        <span class="token function">DMA1_CH1_TransmitCompleteCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭DMA通道</span>
        DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_EN<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">DMA1_CH1_TransmitCompleteCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dma1.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token class-name">uint8_t</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> dest<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DMA1_CH1_TransmitCompleteCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG_DUMP</span><span class="token punctuation">(</span><span class="token string">"dest data =&gt; "</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DMA1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"src address =&gt; %p, dest address =&gt; %p"</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DMA1_Transmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>dest<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="rom-amp-ram-di-zhi-yan-zheng">ROM &amp; RAM地址验证</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207104428811.png" alt="image-20241207104428811"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207104440939.png" alt="image-20241207104440939"></p>
<h2 id="hal-ku-shi-xian">HAL库实现</h2>
<h3 id="cube-pei-zhi">Cube配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207110716672.png" alt="image-20241207110716672"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207110804672.png" alt="image-20241207110804672"></p>
<h3 id="zhu-ce-chuan-shu-wan-cheng-hui-diao-amp-zhong-duan-fang-shi-kai-qi-dma-chuan-shu">注册传输完成回调 &amp; 中断方式开启DMA传输</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN PV */</span>
<span class="token keyword">const</span> <span class="token class-name">uint8_t</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> dest<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END PV */</span>

<span class="token comment">/* Private function prototypes -----------------------------------------------*/</span>
<span class="token keyword">void</span> <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN PFP */</span>
<span class="token keyword">void</span> <span class="token function">DMA_XferCpltCallback</span><span class="token punctuation">(</span>DMA_HandleTypeDef <span class="token operator">*</span>_hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END PFP */</span>


<span class="token comment">/* USER CODE BEGIN 4 */</span>
<span class="token keyword">void</span> <span class="token function">DMA_XferCpltCallback</span><span class="token punctuation">(</span>DMA_HandleTypeDef <span class="token operator">*</span>_hdma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_DMA_Abort_IT</span><span class="token punctuation">(</span>_hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_DMA_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
<span class="token function">HAL_DMA_RegisterCallback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hdma_memtomem_dma1_channel1<span class="token punctuation">,</span>
                         HAL_DMA_XFER_CPLT_CB_ID<span class="token punctuation">,</span> DMA_XferCpltCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"src =&gt; %p, dest =&gt; %p\n"</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">HAL_DMA_Start_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hdma_memtomem_dma1_channel1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>src<span class="token punctuation">,</span>
                 <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>dest<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="shi-yan-ram-dao-uart">实验-RAM到UART</h1>
<h2 id="wai-she-te-ding-dma-tong-dao">外设特定DMA通道</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207114408798.png" alt="image-20241207114408798"></p>
<h2 id="wai-she-shi-neng-dma-mo-shi">外设使能DMA模式</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207114541503.png" alt="image-20241207114541503"></p>
<h2 id="shi-li-dai-ma-1">示例代码</h2>
<h3 id="dma-1-ch-4">DMA1_CH4</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dma1.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">DMA1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使能AHB时钟</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_DMA1EN<span class="token punctuation">;</span>

    <span class="token comment">// 配置DMA通道（使用内存到内存模式时，DMA所有通道都可以选择，这里以通道1为例）</span>
    <span class="token comment">// 传输方向：从内存读，发送到外设uart</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR4_DIR<span class="token punctuation">;</span>
    <span class="token comment">// 数据宽度，统一为8字节</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR4_PSIZE<span class="token punctuation">;</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR4_MSIZE<span class="token punctuation">;</span>
    <span class="token comment">// 内存地址自增，UART缓冲区地址不自增</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR4_MINC<span class="token punctuation">;</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR4_PINC<span class="token punctuation">;</span>

    <span class="token comment">// 如果开启循环传输模式，那么传输完成中断中不要停止DMA通道</span>
    <span class="token comment">//DMA1_Channel4-&gt;CCR |= DMA_CCR4_CIRC;</span>

    <span class="token comment">// 使能传输完成中断 Transmit Complete Interrupt Enable</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR4_TCIE<span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>DMA1_Channel4_IRQn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>DMA1_Channel4_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DMA1_Transmit</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> srcAddr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> destAddr<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> byteSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CMAR <span class="token operator">=</span> srcAddr<span class="token punctuation">;</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CPAR <span class="token operator">=</span> destAddr<span class="token punctuation">;</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CNDTR <span class="token operator">=</span> byteSize<span class="token punctuation">;</span>

    <span class="token comment">// 使能通道，开始传输</span>
    DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR4_EN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DMA1_Channel4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否为传输完成事件对应的中断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DMA1<span class="token operator">-&gt;</span>ISR <span class="token operator">&amp;</span> DMA_ISR_TCIF4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清除中断标志</span>
        DMA1<span class="token operator">-&gt;</span>IFCR <span class="token operator">|=</span> DMA_IFCR_CTCIF4<span class="token punctuation">;</span>
        <span class="token comment">// 关闭DMA通道</span>
        DMA1_Channel4<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR4_EN<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="uart-shi-neng-dma-fa-song">UART使能DMA发送</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 发送数据使能DMA</span>
USART1<span class="token operator">-&gt;</span>CR3 <span class="token operator">|=</span> USART_CR3_DMAT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="main">main</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dma1.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token class-name">uint8_t</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DMA1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">DMA1_Transmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hal-ku-shi-xian-1">HAL库实现</h2>
<h3 id="wai-she-xia-de-dma-she-zhi">外设下的DMA设置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207121451388.png" alt="image-20241207121451388"></p>
<h3 id="yi-dma-fang-shi-qu-dong-wai-she">以DMA方式驱动外设</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_DMA_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">HAL_UART_Transmit_DMA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="yuan-ma-fen-xi">源码分析</h3>
<ul>
<li><code>MX_USART1_UART_Init</code>：DMA初始化：<code>HAL_UART_MspInit</code></li>
<li><code>HAL_UART_Transmit_DMA</code>：调用 <code>HAL_DMA_Start_IT</code></li>
</ul>
<h1 id="xun-huan-chuan-shu-mo-shi">循环传输模式</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207120044568.png" alt="image-20241207120044568"></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>DMA</tag>
      </tags>
  </entry>
  <entry>
    <title>从按键控制LED开始深入理解外部中断（基于STM32F103ZE）</title>
    <url>/2024/11/27/59863.html</url>
    <content><![CDATA[<h1 id="qian-yan">前言</h1>
<h2 id="can-kao-shou-ce">参考手册</h2>
<p><a href="https://www.st.com.cn/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">STM32F101xx, STM32F102xx, STM32F103xx, STM32F105xx and STM32F107xx advanced Arm®-based 32-bit MCUs</a></p>
<p><a href="https://www.st.com/resource/en/programming_manual/pm0056-stm32f10xxx20xxx21xxxl1xxxx-cortexm3-programming-manual-stmicroelectronics.pdf">STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual</a></p>
<h2 id="wei-shi-yao-xu-yao-wai-bu-zhong-duan">为什么需要外部中断</h2>
<blockquote>
<p>[!NOTE]</p>
<p>按键扫描也可以实现按键控制LED亮灭，为什么需要外部中断呢？</p>
</blockquote>
<p>当我们使用按键扫描的方案时，CPU需要主动的不断轮询查看按键的状态，发现其被按下时就将LED状态反转一下。</p>
<p>如果把我们自己比作CPU，这就相当于我们网购之后，不断去快递点询问快递有没有到，如果没有就一直干等在那里，直到取到快递。在此期间，我们没有办法去做其他事情，时间都被浪费掉了。</p>
<h2 id="hao-lai-wu-yuan-ze-kong-zhi-fan-zhuan">好莱坞原则/控制反转</h2>
<p>还有一个著名的好莱坞原则：当演员去试镜后，剧组会告知演员不要打电话给我们，有结果了我们会通知你。</p>
<p>好莱坞原则是面向对象编程中的一个设计理念，常用来指导模块之间的交互方式。其核心思想是：</p>
<blockquote>
<p>“Don’t call us, we’ll call you.”<br>
“别调用我们，我们会调用你。”</p>
</blockquote>
<p>这意味着，在系统的架构设计中，下层模块不主动调用上层模块，而是通过某种机制（例如回调函数、事件驱动或依赖注入）让上层模块在合适的时候去调用下层模块。</p>
<p>这一原则强调 控制反转（IOC，Inversion of Control），目的是解耦模块，增强代码的可维护性和可扩展性。</p>
<h1 id="yi-chang-xiang-liang-biao">异常向量表</h1>
<h2 id="arm-he-yi-chang-xiang-liang-biao">ARM核异常向量表</h2>
<p>类似的，在按键控制LED案例中，我们无法预知用户会在何时按下按键，因此通过CPU主动地不断轮询这一事件是不明智的。我们应该将控制权交还给用户，希望用户在按下按键时，CPU能够被动地感知到，并执行我们预先编写好的按键事件处理逻辑。</p>
<p>ARM核是支持中断这一机制的，当中断发生时，ARM能够停下手头上的事情、保存工作现场，转而执行对应的中断处理服务程序，完成后再跳转会中断前的地方，恢复工作现场并继续执行既定程序。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241127224011740.png" alt="image-20241127224011740" style="zoom: 50%;">
<blockquote>
<p><a href="https://www.st.com/resource/en/programming_manual/pm0056-stm32f10xxx20xxx21xxxl1xxxx-cortexm3-programming-manual-stmicroelectronics.pdf">STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual</a> P156</p>
<p>The vector table contains the reset value of the stack pointer, and the start addresses, alsocalled exception vectors, for all exception handlers</p>
</blockquote>
<p>上述是ARM核对应异常（中断是异常的一种）向量表的规范：上电后应该初始化SP栈指针，接着执行<code>Reset</code>异常处理函数。我们可以对应STM32提供的标准外设库中的启动汇编程序 <code>startup.s</code>来看下：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__Vectors       DCD     __initial_sp               ; Top of Stack
                DCD     Reset_Handler              ; Reset Handler
                ...
                
; Reset handler
Reset_Handler   PROC
                EXPORT  Reset_Handler             [WEAK]
                IMPORT  __main
                IMPORT  SystemInit
                LDR     R0, =SystemInit
                BLX     R0               
                LDR     R0, =__main
                BX      R0
                ENDP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以发现<code>Reset</code>异常的执行做了两件事情：</p>
<ol>
<li>执行 <code>SystemInit</code>函数：可以在<code>system_stm32f1xx.c</code>找到定义，其中做了系统时钟的初始化</li>
<li>执行 <code>main</code>函数</li>
</ol>
<h2 id="yi-chang-fen-lei">异常分类</h2>
<p>ARM核规范中提供了84个中断（见上表），但STM32F103只实现了70个：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241127230557526.png" alt="image-20241127230557526"></p>
<blockquote>
<p><a href="https://www.st.com.cn/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">STM32F101xx, STM32F102xx, STM32F103xx, STM32F105xx and STM32F107xx advanced Arm®-based 32-bit MCUs</a> P1136</p>
</blockquote>
<p>这些异常大致可以分为三类：</p>
<ul>
<li>ARM核异常：例如复位异常，用于上电后执行用户程序</li>
<li>外设中断异常：由STM32根据ARM异常规范及SOC（片上外设）实现，例如USART中断、DMA中断、定时器中断等</li>
<li>外部异常：通过服用GPIO引脚输入功能来实现，可以通过片外硬件触发（例如按键）</li>
</ul>
<h2 id="yi-chang-tiao-zhuan">异常跳转</h2>
<p>当具体的异常发生时，ARM核会根据该异常在向量表中的偏移地址找到对应的异常处理指令来执行，例如外部中断10就会找到 <code>startup_stm32f103xe.s</code>中的 <code>DCD     EXTI15_10_IRQHandler</code>。通过<code>DCD</code>指令存放了 <code>EXTI15_10_IRQHandler</code>函数的入口地址（如果我们定义了该函数，则在链接时就能够找到对应的入口地址）</p>
<h1 id="stm-32-wai-bu-zhong-duan-shi-jian">STM32外部中断实践</h1>
<blockquote>
<p>[!NOTE]</p>
<p>这里以STM32F103ZE为例</p>
</blockquote>
<h2 id="stm-32-zhong-duan-ti-xi-jia-gou">STM32中断体系架构</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128082243029.png" alt="image-20241128082243029"></p>
<h2 id="gpio-shu-ru-fu-yong-exti">GPIO输入复用EXTI</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128084910018.png" alt="image-20241128084910018"></p>
<p>可以发现，输入不仅会传输到输入数据寄存器IDR，也会接入到复用功能输入（AF Input）；</p>
<p>如下，EXTI的左边是多个GPIO连接到多路选择器，右边连到中断线，这样就能通过一根中断线处理A-G 7个IO口的引脚。具体中断和其中哪个引脚短接，可以通过设置EXTI中的寄存器（多路选择寄存器）来选择具体的引脚。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128084718261.png" alt="image-20241128084718261" style="zoom:50%;">
<h2 id="wai-bu-zhong-duan-kong-zhi-qi-kuang-tu">外部中断控制器框图</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128082339103.png" alt="image-20241128082339103" style="zoom:50%;">
<ul>
<li>（falling/rising trigger selection register）边沿触发选择寄存器：可配置触发方式为上升沿、下降沿、还是两者均可</li>
<li>（software interrupt event register）软件中断事件寄存器：和外部中断通过 <mark>或门</mark>相接，我们可以通过在程序中设置该寄存器从而实现软件触发中断的效果，而不是外部硬件设备（例如按键按下）触发</li>
<li>（interrupt mask register）中断屏蔽（<mark>mask</mark>）寄存器：该寄存器与外部中断通过 <mark>与门</mark>相接，当该寄存器设置为1时，表明不要屏蔽该外部中断，当其发生时将其递交给 <mark>NVIC</mark></li>
<li>（pending request register）中断待处理（pending）请求寄存器：如果该外部中断经过了前述寄存器的层层考验，那么该寄存器会被设置（硬件设置）；该寄存器与 <mark>NVIC</mark>对接，<mark>NVIC</mark>检测到该寄存器被设置，那么就会收到中断待处理请求。（相当于EXTI通知NVIC有外部中断了）</li>
</ul>
<h2 id="zhong-duan-you-xian-ji-ceng-ji-hua-fen">中断优先级层级划分</h2>
<p>由于这一部分隶属于ARM核，因此需要查看ARM核相关的参考手册</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128090342846.png" alt="image-20241128090342846"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128090422528.png" alt="image-20241128090422528"></p>
<blockquote>
<p><a href="https://www.st.com/resource/en/programming_manual/pm0056-stm32f10xxx20xxx21xxxl1xxxx-cortexm3-programming-manual-stmicroelectronics.pdf">STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual</a></p>
</blockquote>
<p>如果将这三个比特位配置为 <code>011</code>，那么就不划分出子优先级，而只使用抢占优先级</p>
<h2 id="zhong-duan-you-xian-ji-she-zhi">中断优先级设置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128091551647.png" alt="image-20241128091551647"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128091800612.png" alt="image-20241128091800612" style="zoom:50%;">
<blockquote>
<p>[!NOTE]</p>
<p>其中八位的高四位（[7:4]）用来表示优先级的值，offset则对应中断号</p>
</blockquote>
<h1 id="dai-ma-shi-xian-ji-cun-qi-ban-ben">代码实现（寄存器版本）</h1>
<h2 id="kai-qi-shi-zhong">开启时钟</h2>
<p>找到GPIO和AFIO外设挂载的总线：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128100638280.png" alt="image-20241128100638280" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128100807316.png" alt="image-20241128100807316"></p>
<p>增加芯片型号的定义 <code>#define STM32F10X_HD</code>以开启宏定义<code>RCC_APB2ENR_IOPFEN</code></p>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">#if !defined (STM32F10X_LD) &amp;&amp; !defined (STM32F10X_LD_VL) &amp;&amp; !defined (STM32F10X_MD) &amp;&amp; !defined (STM32F10X_MD_VL) &amp;&amp; !defined (STM32F10X_HD) &amp;&amp; !defined (STM32F10X_HD_VL) &amp;&amp; !defined (STM32F10X_XL) &amp;&amp; !defined (STM32F10X_CL) 
  /* #define STM32F10X_LD */     /*!&lt; STM32F10X_LD: STM32 Low density devices */
  /* #define STM32F10X_LD_VL */  /*!&lt; STM32F10X_LD_VL: STM32 Low density Value Line devices */
  /* #define STM32F10X_MD */     /*!&lt; STM32F10X_MD: STM32 Medium density devices */
  /* #define STM32F10X_MD_VL */  /*!&lt; STM32F10X_MD_VL: STM32 Medium density Value Line devices */
  #define STM32F10X_HD     /*!&lt; STM32F10X_HD: STM32 High density devices */
  /* #define STM32F10X_HD_VL */  /*!&lt; STM32F10X_HD_VL: STM32 High density value line devices */
  /* #define STM32F10X_XL */     /*!&lt; STM32F10X_XL: STM32 XL-density devices */
  /* #define STM32F10X_CL */     /*!&lt; STM32F10X_CL: STM32 Connectivity line devices */
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使能时钟：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gpio clock</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPFEN<span class="token punctuation">;</span>
<span class="token comment">// afio clock</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="gpio-pei-zhi">GPIO配置</h2>
<p>由于一端接3V3，因此GPIO可以配置成输入下拉，这样按下时能够产生一个上升沿：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128092332887.png" alt="image-20241128092332887" style="zoom: 33%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128092630183.png" alt="image-20241128092630183"></p>
<p>并通过ODR将上下拉选择为下拉</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128093513456.png" alt="image-20241128093513456" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128093142134.png" alt="image-20241128093142134"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gpio config for PF10</span>
   GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
   GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_1<span class="token punctuation">;</span>   <span class="token comment">// input with pull-up/down</span>
   GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_0<span class="token punctuation">;</span>
   GPIOF<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">;</span>   <span class="token comment">// pull-down</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="afio-fu-yong-shu-ru-wei-wai-bu-zhong-duan">AFIO复用输入为外部中断</h2>
<p>接着我们需要打通GPIO输入到EXTI的通路</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128092916951.png" alt="image-20241128092916951"></p>
<p>将外部中断线10（EXTI10）选择为PF10：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128093641646.png" alt="image-20241128093641646"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// afio config</span>
    AFIO<span class="token operator">-&gt;</span>EXTICR<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_EXTICR3_EXTI10<span class="token punctuation">;</span>
    AFIO<span class="token operator">-&gt;</span>EXTICR<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> AFIO_EXTICR3_EXTI10_PF<span class="token punctuation">;</span>   <span class="token comment">// select PF as exti10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="exti-pei-zhi">EXTI配置</h2>
<p>对照其内部框图，看下哪些寄存器需要配置</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128094127920.png" alt="image-20241128094127920" style="zoom:50%;">
<h3 id="jie-chu-zhong-duan-ping-bi">解除中断屏蔽</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128094000914.png" alt="image-20241128094000914"></p>
<h3 id="qi-yong-shang-sheng-yan-hong-fa">启用上升沿触发</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128094036359.png" alt="image-20241128094036359"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// exti config</span>
    EXTI<span class="token operator">-&gt;</span>IMR <span class="token operator">|=</span> EXTI_IMR_MR10<span class="token punctuation">;</span>   <span class="token comment">// unmask interrupt</span>
    EXTI<span class="token operator">-&gt;</span>RTSR <span class="token operator">|=</span> EXTI_RTSR_TR10<span class="token punctuation">;</span>   <span class="token comment">// rising edge trigger</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="nvic-pei-zhi">NVIC配置</h2>
<h3 id="you-xian-ji-ceng-ji-she-zhi">优先级层级设置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128094413013.png" alt="image-20241128094413013"></p>
<h3 id="wei-wai-bu-zhong-duan-hao-zhi-ding-you-xian-ji">为外部中断号指定优先级</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128094538150.png" alt="image-20241128094538150" style="zoom:50%;">
<blockquote>
<p>[!NOTE]</p>
<p>这里每8个bit对应一个中断号的优先级，因此使用了21个32bit的IPR寄存器来存储84个中断号对应的优先级</p>
</blockquote>
<h3 id="shi-neng-wai-bu-zhong-duan">使能外部中断</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128094859410.png" alt="image-20241128094859410"></p>
<blockquote>
<p>[!IMPORTANT]</p>
<p>注意EXTI有中断屏蔽开关，NVIC也有中断使能开关；</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128095539003.png" alt="image-20241128095539003"></p>
<blockquote>
<p>[!NOTE]</p>
<p>一个bit存储一个中断对应的使能开关，使用了3个32bit的ISER寄存器来存储中断号<mark>0~67</mark>的使能开关</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// nvic config</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// only pre-priority</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>EXTI15_10_IRQn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>EXTI15_10_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// response interrupt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ding-yi-zhong-duan-chu-li-han-shu">定义中断处理函数</h2>
<p>在 <code>startup.s</code>中找到 EXTI10对应的中断函数名称的声明 <code>EXTI15_10_IRQHandler</code></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__Vectors       DCD     __initial_sp               ; Top of Stack
                DCD     Reset_Handler              ; Reset Handler
                DCD     NMI_Handler                ; NMI Handler
                ...
                DCD     EXTI15_10_IRQHandler       ; EXTI Line 15..10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>经过按键抖动判断后反转LED状态：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EXTI15_10_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    EXTI<span class="token operator">-&gt;</span>PR <span class="token operator">|=</span> EXTI_PR_PR10<span class="token punctuation">;</span>   <span class="token comment">// clear pending flag</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>GPIOF<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR10<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LED_Toggle</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>外部中断</tag>
        <tag>EXTI</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境问题杂记</title>
    <url>/2024/12/13/21754.html</url>
    <content><![CDATA[<h1 id="clion-da-jian-lvgl-mo-ni-qi-v-8-3">Clion搭建LVGL模拟器(V8.3)</h1>
<blockquote>
<p>[!NOTE]</p>
<p>参考资料：<a href="https://blog.csdn.net/qq_44656481/article/details/125208978">https://blog.csdn.net/qq_44656481/article/details/125208978</a></p>
</blockquote>
<h2 id="dai-ma-xia-zai">代码下载</h2>
<p><a href="https://github.com/lvgl/lv_port_pc_eclipse">lv_port_pc_eclipse</a>：<a href="https://github.com/lvgl/lv_port_pc_eclipse/tree/release/v8.3">https://github.com/lvgl/lv_port_pc_eclipse/tree/release/v8.3</a></p>
<ul>
<li><a href="https://github.com/lvgl/lv_drivers/tree/be337d02ee797702f191499152db5f8c47e32d6e">https://github.com/lvgl/lv_drivers/tree/be337d02ee797702f191499152db5f8c47e32d6e</a></li>
<li><a href="https://github.com/lvgl/lvgl/tree/0732400e7b564dd0e7dc4a924619d8e19c5b23a0">https://github.com/lvgl/lvgl/tree/0732400e7b564dd0e7dc4a924619d8e19c5b23a0</a></li>
</ul>
<h2 id="msys-2-an-zhuang-gcc-he-c-make">MSYS2安装GCC和CMake</h2>
<blockquote>
<p>[!NOTE]</p>
<p>注意：要使用MSYS2的命令行</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213200229652.png" alt="image-20241213200229652"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-gcc
pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-cmake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="msys-2-an-zhuang-sdl-ku">MSYS2安装SDL库</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213195849096.png" alt="image-20241213195849096"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-SDL2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="clion-gong-ju-lian-pei-zhi">Clion工具链配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213195553464.png" alt="image-20241213195553464"></p>
<h2 id="clion-c-make-pei-zhi">Clion CMake配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213195622311.png" alt="image-20241213195622311"></p>
<h1 id="wsl-2-da-jian">WSL2搭建</h1>
<p><a href="https://docs.eesast.com/docs/tools/wsl#%E4%BA%8C-%E5%9C%A8%E5%85%B6%E4%BB%96%E7%A3%81%E7%9B%98%E4%B8%AD%E5%AE%89%E8%A3%85-wsl-2%E6%8E%A8%E8%8D%90">WSL 安装与使用 | EESΛST Docs</a></p>
<h1 id="clion-pei-zhi-wsl">Clion配置WSL</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential cmake
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241214105429406.png" alt="image-20241214105429406"></p>
<h1 id="logic-qu-dong-wen-ti">Logic驱动问题</h1>
<p><a href="https://blog.csdn.net/qq_40088639/article/details/134292141">https://blog.csdn.net/qq_40088639/article/details/134292141</a></p>
<p><a href="https://www.kdocs.cn/l/cqCpcc9EmemB">https://www.kdocs.cn/l/cqCpcc9EmemB</a></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>定时器的本质就是数数（基于STM32F103深入理解定时器）</title>
    <url>/2024/12/04/52886.html</url>
    <content><![CDATA[<h1 id="can-kao-shou-ce">参考手册</h1>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
<li>STM32F103 Cortext-M3 编程手册<a href="https://www.st.com/resource/en/programming_manual/pm0056-stm32f10xxx20xxx21xxxl1xxxx-cortexm3-programming-manual-stmicroelectronics.pdf">STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual</a></li>
</ul>
<h1 id="xi-tong-di-ta-ding-shi-qi-sys-tick-timer">系统嘀嗒定时器SysTick Timer</h1>
<p>该定时器和嵌套向量中断控制器NVIC一样，是Cortext-M3内核中内置的外设，在<a href="https://www.st.com/resource/en/programming_manual/pm0056-stm32f10xxx20xxx21xxxl1xxxx-cortexm3-programming-manual-stmicroelectronics.pdf">STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual</a>的如下章节中可以查阅相关的说明。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205082312825.png" alt="image-20241205082312825" style="zoom:33%;">
<blockquote>
<p>The processor has a 24-bit system timer, SysTick, that counts down from the reload value to zero, reloads (wraps to) the value in the LOAD register on the next clock edge, then counts down on subsequent clocks.</p>
<p>When the processor is halted for debugging the counter does not decrement.</p>
</blockquote>
<p>Cortex-M3处理器有一个24bit的系统级定时器SysTick，该定时器会从装载值向下计数到零，然后在下个时钟周期装载LOAD寄存器中指定的重新装载值，并在随后的时钟继续向下计数。</p>
<p>需要注意的时，当处理器因调试而中断执行时，该计数器不会递减。</p>
<h2 id="zhong-zhuang-zai-zhi-ji-cun-qi-load">重装载值寄存器LOAD</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205083512747.png" alt="image-20241205083512747"></p>
<p>LOAD寄存器用于指定定时器计数的重装载值RELOAD，当定时器被启用或递减到零时，LOAD寄存器指定的值会被加载到VAL寄存器中（该寄存器为定时器当前的计数值）。</p>
<p>RELOAD值需要根据使用场景来计算：</p>
<ul>
<li>如果想要<mark>每N个处理器时钟周期</mark>就产生触发事件，需要将RELOAD设置为N-1。例如每100个时钟脉冲需要触发一次SysTick中断，需要将RELOAD设置为99。（当RELOAD设置为99后，开启定时器，在第一个时钟脉冲RELOAD会被加载到VAL寄存器中，并在随后的每个时钟脉冲将99递减1，因此在开启定时器后的第100个时钟脉冲，VAL会变成0，并产生中断事件）。</li>
<li>如果需要在<mark>N个处理器时钟周期的延时后</mark>触发一个单次的SysTick中断，需要将RELOAD设置为N。例如如果需要在400个时钟脉冲之后触发一次SysTick中断，需要将RELOAD设置为400。（开启定时器后，在第一个脉冲将RELOAD装载到VAL，在第401个脉冲VAL递减为0，并产生中断事件）</li>
</ul>
<p>前者常用于周期性地产生中断（每N个时钟周期的最后一个周期触发次），而后者常用于单次不定长度的延时（等到K个时钟周期完整结束，第K+1个脉冲开始时触发一次事件）。</p>
<h2 id="dang-qian-ji-shu-zhi-ji-cun-qi-val">当前计数值寄存器VAL</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205091342807.png" alt="image-20241205091342807"></p>
<p>该寄存器存储的是SysTick计数器当前的计数值。读操作会返回当前计数值，任何写操作会将当前计数值清零，并清除CTRL寄存器中的COUNTFALG位。</p>
<p>该寄存器是SysTick内部的一个状态寄存器，我们通常不会直接操作该寄存器。</p>
<h2 id="sys-tick-kong-zhi-he-zhuang-tai-ji-cun-qi-ctrl">SysTick控制和状态寄存器CTRL</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205083016981.png" alt="image-20241205083016981"></p>
<h3 id="ding-shi-qi-shi-neng-enable">定时器使能ENABLE</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205083115544.png" alt="image-20241205083115544"></p>
<p>将ENABLE置位后，定时器会将LOAD寄存器中RELOAD值加载到VAL寄存器中，然后开始向下计数。到达0后，会将COUNTFLAG置位，并根据TICKINT是否被置位来判断是否需要产生SysTick中断。然后继续重新装载RELOAD值并开始计数。</p>
<blockquote>
<p>[!NOTE]</p>
<p>注意：如本章节开头所提到的，并不是将ENABLE置位后，定时器并不会马上加载RELOAD，而是要等一个时钟脉冲。同样的，当递减到0时，会置位COUNTFLAG并根据TICKINT产生中断，并在下个脉冲重新装载RELOAD值。</p>
</blockquote>
<h3 id="sys-tick-yi-chang-qing-qiu-shi-neng-tickint">SysTick异常请求使能TICKINT</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205094011349.png" alt="image-20241205094011349"></p>
<p>将TICKINT置位后，当计数器递减到0时会发出SysTick异常请求，该请求会被递交NVIC，随后处理器会通过异常向量表找到相应的异常处理程序来执行。</p>
<blockquote>
<p>[!NOTE]</p>
<p>软件可以通过轮询COUNTFLAG来判断SysTick是否计数到了0.</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205094354149.png" alt="image-20241205094354149" style="zoom:50%;">
<blockquote>
<p>[!NOTE]</p>
<p>关于ARM核异常处理机制，可参考本站文章《ARM核学习（五）异常处理》</p>
</blockquote>
<h3 id="sys-tick-shi-zhong-yuan-xuan-ze-clksource">SysTick时钟源选择CLKSOURCE</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205094708579.png" alt="image-20241205094708579" style="zoom: 50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205094832430.png" alt="参考手册-时钟树"></p>
<p>这里我们可以配置为处理器时钟AHB，或其8分频。</p>
<h3 id="ji-shu-biao-zhi-wei-countflag">计数标志位COUNTFLAG</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205094958147.png" alt="image-20241205094958147"></p>
<p>当定时器计数到0时，该标志位会被置位。这里还有个细节，读取到COUNTFLAG为1后会清除该位。</p>
<h2 id="an-li-sys-tick-shi-xian-led-mei-miao-fan-zhuan-yi-ci">案例-SysTick实现LED每秒翻转一次</h2>
<h3 id="systick-h">systick.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SYSTICK_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SYSTICK_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SYSTICK_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="systick-c">systick.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>

<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> tick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> SystemCoreClock <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> <span class="token punctuation">(</span>SysTick_CTRL_CLKSOURCE <span class="token operator">|</span> SysTick_CTRL_TICKINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> SysTick_CTRL_ENABLE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tick<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>

<span class="token class-name">uint16_t</span> tick_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tick_ms<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tick_ms <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LED_Toggle</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tick_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="nvic-zhong-duan-pei-zhi">NVIC中断配置</h2>
<p>由于SysTick为CM3内置的外设，NVIC默认注册了SysTick。</p>
<h3 id="zhong-duan-shi-neng-amp-mo-ren-you-xian-ji">中断使能&amp;默认优先级</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205105610255.png" alt="image-20241205105610255"></p>
<p>如上图，可以看出SysTick中断使能默认是置位的，并且优先级为0。</p>
<h3 id="zi-ding-yi-sys-tick-you-xian-ji">自定义SysTick优先级</h3>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">void SysTick_Init(void) {
    SysTick-&gt;LOAD = SystemCoreClock / 1000 - 1;
    SysTick-&gt;CTRL |= (SysTick_CTRL_CLKSOURCE | SysTick_CTRL_TICKINT);

    NVIC_SetPriorityGrouping(3); // 4个bit都为抢占优先级
    NVIC_SetPriority(SysTick_IRQn, 10); // 将SysTick中断优先级设置为10
    // NVIC_EnableIRQ(SysTick_IRQn); // SysTick属于内核异常，不需要手动开启

    SysTick-&gt;CTRL |= SysTick_CTRL_ENABLE;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205110044145.png" alt="image-20241205110044145"></p>
<h2 id="hal-ku-shi-xian">HAL库实现</h2>
<h3 id="cube-pei-zhi">Cube配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205110622283.png" alt="image-20241205110622283"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205110642343.png" alt="image-20241205110642343"></p>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>
  <span class="token function">HAL_GPIO_TogglePin</span><span class="token punctuation">(</span>LED1_GPIO_Port<span class="token punctuation">,</span> LED1_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hal-ku-yan-shi-han-shu-fen-xi">HAL库延时函数分析</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>HAL_Init</code>做了SysTick的初始化：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Set Interrupt Group Priority */</span>
<span class="token function">HAL_NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span>NVIC_PRIORITYGROUP_4<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */</span>
<span class="token function">HAL_InitTick</span><span class="token punctuation">(</span>TICK_INT_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上，将优先级分组设置为 <code>#define NVIC_PRIORITYGROUP_4     0x00000003U</code>，即优先级配置用的4个bit全部用于抢占优先级，不设置响应优先级（Subpriority）</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NVIC_PRIORITYGROUP_4</span>         <span class="token expression"><span class="token number">0x00000003U</span> </span><span class="token comment">/*!&lt; 4 bits for pre-emption priority
                                                      0 bits for subpriority */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后通过 <code>HAL_InitTick</code>初始化SysTick：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__weak HAL_StatusTypeDef <span class="token function">HAL_InitTick</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> TickPriority<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* Configure the SysTick to have interrupt in 1ms time basis*/</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_SYSTICK_Config</span><span class="token punctuation">(</span>SystemCoreClock <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000U</span> <span class="token operator">/</span> uwTickFreq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0U</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> HAL_ERROR<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* Configure the SysTick IRQ priority */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>TickPriority <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> __NVIC_PRIO_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">HAL_NVIC_SetPriority</span><span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> TickPriority<span class="token punctuation">,</span> <span class="token number">0U</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uwTickPrio <span class="token operator">=</span> TickPriority<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> HAL_ERROR<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* Return function status */</span>
  <span class="token keyword">return</span> HAL_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过 <code>HAL_SYSTICK_Config</code>配置了SysTick相关的寄存器（每1ms触发一次中断），然后通过 <code>HAL_NVIC_SetPriority</code>设置了SysTick中断的优先级。</p>
<p>在中断回调函数中，将计数器 <code>uwTick</code>自增：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN SysTick_IRQn 0 */</span>

  <span class="token comment">/* USER CODE END SysTick_IRQn 0 */</span>
  <span class="token function">HAL_IncTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN SysTick_IRQn 1 */</span>
    
  <span class="token comment">/* USER CODE END SysTick_IRQn 1 */</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">HAL_IncTick</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uwTick <span class="token operator">+=</span> uwTickFreq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在调用 <code>HAL_Delay</code>时，首先会获取 <code>uwTick</code>的当前值 <code>tickstart</code>，通过 <code>while</code>延时直到自增的<code>uwTick</code>和 <code>tickstart</code>之间的差值达到我们传入的 <code>Delay</code>毫秒数。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__weak <span class="token keyword">void</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> Delay<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">uint32_t</span> tickstart <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> wait <span class="token operator">=</span> Delay<span class="token punctuation">;</span>

  <span class="token comment">/* Add a freq to guarantee minimum wait */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wait <span class="token operator">&lt;</span> HAL_MAX_DELAY<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    wait <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uwTickFreq<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="ji-ben-ding-shi-qi">基本定时器</h1>
<h2 id="gai-shu">概述</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204103009989.png" alt="image-20241204103009989"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204103508116.png" alt="image-20241204103508116"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204103554574.png" alt="image-20241204103554574"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204103719970.png" alt="image-20241204103719970"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204104016311.png" alt="image-20241204104016311"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204104848858.png" alt="image-20241204104848858"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204104746716.png" alt="image-20241204104746716"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204105125520.png" alt="image-20241204105125520"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204110522459.png" alt="image-20241204110522459"></p>
<h2 id="ji-cun-qi-gong-neng-fen-xi">寄存器功能分析</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205113657990.png" alt="image-20241205113657990"></p>
<p>我们不妨从RCC时钟接入定时器开始分析，以每秒触发一次定时溢出事件为例，看看我们需要配置哪些寄存器。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205114035094.png" alt="image-20241205114035094"></p>
<p>基本定时TIM6挂载在APB1低速外设总线上，其最大时钟频率为36MHz。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205114222915.png" alt="image-20241205114222915"></p>
<p>但是APB1不是直接接入TM6的。如上图，如果APB1的预分配系数如果不是为1，那么会将其2倍频后再给到后面的TIM6。因此TIM6的输入时钟实际上为72MHz。</p>
<h3 id="zi-dong-zhuang-zai-zhi-ji-cun-qi-arr-amp-yu-fen-pin-ji-cun-qi-psc">自动装载值寄存器ARR &amp; 预分频寄存器PSC</h3>
<p>为了得到周期为1s的定时器溢出率（即1Hz），我们可以将定时器的重装载值和预分频器看做输入时钟的两个分频系数，经过预分频器和定时器计数周期后，能够将72MHz输入时钟频率变为1Hz的定时器溢出率。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205133045398.png" alt="image-20241205133045398"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205133101610.png" alt="image-20241205133101610"></p>
<p>如上，由于定时器自动装载值和分频器为16bit，因此最大值为65535，为了将72MHz变为1Hz，我们可以通过预分频器（7200分频）先将72000000Hz先变为10000Hz，然后再通过10000个计数周期将其变为1Hz。</p>
<ul>
<li>PSC配置为7200-1，PSC为0时代表不分频，因此PSC配置的值对应的实际分频系数为PSC+1</li>
<li>ARR配置为10000-1，因为计数到9999时，还需要一个脉冲才能计数器的值变为0，而随后计数到9999则需要9999个脉冲，加上变为0的，一共10000个脉冲</li>
</ul>
<h3 id="dang-qian-ji-shu-zhi-ji-cun-qi-cnt">当前计数值寄存器CNT</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205115451556.png" alt="image-20241205115451556"></p>
<p>ARR中配置的值会被加载到该寄存器，该寄存器实时反映当前的计数值。通常，我们不会直接操作该寄存器。</p>
<h3 id="zhong-duan-shi-neng-ji-cun-qi-dier-amp-zhuang-tai-ji-cun-qi-sr">中断使能寄存器DIER &amp; 状态寄存器SR</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205115848928.png" alt="image-20241205115848928"></p>
<p>通过UIE我们可以开启定时器更新（计数值到达装载值）中断。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205115843854.png" alt="image-20241205115843854"></p>
<p>在处理中断后，我们需要清除UIF中断标志位，避免重复触发中断。</p>
<h3 id="shou-dong-chan-sheng-geng-xin-shi-jian-egr">手动产生更新事件EGR</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205120551269.png" alt="image-20241205120551269"></p>
<h3 id="kong-zhi-ji-cun-qi-cr-1">控制寄存器CR1</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205120745275.png" alt="image-20241205120745275"></p>
<h2 id="an-li-led-zhuang-tai-fan-zhuan">案例-LED状态翻转</h2>
<h3 id="systick">systick</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SYSTICK_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SYSTICK_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SYSTICK_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>

<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> tick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> SystemCoreClock <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> <span class="token punctuation">(</span>SysTick_CTRL_CLKSOURCE <span class="token operator">|</span> SysTick_CTRL_TICKINT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4个bit都为抢占优先级</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将SysTick中断优先级设置为10</span>
    <span class="token comment">// NVIC_EnableIRQ(SysTick_IRQn); // SysTick属于内核异常，不需要手动开启</span>

    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> SysTick_CTRL_ENABLE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tick<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="tim-6">TIM6</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TIM6_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TIM6_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM6_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">TIM6_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">TIM6_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">TIM6_UpdateCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __TIM6_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim6.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM6_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启TIM6输入时钟</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_TIM6EN<span class="token punctuation">;</span>
    <span class="token comment">// 配置中断频率</span>
    <span class="token comment">// 72MHz / 7200 / 1000 = 1Hz = 1s(interrupt frequence)</span>
    TIM6<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">7200</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    TIM6<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// 开启定时器更新中断</span>
    TIM6<span class="token operator">-&gt;</span>DIER <span class="token operator">|=</span> TIM_DIER_UIE<span class="token punctuation">;</span>
    <span class="token comment">// 注册到NVIC，优先级为2</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>TIM6_IRQn<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>TIM6_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM6_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM6<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM6_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM6<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM6_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM6<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_UIF<span class="token punctuation">;</span>
    <span class="token function">TIM6_UpdateCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">TIM6_UpdateCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main">main</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim6.h"</span></span>

<span class="token class-name">uint16_t</span> tick_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tick_ms<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tick_ms <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LED_Toggle</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tick_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM6_UpdateCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LED_Toggle</span><span class="token punctuation">(</span>LED2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM6_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">TIM6_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="psc-he-arr-yu-zhuang-zai-zhi-wen-ti">PSC和ARR预装载值问题</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205145640935.png" alt="image-20241205145640935"></p>
<p>如上图所示，两个寄存器底下都有阴影，这表示ARR和PSC是<mark>预装载寄存器</mark>，ARR和PSC中配置的值会在每次更新事件发生时被加载底层工作的寄存器中（<mark>active register</mark>）。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205131723712.png" alt="image-20241205131723712"></p>
<p>如果ARPE配置为1，那么写入ARR值不会立即被加载到Auto-reload Register，而是要等到更新事件发生。配置为0，则写入ARR的值会立即被加载到Auto-reload Register。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205132208017.png" alt="image-20241205132208017"></p>
<blockquote>
<p>[!NOTE]</p>
<p>但是，写入PSC的值只有在每次更新事件发生时才会被加载到运转中的PSC Prescaler（active prescaler register）中。</p>
</blockquote>
<p>因此上述案例中，在TIM6启动后，Auto-reload Register中的值为9999，而PSC Prescale为0，等待9999*(1/72MHz)即大约(10000/72)us后，PSC Prescaler才会被加载为7199。</p>
<p>所以会导致LED1和LED2交替闪烁的现象，而不是我们预期的每隔1秒LED1和LED2同时翻转状态。</p>
<p>要想初始化TIM6时强制将PSC预装载值刷新到工作寄存器中，我们可以通过EGR手动产生一个更新事件：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">TIM6_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启TIM6输入时钟</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_TIM6EN<span class="token punctuation">;</span>
    <span class="token comment">// 配置中断频率</span>
    <span class="token comment">// 72MHz / 7200 / 1000 = 1Hz = 1s(interrupt frequence)</span>
    TIM6<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">7200</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    TIM6<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// 通过EGR手动产生一次更新事件，将PSC预装载值刷新到Prescaler寄存器中</span>
    TIM6<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span> <span class="token comment">// 启用定时器</span>
    TIM6<span class="token operator">-&gt;</span>EGR <span class="token operator">|=</span> TIM_EGR_UG<span class="token punctuation">;</span> <span class="token comment">// 产生更新事件</span>
    TIM6<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_UIF<span class="token punctuation">;</span> <span class="token comment">// 清除更新事件中断标志</span>
    TIM6<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span> <span class="token comment">// 关闭定时器</span>

    <span class="token comment">// 开启定时器更新中断</span>
    TIM6<span class="token operator">-&gt;</span>DIER <span class="token operator">|=</span> TIM_DIER_UIE<span class="token punctuation">;</span>
    <span class="token comment">// 注册到NVIC，优先级为2</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>TIM6_IRQn<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>TIM6_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hal-ku-shi-xian-1">HAL库实现</h2>
<h3 id="cube-pei-zhi-1">Cube配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205144127438.png" alt="image-20241205144127438"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205144135329.png" alt="image-20241205144135329"></p>
<h3 id="yuan-ma-fen-xi">源码分析</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">TIM_HandleTypeDef htim6<span class="token punctuation">;</span>

<span class="token comment">/* TIM6 init function */</span>
<span class="token keyword">void</span> <span class="token function">MX_TIM6_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TIM_MasterConfigTypeDef sMasterConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    htim6<span class="token punctuation">.</span>Instance <span class="token operator">=</span> TIM6<span class="token punctuation">;</span>
    htim6<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>Prescaler <span class="token operator">=</span> <span class="token number">7200</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    htim6<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>CounterMode <span class="token operator">=</span> TIM_COUNTERMODE_UP<span class="token punctuation">;</span>
    htim6<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>Period <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    htim6<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>AutoReloadPreload <span class="token operator">=</span> TIM_AUTORELOAD_PRELOAD_ENABLE<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_TIM_Base_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">)</span> <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sMasterConfig<span class="token punctuation">.</span>MasterOutputTrigger <span class="token operator">=</span> TIM_TRGO_RESET<span class="token punctuation">;</span>
    sMasterConfig<span class="token punctuation">.</span>MasterSlaveMode <span class="token operator">=</span> TIM_MASTERSLAVEMODE_DISABLE<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_TIMEx_MasterConfigSynchronization</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sMasterConfig<span class="token punctuation">)</span> <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HAL_TIM_Base_MspInit</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>tim_baseHandle<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>tim_baseHandle<span class="token operator">-&gt;</span>Instance <span class="token operator">==</span> TIM6<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">__HAL_RCC_TIM6_CLK_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* TIM6 interrupt Init */</span>
        <span class="token function">HAL_NVIC_SetPriority</span><span class="token punctuation">(</span>TIM6_IRQn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_NVIC_EnableIRQ</span><span class="token punctuation">(</span>TIM6_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="tian-jia-ding-shi-qi-6-de-zhong-duan-hui-diao-han-shu">添加定时器6的中断回调函数</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205144214052.png" alt="image-20241205144214052"></p>
<p>在<code>tim.c</code>中添加HAL库的定时器<strong>溢出中断</strong>回调函数。（定时器的回调函数比较多，这次我们只使用到了溢出中断回调函数）。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 1 */</span>
<span class="token keyword">void</span> <span class="token function">HAL_TIM_PeriodElapsedCallback</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>htim<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定时器6产生中断。任何一个定时器产生中断都会进入到这个方法中，所以需要判断下定时器实例</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>htim<span class="token operator">-&gt;</span>Instance <span class="token operator">==</span> TIM6<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 翻转LEDB</span>
        <span class="token function">HAL_GPIO_TogglePin</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_PIN_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 1 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="yi-zhong-duan-fang-shi-kai-qi-ding-shi-qi">以中断方式开启定时器</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MX_TIM6_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动定时器6</span>
    <span class="token function">HAL_TIM_Base_Start_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="tong-yong-ding-shi-qi">通用定时器</h1>
<h2 id="gai-shu-1">概述</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205144420381.png" alt="image-20241205144420381" style="zoom:50%;">
<h2 id="yong-you-ji-ben-ding-shi-qi-de-suo-you-gong-neng">拥有基本定时器的所有功能</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205145016647.png" alt="image-20241205145016647"></p>
<h2 id="san-chong-ke-xuan-de-shi-zhong-yuan">三种可选的时钟源</h2>
<h3 id="nei-bu-shi-zhong-yuan">内部时钟源</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205145125349.png" alt="image-20241205145125349"></p>
<h3 id="ding-shi-qi-shu-ru-tong-dao-zuo-wei-shi-zhong-yuan">定时器输入通道作为时钟源</h3>
<blockquote>
<p>[!NOTE]</p>
<p>TI1：Timer Input 1</p>
<p>TI1FP1：Timer Input 1 after input Filter and Polarity(edge) detector</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204121957064.png" alt="image-20241204121957064"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205153635462.png" alt="image-20241205153635462"></p>
<h4 id="strong-ying-yong-chang-jing-strong"><strong>应用场景</strong></h4>
<ol>
<li><strong>外部事件计数</strong>
<ul>
<li>定时器可以通过 <code>TIMx_CH1</code> 捕获输入信号的每一个脉冲并进行计数。</li>
<li>典型应用：
<ul>
<li>计数外部传感器的信号，如编码器脉冲、转速信号。</li>
<li>红外光电开关的触发计数。</li>
</ul>
</li>
</ul>
</li>
<li><strong>频率测量</strong>
<ul>
<li>使用 <code>TIMx_CH1</code> 捕获输入信号的频率或周期。</li>
<li>实现方式：
<ul>
<li>配置定时器为输入捕获模式，记录信号边沿之间的时间间隔。</li>
</ul>
</li>
<li>典型应用：
<ul>
<li>测量输入信号频率（例如电机速度测量）。</li>
</ul>
</li>
</ul>
</li>
<li><strong>占空比测量</strong>
<ul>
<li><code>TIMx_CH1</code> 配合其他通道，可以测量信号的占空比。</li>
<li>实现方式：
<ul>
<li>配置为输入捕获模式，记录上升沿和下降沿的时间差。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="wai-bu-hong-fa-shu-ru-duan-kou-etr-zuo-wei-shi-zhong-yuan">外部触发输入端口ETR作为时钟源</h3>
<blockquote>
<p>[!NOTE]</p>
<p>ETR：External Trigger</p>
<p>ITR：Internal Timer</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204141554812.png" alt="image-20241204141554812"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205153719730.png" alt="image-20241205153719730"></p>
<h4 id="strong-ying-yong-chang-jing-strong-1"><strong>应用场景</strong></h4>
<ol>
<li><strong>外部时钟输入</strong>
<ul>
<li>定时器使用 <code>ETR</code> 的信号作为主时钟，而非内部时钟（如 APB 时钟）。</li>
<li>实现方式：
<ul>
<li>配置定时器为 <strong>外部时钟模式 1</strong>，通过 <code>ETR</code> 引脚输入时钟信号。</li>
</ul>
</li>
<li>典型应用：
<ul>
<li>使用外部晶振或其他高精度时钟源驱动定时器。</li>
<li>测量高频输入信号的脉冲个数。</li>
</ul>
</li>
</ul>
</li>
<li><strong>触发控制</strong>
<ul>
<li><code>ETR</code> 信号可用作触发信号源，用于启动或复位定时器计数器。</li>
<li>实现方式：
<ul>
<li>配置定时器为 <strong>复位模式</strong> 或 <strong>门控模式</strong>，根据 <code>ETR</code> 信号触发定时器操作。</li>
</ul>
</li>
<li>典型应用：
<ul>
<li>用一个外部事件启动定时器计数（例如外部按钮触发计时）。</li>
<li>用外部信号复位定时器（例如定时器同步）。</li>
</ul>
</li>
</ul>
</li>
<li><strong>编码器接口与同步</strong>
<ul>
<li>在编码器模式或定时器同步中，<code>ETR</code> 可用作从定时器的触发输入。</li>
<li>实现方式：
<ul>
<li>主从模式配置，将 <code>ETR</code> 信号作为触发源。</li>
</ul>
</li>
<li>典型应用：
<ul>
<li>多定时器同步操作（如 PWM 和输入捕获协同工作）。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="san-chong-ji-shu-mo-shi">三种计数模式</h2>
<h3 id="xiang-shang-ji-shu">向上计数</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204142731898.png" alt="image-20241204142731898"></p>
<h3 id="xiang-xia-ji-shu">向下计数</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204142747437.png" alt="image-20241204142747437"></p>
<h3 id="zhong-yang-dui-qi-ji-shu">中央对齐计数</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204143158175.png" alt="image-20241204143158175"></p>
<h2 id="pwm-jie-shao">PWM介绍</h2>
<h3 id="gai-nian">概念</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204144714300.png" alt="image-20241204144714300"></p>
<h3 id="pwm-can-shu">PWM参数</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204144910528.png" alt="image-20241204144910528"></p>
<h3 id="shi-yong-chang-jing">使用场景</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204145019846.png" alt="image-20241204145019846" style="zoom: 50%;">
<h2 id="shu-chu-bi-jiao-gong-neng">输出比较功能</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204145214662.png" alt="image-20241204145214662" style="zoom: 33%;">
<h3 id="kuang-tu">框图</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204145422526.png" alt="image-20241204145422526"></p>
<h3 id="yin-jiao-fu-yong">引脚复用</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205154814340.png" alt="image-20241205154814340"></p>
<h3 id="shu-chu-bi-jiao-yuan-li">输出比较原理</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204145638909.png" alt="image-20241204145638909"></p>
<h3 id="shu-chu-bi-jiao-de-8-chong-mo-shi">输出比较的8种模式</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204150232804.png" alt="image-20241204150232804"></p>
<blockquote>
<p>[!NOTE]</p>
<p>复位值为000，即默认没有启用该输出通道。</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204150202816.png" alt="image-20241204150202816"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205155618824.png" alt="image-20241205155618824" style="zoom:33%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204150413815.png" alt="image-20241204150413815"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204150500666.png" alt="image-20241204150500666"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204150639079.png" alt="image-20241204150639079"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204174825746.png" alt="image-20241204174825746"></p>
<h2 id="shi-yan-1-led-hu-xi-deng">实验1-LED呼吸灯</h2>
<h3 id="ji-shu-mo-shi-pei-zhi">计数模式配置</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205160143270.png" alt="image-20241205160143270" style="zoom: 50%;">
<h3 id="bu-huo-bi-jiao-mo-shi-xuan-ze">捕获/比较模式选择</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205160252799.png" alt="image-20241205160252799" style="zoom:50%;">
<h3 id="bi-jiao-shu-chu-mo-shi-she-zhi">比较输出模式设置</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205160735003.png" alt="image-20241205160735003" style="zoom:50%;">
<h3 id="bi-jiao-shu-chu-mo-shi-xia-de-bi-jiao-zhi">比较输出模式下的比较值</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205160836723.png" alt="image-20241205160836723" style="zoom:50%;">
<h3 id="tong-dao-shu-chu-shi-neng-amp-gong-zuo-dian-ping-ji-xing">通道输出使能 &amp; 工作电平极性</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205161010527.png" alt="image-20241205161010527" style="zoom:50%;">
<blockquote>
<p>[!NOTE]</p>
<p>CCER中的CCxP极性（负载工作时的电平极性）：默认为高电平有效（active high，即高电平时驱动负载工作），即计数值小于比较值时输出高电平。如果是低电平驱动负载，那么极性可以配置为低电平有效。</p>
</blockquote>
<h3 id="ji-cun-qi-yi-lan">寄存器一览</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205164102625.png" alt="image-20241205164102625"></p>
<h3 id="shi-li-dai-ma">示例代码</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205170719406.png" alt="image-20241205170719406"></p>
<h4 id="tim-5">tim5</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TIM5_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TIM5_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> duty_cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __TIM5_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim5.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ===========使能GPIOA和TIM5时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_TIM5EN<span class="token punctuation">;</span>

    <span class="token comment">// ===========GPIO复用推挽 mode=11 cnf=10</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF1_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF1_0<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器基本配置</span>
    <span class="token comment">// 定时器溢出频率 100Hz 10ms</span>
    TIM5<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">7200</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 计数方向为向上计数</span>
    TIM5<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_DIR<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器通道2配置</span>
    <span class="token comment">// 默认占空比为0</span>
    TIM5<span class="token operator">-&gt;</span>CCR2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 因为低电平点亮LED，因此输出工作电平极性为低电平</span>
    TIM5<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC2P<span class="token punctuation">;</span> <span class="token comment">// active low</span>
    <span class="token comment">// 通道输入输出选择：比较输出</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC2S<span class="token punctuation">;</span>
    <span class="token comment">// 比较输出模式：PWM1 110</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC2M_2<span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC2M_1<span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_OC2M_0<span class="token punctuation">;</span>
    <span class="token comment">// 使能通道比较输出</span>
    TIM5<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC2E<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> duty_cycle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CCR2 <span class="token operator">=</span> duty_cycle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="main-1">main</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim5.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> duty_cycle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        duty_cycle <span class="token operator">+=</span> step<span class="token punctuation">;</span>
        <span class="token function">TIM5_SetDutyCycle</span><span class="token punctuation">(</span>duty_cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>duty_cycle <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> duty_cycle <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            step <span class="token operator">=</span> <span class="token operator">-</span>step<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="delay">delay</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SYSTICK_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SYSTICK_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> delay_ms<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SYSTICK_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> tick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> SystemCoreClock <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> <span class="token punctuation">(</span>SysTick_CTRL_CLKSOURCE <span class="token operator">|</span> SysTick_CTRL_TICKINT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4个bit都为抢占优先级</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将SysTick中断优先级设置为10</span>
    <span class="token comment">// NVIC_EnableIRQ(SysTick_IRQn); // SysTick属于内核异常，不需要手动开启</span>

    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> SysTick_CTRL_ENABLE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tick<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">SysTick_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> delay_ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> cur_tick <span class="token operator">=</span> tick<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>tick <span class="token operator">-</span> cur_tick <span class="token operator">&lt;</span> delay_ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="hal-ku-shi-xian-2">HAL库实现</h3>
<h4 id="cube-pei-zhi-2">Cube配置</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205181459371.png" alt="image-20241205181459371"></p>
<h4 id="she-zhi-zhan-kong-bi">设置占空比</h4>
<p><code>tim.h</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN Prototypes */</span>
<span class="token keyword">void</span> <span class="token function">TIM5_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dutyCycle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END Prototypes */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>tim.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 1 */</span>
<span class="token keyword">void</span> <span class="token function">TIM5_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dutyCycle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">__HAL_TIM_SET_COMPARE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim5<span class="token punctuation">,</span> TIM_CHANNEL_2<span class="token punctuation">,</span> dutyCycle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="qi-dong-ding-shi-qi-tong-dao-shu-chu-pwm">启动定时器通道输出PWM</h4>
<p><code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 2 */</span>
    <span class="token function">HAL_TIM_PWM_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim5<span class="token punctuation">,</span> TIM_CHANNEL_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> dutyCycle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    dutyCycle <span class="token operator">+=</span> step<span class="token punctuation">;</span>
    <span class="token function">TIM5_SetDutyCycle</span><span class="token punctuation">(</span>dutyCycle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dutyCycle <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> dutyCycle <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        step <span class="token operator">=</span> <span class="token operator">-</span>step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="shu-ru-bu-huo">输入捕获</h2>
<h3 id="ying-yong">应用</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205212053355.png" alt="image-20241205212053355"></p>
<h3 id="kuang-tu-1">框图</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204175246770.png" alt="image-20241204175246770"></p>
<h3 id="yuan-li">原理</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204180530012.png" alt="image-20241204180530012"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204180946906.png" alt="image-20241204180946906"></p>
<h3 id="ce-liang-pwm-zhou-qi-yuan-li">测量PWM周期原理</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205213337600.png" alt="image-20241205213337600"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205213619896.png" alt="image-20241205213619896"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205213846934.png" alt="image-20241205213846934"></p>
<h2 id="shi-yan-2-ce-liang-pwm-zhou-qi-pin-lu">实验2-测量PWM周期/频率</h2>
<ul>
<li>PA1：通过TIM5_CH2的比较输出功能产生PWM</li>
<li>短接PA1和PB6</li>
<li>PB6：通过TIM4_CH1的输入捕获功能测量输入的PWM周期</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205214430424.png" alt="image-20241205214430424"></p>
<h3 id="shu-ru-tong-dao-lu-bo-qi-pei-zhi">输入通道滤波器配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205214245028.png" alt="image-20241205214245028"></p>
<h3 id="tong-dao-bi-jiao-bu-huo-shi-neng-amp-bian-yan-jian-ce-ji-xing">通道比较/捕获使能 &amp; 边沿检测极性</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205215027795.png" alt="image-20241205215027795"></p>
<h3 id="shu-ru-bu-huo-zhong-duan-shi-neng">输入捕获中断使能</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205215143081.png" alt="image-20241205215143081"></p>
<h3 id="shu-ru-bu-huo-tong-dao-ying-she">输入捕获通道映射</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205215745688.png" alt="image-20241205215745688"></p>
<p>对应下图中的多路选择器</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241205215850878.png" alt="image-20241205215850878"></p>
<h3 id="shi-li-dai-ma-1">示例代码</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206090405972.png" alt="image-20241206090405972"></p>
<p>我们可以对照框图，根据信号从引脚输入到产生捕获事件，来串起其中涉及到的寄存器。</p>
<ul>
<li>TI1S：Timer Input 1 Selection，选择引脚、还是XOR作为定时器输入1</li>
<li>IC1F：Input Capture 1 的前置滤波器</li>
<li>CC1P：Capture/Compare 1 的极性选择，这里为捕获上升沿（极性配置为高电平有效）还是下降沿</li>
<li>CC1S：Capture/Compare 1 Selction，捕获/比较模式选择
<ul>
<li>比较输出模式</li>
<li>输入捕获模式：选择TI1FP1（Timer Input 1 Filter Polarity 1）作为输入捕获IC1（Input Captrue）的来源</li>
<li>输入捕获模式：选择TI2FP1（Timer Input 2 Filter Polarity 1）作为输入捕获IC1（Input Captrue）的来源</li>
</ul>
</li>
<li>IC1PSC：Input Capture 1 Prescaler，输入捕获预分频，即多少次输入捕获事件后才触发一次CC1I中断事件</li>
</ul>
<h4 id="tim-5-ch-2-chan-sheng-pwm">TIM5_CH2产生PWM</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TIM5_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TIM5_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_CH1_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> duty_cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM5_CH2_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> duty_cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __TIM5_H__ */</span></span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim5.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ===========使能GPIOA和TIM5时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_TIM5EN<span class="token punctuation">;</span>

    <span class="token comment">// ===========GPIO复用推挽 mode=11 cnf=10</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF1_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF1_0<span class="token punctuation">;</span>

    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE0<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF0_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF0_0<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器基本配置</span>
    <span class="token comment">// 定时器溢出频率 100Hz 10ms</span>
    TIM5<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">7200</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 计数方向为向上计数</span>
    TIM5<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_DIR<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器通道2配置</span>
    <span class="token comment">// 默认占空比为50</span>
    TIM5<span class="token operator">-&gt;</span>CCR2 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token comment">// 因为低电平点亮LED，因此输出有效电平极性为低电平</span>
    TIM5<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC2P<span class="token punctuation">;</span> <span class="token comment">// active low</span>
    <span class="token comment">// 通道输入输出选择：比较输出</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC2S<span class="token punctuation">;</span>
    <span class="token comment">// 比较输出模式：PWM1 110</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC2M_2<span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC2M_1<span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_OC2M_0<span class="token punctuation">;</span>
    <span class="token comment">// 使能通道比较输出</span>
    TIM5<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC2E<span class="token punctuation">;</span>

        <span class="token comment">// ===========定时器通道1配置</span>
    <span class="token comment">// 默认占空比为0</span>
    TIM5<span class="token operator">-&gt;</span>CCR1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 因为低电平点亮LED，因此输出有效电平极性为低电平</span>
    TIM5<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1P<span class="token punctuation">;</span> <span class="token comment">// active low</span>
    <span class="token comment">// 通道输入输出选择：比较输出</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC1S<span class="token punctuation">;</span>
    <span class="token comment">// 比较输出模式：PWM1 110</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_2<span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_1<span class="token punctuation">;</span>
    TIM5<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_OC1M_0<span class="token punctuation">;</span>
    <span class="token comment">// 使能通道比较输出</span>
    TIM5<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1E<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_CH2_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> duty_cycle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CCR2 <span class="token operator">=</span> duty_cycle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM5_CH1_SetDutyCycle</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> duty_cycle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM5<span class="token operator">-&gt;</span>CCR1 <span class="token operator">=</span> duty_cycle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="tim-4-ch-1-ce-liang-pwm">TIM4_CH1测量PWM</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TIM4_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TIM4_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM4_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM4_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM4_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __TIM4_H__ */</span></span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="main-c-2">main.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim4.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM4_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ===========使能GPIOA和TIM4时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_TIM4EN<span class="token punctuation">;</span>

    <span class="token comment">// ===========GPIO浮空输入 mode=00 cnf=01 PB6</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_MODE6<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF6_1<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF6_0<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器基本配置</span>
    <span class="token comment">// 定时器输入频率 1MHz</span>
    TIM4<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">72</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span> <span class="token comment">// 尽量不要溢出</span>
    <span class="token comment">// 计数方向为向上计数</span>
    TIM4<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_DIR<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器通道1配置</span>
    TIM4<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR2_TI1S<span class="token punctuation">;</span> <span class="token comment">// 选择CH1引脚作为TI1的来源</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_IC1F<span class="token punctuation">;</span> <span class="token comment">// 不需要输入滤波，被测试的PWM信号没有噪声</span>
    TIM4<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1P<span class="token punctuation">;</span> <span class="token comment">// 捕获上升沿</span>
    <span class="token comment">// 选择TI1的滤波/边沿检测输出1(TI1FP1)作为捕获来源(IC1): 01</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC1S_1<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_CC1S_0<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_IC1PSC<span class="token punctuation">;</span> <span class="token comment">// 不需要对捕获事件分频</span>
    TIM4<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1E<span class="token punctuation">;</span> <span class="token comment">// 使能捕获事件发生时将计数值记录到CCR寄存器中</span>

    <span class="token comment">//============中断配置</span>
    TIM4<span class="token operator">-&gt;</span>DIER <span class="token operator">|=</span> TIM_DIER_CC1IE<span class="token punctuation">;</span> <span class="token comment">// 使能捕获事件中断</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>TIM4_IRQn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>TIM4_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM4_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> TIM4<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM4_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> TIM4<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>TIM4<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> TIM_SR_CC1IF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TIM4<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_CC1IF<span class="token punctuation">;</span>
        <span class="token comment">// 计数值清零，开始对下个PWM周期计数</span>
        TIM4<span class="token operator">-&gt;</span>CNT <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CNT_CNT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过CCR中捕获的计数值来计算PWM周期</span>
    <span class="token comment">// 单次计数 1/1MHz = 1us，再除以1000 返回毫秒数</span>
    <span class="token keyword">return</span> TIM4<span class="token operator">-&gt;</span>CCR1 <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>TIM4<span class="token operator">-&gt;</span>CCR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1 / (CCR1 * 1000000) =&gt; Hz，将us转为s，再取倒数</span>
        <span class="token keyword">return</span> <span class="token number">1000000.0</span> <span class="token operator">/</span> TIM4<span class="token operator">-&gt;</span>CCR1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim5.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim4.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"exti.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM4_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM4_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> cycle <span class="token operator">=</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> freq <span class="token operator">=</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"cycle = %.2f ms, freq = %.2f Hz"</span><span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> freq<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="si-kao-shi-jian-he-zhong-duan-liu-cheng">思考事件和中断流程</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206094121276.png" alt="image-20241206094121276"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206094155768.png" alt="image-20241206094155768"></p>
<p>在上述代码中，当捕获到上升沿时，会发生U更新事件，将计数器（CNT counter）的值捕获到CC1R中（相当于拍了个快照），<mark>该操作是由硬件电路自动完成的（硬件电路捕获到上升沿的时刻立即自动完成）</mark>。而如果我们通过CC1E使能了捕获/比较事件中断，那么该<mark>事件发生后</mark>（CC1R已保存了捕获的值），就会产生一个CC1I中断，递交NVIC，随后在合适的时机执行向量表中对应的中断处理函数（通过 <code>B</code>指令，关于ARM核异常处理机制，可参考本站文章《ARM核学习（五）异常处理》）。</p>
<p>所以在上述代码中，我们可以在中断处理函数中通过CC1R读取到捕获事件发生时计数器的快照值。</p>
<h3 id="hal-ku-shi-xian-3">HAL库实现</h3>
<h4 id="debug-amp-rcc">Debug &amp; RCC</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206101625690.png" alt="image-20241206101625690"></p>
<h4 id="chuan-kou-da-yin">串口打印</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206101717828.png" alt="image-20241206101717828"></p>
<h4 id="tim-5-ch-2-shu-chu-pwm">TIM5_CH2输出PWM</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206102508269.png" alt="image-20241206102508269"></p>
<h4 id="tim-4-ch-1-shu-ru-bu-huo-amp-afio-zhong-ying-she">TIM4_CH1输入捕获 &amp; AFIO重映射</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206103208047.png" alt="image-20241206103208047"></p>
<h4 id="tim-4-zhong-duan-shi-neng">TIM4中断使能</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206105647297.png" alt="image-20241206105647297"></p>
<h4 id="printf-zhong-ding-xiang">printf重定向</h4>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206103342197.png" alt="image-20241206103342197" style="zoom: 50%;">
<p><code>usart.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 0 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token comment">/* USER CODE END 0 */</span>

<span class="token comment">/* USER CODE BEGIN 1 */</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="shi-li-dai-ma-2">示例代码</h4>
<p><code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_TIM4_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_TIM5_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token comment">// TIM5 CH2 输出PWM</span>
  <span class="token function">HAL_TIM_PWM_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim5<span class="token punctuation">,</span> TIM_CHANNEL_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// TIM4 CH1 输入捕获</span>
  <span class="token function">HAL_TIM_IC_Start_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim4<span class="token punctuation">,</span> TIM_CHANNEL_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cycle = %.2f ms, freq = %.2f Hz\n"</span><span class="token punctuation">,</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>tim.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 1 */</span>
<span class="token keyword">void</span> <span class="token function">HAL_TIM_IC_CaptureCallback</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>htim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>htim <span class="token operator">==</span> <span class="token operator">&amp;</span>htim4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">__HAL_TIM_SET_COUNTER</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过CCR中捕获的计数值来计算PWM周期</span>
    <span class="token comment">// 单次计数 1/1MHz = 1us，再除以1000 返回毫秒数</span>
    <span class="token keyword">return</span> <span class="token function">__HAL_TIM_GET_COMPARE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim4<span class="token punctuation">,</span> TIM_CHANNEL_1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> CCR <span class="token operator">=</span> <span class="token function">__HAL_TIM_GET_COMPARE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim4<span class="token punctuation">,</span> TIM_CHANNEL_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>CCR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1 / (CCR1 * 1000000) =&gt; Hz，将us转为s，再取倒数</span>
        <span class="token keyword">return</span> <span class="token number">1000000.0</span> <span class="token operator">/</span> CCR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="shi-yan-3-tong-shi-ce-liang-pwm-zhou-qi-pin-lu-zhan-kong-bi">实验3-同时测量PWM周期/频率/占空比</h2>
<h3 id="ding-shi-qi-hong-fa-xin-hao">定时器触发信号</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206110818625.png" alt="image-20241206110818625"></p>
<h3 id="hong-fa-shu-ru-xin-hao-di-yi-lei-lai-yuan-yu-qi-ta-ding-shi-qi-de-trgo">触发输入信号第一类——来源于其他定时器的TRGO</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206111247477.png" alt="image-20241206111247477"></p>
<h3 id="hong-fa-shu-ru-xin-hao-di-er-lei-wai-bu-hong-fa-yin-jiao-etr">触发输入信号第二类——外部触发引脚ETR</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206111541318.png" alt="image-20241206111541318"></p>
<blockquote>
<p>[!NOTE]</p>
<p>TIMx_CHx引脚比ETR更具有针对性，主要用于输入捕获</p>
</blockquote>
<h3 id="hong-fa-shu-ru-xin-hao-di-san-lei-ti-1-f-ed">触发输入信号第三类——TI1F_ED</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206112051092.png" alt="image-20241206112051092"></p>
<h3 id="hong-fa-shu-ru-xin-hao-di-si-lei-ti-1-fp-1-ti-2-fp-2">触发输入信号第四类——TI1FP1/TI2FP2</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206112524528.png" alt="image-20241206112524528"></p>
<h3 id="ding-shi-qi-cong-mo-shi">定时器从模式</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206113102739.png" alt="image-20241206113102739"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206113306671.png" alt="image-20241206113306671"></p>
<h3 id="pwm-shu-ru-mo-shi">PWM输入模式</h3>
<blockquote>
<p>[!NOTE]</p>
<p>参考手册：15.3.6 PWM input mode</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206113849114.png" alt="image-20241206113849114"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206114143525.png" alt="image-20241206114143525"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206132233091.png" alt="image-20241206132233091"></p>
<h3 id="shi-li-dai-ma-3">示例代码</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206130223507.png" alt="image-20241206130223507"></p>
<p>在实验2的基础上，我们对照框图看看需要调整哪些配置：</p>
<ul>
<li>从模式控制器
<ul>
<li>之前我们通过上升沿捕获事件<mark>中断</mark>来将计数器的值清零</li>
<li>现在我们可以通过将TI1FP1作为从模式控制器的触发输入信号（TRGI），并配置从模式为复位模式，这样TI1FP1信号中的上升沿会触发从模式控制器自动将计数值清零（<mark>硬件自动完成</mark>）</li>
</ul>
</li>
<li>增加输入捕获通道2，但是输入捕获来源IC2不是CH2引脚，而是TI1经过滤波和边沿检测后的TI1FP2信号，我们可以将通道2的极性（CCER-CC2P）配置为下降沿，这样IC2的下降沿就会产生捕获事件，将PWM高电平对应的计数值记录到CC2R中</li>
</ul>
<h4 id="tim-4">tim4</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TIM4_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TIM4_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM4_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM4_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">TIM4_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMDutyCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __TIM4_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim4.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM4_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ===========使能GPIOA和TIM4时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_TIM4EN<span class="token punctuation">;</span>

    <span class="token comment">// ===========GPIO浮空输入 mode=00 cnf=01 PB6</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_MODE6<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF6_1<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF6_0<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器基本配置</span>
    <span class="token comment">// 定时器输入频率 1MHz</span>
    TIM4<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">72</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span> <span class="token comment">// 尽量不要溢出</span>
    <span class="token comment">// 计数方向为向上计数</span>
    TIM4<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_DIR<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器通道1配置</span>
    TIM4<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR2_TI1S<span class="token punctuation">;</span> <span class="token comment">// 选择CH1引脚作为TI1的来源</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_IC1F<span class="token punctuation">;</span> <span class="token comment">// 不需要输入滤波，被测试的PWM信号没有噪声</span>
    TIM4<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1P<span class="token punctuation">;</span> <span class="token comment">// 捕获上升沿</span>
    <span class="token comment">// 选择TI1的滤波/边沿检测输出1(TI1FP1)作为捕获来源(IC1): 01</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC1S_1<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_CC1S_0<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_IC1PSC<span class="token punctuation">;</span> <span class="token comment">// 不需要对捕获事件分频</span>
    TIM4<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span>
        TIM_CCER_CC1E<span class="token punctuation">;</span> <span class="token comment">// 使能输入捕获（事件发生时将计数值记录到CCR寄存器中）</span>

    <span class="token comment">// ===========定时器通道2配置</span>
    TIM4<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1P<span class="token punctuation">;</span> <span class="token comment">// 捕获下降沿</span>
    <span class="token comment">// 选择TI1FP2作为IC2 =&gt; 10</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_CC2S_1<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC2S_0<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_IC2PSC<span class="token punctuation">;</span> <span class="token comment">// 不需要对捕获事件分频</span>
    TIM4<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span>
        TIM_CCER_CC2E<span class="token punctuation">;</span> <span class="token comment">// 使能输入捕获（事件发生时将计数值记录到CCR寄存器中）</span>

    <span class="token comment">//============不需要中断来将计数值清零了，通过从模式+上升沿触发来自动完成</span>
    <span class="token comment">// TIM4-&gt;DIER |= TIM_DIER_CC1IE; // 使能捕获事件中断</span>
    <span class="token comment">// NVIC_SetPriorityGrouping(3);</span>
    <span class="token comment">// NVIC_SetPriority(TIM4_IRQn, 3);</span>
    <span class="token comment">// NVIC_EnableIRQ(TIM4_IRQn);</span>

    <span class="token comment">// =============从模式控制器配置</span>
    <span class="token comment">// 从模式选择：复位模式 =&gt; 100</span>
    TIM4<span class="token operator">-&gt;</span>SMCR <span class="token operator">|=</span> TIM_SMCR_SMS_2<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>SMCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SMCR_SMS_1<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>SMCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SMCR_SMS_0<span class="token punctuation">;</span>
    <span class="token comment">// 从模式触发输入多路选择：TI1FP1 =&gt; 101</span>
    TIM4<span class="token operator">-&gt;</span>SMCR <span class="token operator">|=</span> TIM_SMCR_TS_2<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>SMCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SMCR_TS_1<span class="token punctuation">;</span>
    TIM4<span class="token operator">-&gt;</span>SMCR <span class="token operator">|=</span> TIM_SMCR_TS_0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM4_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> TIM4<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM4_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> TIM4<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>TIM4<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> TIM_SR_CC1IF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TIM4<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_CC1IF<span class="token punctuation">;</span>
        <span class="token comment">// 计数值清零，开始对下个PWM周期计数</span>
        TIM4<span class="token operator">-&gt;</span>CNT <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CNT_CNT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过CCR中捕获的计数值来计算PWM周期</span>
    <span class="token comment">// 单次计数 1/1MHz = 1us，再除以1000 返回毫秒数</span>
    <span class="token keyword">return</span> TIM4<span class="token operator">-&gt;</span>CCR1 <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>TIM4<span class="token operator">-&gt;</span>CCR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1 / (CCR1 * 1000000) =&gt; Hz，将us转为s，再取倒数</span>
        <span class="token keyword">return</span> <span class="token number">1000000.0</span> <span class="token operator">/</span> TIM4<span class="token operator">-&gt;</span>CCR1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">TIM4_CH1_GetPWMDutyCycle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>TIM4<span class="token operator">-&gt;</span>CCR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> TIM4<span class="token operator">-&gt;</span>CCR2 <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> TIM4<span class="token operator">-&gt;</span>CCR1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="main-2">main</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim5.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim4.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"exti.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM4_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">TIM5_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM4_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> cycle <span class="token operator">=</span> <span class="token function">TIM4_CH1_GetPWMCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> freq <span class="token operator">=</span> <span class="token function">TIM4_CH1_GetPWMFreq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> duty <span class="token operator">=</span> <span class="token function">TIM4_CH1_GetPWMDutyCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"cycle = %.2f ms, freq = %.2f Hz, duty = %.2f %%"</span><span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> freq<span class="token punctuation">,</span> duty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="hal-ku-shi-xian-4">HAL库实现</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206141354596.png" alt="image-20241206141354596"></p>
<h1 id="gao-ji-ding-shi-qi">高级定时器</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206142745316.png" alt="image-20241206142745316"></p>
<h2 id="zhong-fu-ji-shu-qi">重复计数器</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206142916268.png" alt="image-20241206142916268"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206144030225.png" alt="image-20241206144030225"></p>
<h2 id="hu-bu-shu-chu">互补输出</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206144212749.png" alt=""></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206144550525.png" alt="image-20241206144550525"></p>
<h2 id="si-qu-shi-jian">死区时间</h2>
<p>死区时间指的是在两个开关器件（如 MOSFET 或 IGBT）切换过程中，故意引入的延时，用来确保一个开关完全关闭后，另一个开关才会导通。（<mark>MOS管具有关断慢，开通快的特性</mark>）</p>
<p><strong>例如：<strong>在 H 桥或半桥电路中，两个开关器件（上桥臂和下桥臂）不能同时导通，否则会造成</strong>直通故障</strong>，即电源正极直接短路到负极。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206145048925.png" alt="image-20241206145048925"></p>
<h2 id="cha-che-shu-ru-xin-hao">刹车输入信号</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206145502383.png" alt="image-20241206145502383"></p>
<h2 id="shi-yan-shu-chu-you-xian-ge-zhou-qi-de-pwm-bo">实验-输出有限个周期的PWM波</h2>
<h3 id="xu-qiu">需求</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206145801442.png" alt="image-20241206145801442"></p>
<h3 id="ying-jian">硬件</h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206145943045.png" alt="image-20241206145943045" style="zoom:33%;">
<h3 id="ji-cun-qi-fen-xi">寄存器分析</h3>
<h4 id="zhong-fu-ji-shu-qi-rep">重复计数器REP</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206145721960.png" alt="image-20241206145721960"></p>
<h4 id="zhu-shu-chu-shi-neng">主输出使能</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206150128592.png" alt="image-20241206150128592"></p>
<h3 id="shi-li-dai-ma-4">示例代码</h3>
<h4 id="tim-1">tim1</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tim1.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">TIM1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ===========使能GPIOA和TIM1时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_TIM1EN<span class="token punctuation">;</span>

    <span class="token comment">// ===========GPIO复用推挽 PA8 mode=11 cnf=10</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE8<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF8_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF8_0<span class="token punctuation">;</span>

    <span class="token comment">// ===========定时器配置</span>
    <span class="token comment">// 定时器溢出频率 71MHz / 7200 / 5000 = 2Hz 0.5s</span>
    TIM1<span class="token operator">-&gt;</span>PSC <span class="token operator">=</span> <span class="token number">7199</span><span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>ARR <span class="token operator">=</span> <span class="token number">4999</span><span class="token punctuation">;</span>
    <span class="token comment">// 计数方向为向上计数</span>
    TIM1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_DIR<span class="token punctuation">;</span>
    <span class="token comment">// 重复计数器</span>
    TIM1<span class="token operator">-&gt;</span>RCR <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 需要生成5个PWM周期</span>

    <span class="token comment">// ===========定时器通道1输出配置</span>
    TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_CC1S<span class="token punctuation">;</span> <span class="token comment">// 配置通道为比较输出模式</span>
    <span class="token comment">// 配置输出模式为PWM1 =&gt; 110</span>
    TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_2<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_1<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_OC1M_0<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>CCR1 <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span> <span class="token comment">// 配置比较值</span>
    <span class="token comment">// 配置输出使能，工作电平极性: 低电平点亮LED</span>
    TIM1<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1P<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> TIM_CR2_OIS1<span class="token punctuation">;</span> <span class="token comment">// 关闭主输出使能MOE后，输出通道的空闲状态：OC1=1</span>

    <span class="token comment">// 将所有预装载的寄存器加载到对应的工作寄存器中，并清除由此导致的中断标志</span>
    TIM1<span class="token operator">-&gt;</span>EGR <span class="token operator">|=</span> TIM_EGR_UG<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_UIF<span class="token punctuation">;</span>
    <span class="token comment">// 或者设置URS使UG不产生更新中断</span>
    <span class="token comment">// TIM1-&gt;CR1 |= TIM_CR1_URS;</span>
    <span class="token comment">// TIM1-&gt;EGR |= TIM_EGR_UG;</span>

    TIM1<span class="token operator">-&gt;</span>CCER <span class="token operator">|=</span> TIM_CCER_CC1E<span class="token punctuation">;</span>

    <span class="token comment">// ===========高级定时器相关配置</span>
    <span class="token comment">// 重复计数器更新中断</span>
    TIM1<span class="token operator">-&gt;</span>DIER <span class="token operator">|=</span> TIM_DIER_UIE<span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>TIM1_UP_IRQn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>TIM1_UP_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM1_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 主输出使能，通道输出使能</span>
    TIM1<span class="token operator">-&gt;</span>BDTR <span class="token operator">|=</span> TIM_BDTR_MOE<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM1_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM1<span class="token operator">-&gt;</span>BDTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_BDTR_MOE<span class="token punctuation">;</span>
    TIM1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CR1_CEN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">TIM1_UP_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TIM1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_UIF<span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"TIM1_UP_IRQHandler"</span><span class="token punctuation">)</span>
    <span class="token function">TIM1_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="main-3">main</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token function">TIM1_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="yi-liu-wen-ti">遗留问题</h4>
<p>如下两个不同的配置顺序会导致不同的结果</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 配置输出模式为PWM1 =&gt; 110</span>
TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_2<span class="token punctuation">;</span>
TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_1<span class="token punctuation">;</span>
TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_OC1M_0<span class="token punctuation">;</span>
TIM1<span class="token operator">-&gt;</span>CCR1 <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span> <span class="token comment">// 配置比较值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206172619192.png" alt="image-20241206172619192"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">TIM1<span class="token operator">-&gt;</span>CCR1 <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span> <span class="token comment">// 配置比较值</span>
<span class="token comment">// 配置输出模式为PWM1 =&gt; 110</span>
TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_2<span class="token punctuation">;</span>
TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">|=</span> TIM_CCMR1_OC1M_1<span class="token punctuation">;</span>
TIM1<span class="token operator">-&gt;</span>CCMR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_CCMR1_OC1M_0<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206172708938.png" alt="image-20241206172708938"></p>
<h3 id="shi-yong-ug-qiang-zhi-shua-xin-yu-zhuang-zai-zhi">使用UG强制刷新预装载值</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 将所有预加载的寄存器加载到对应的工作寄存器中，并清除由此导致的中断标志</span>
TIM1<span class="token operator">-&gt;</span>EGR <span class="token operator">|=</span> TIM_EGR_UG<span class="token punctuation">;</span>
TIM1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;=</span> <span class="token operator">~</span>TIM_SR_UIF<span class="token punctuation">;</span>
<span class="token comment">// 或者设置URS使UG不产生更新中断</span>
<span class="token comment">// TIM1-&gt;CR1 |= TIM_CR1_URS;</span>
<span class="token comment">// TIM1-&gt;EGR |= TIM_EGR_UG;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206184702361.png" alt="image-20241206184702361"></p>
<h3 id="hal-ku-shi-xian-5">HAL库实现</h3>
<h4 id="ding-shi-qi-he-tong-dao-pei-zhi">定时器和通道配置</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206184508910.png" alt="image-20241206184508910"></p>
<h4 id="tong-guo-geng-xin-shi-jian-zhong-duan-lai-ting-zhi-ding-shi-qi">通过更新事件中断来停止定时器</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206184152397.png" alt="image-20241206184152397"></p>
<h4 id="tim-1-ch-1-zhong-ying-she-wei-pa-8">TIM1_CH1重映射为PA8</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241206184220481.png" alt="image-20241206184220481"></p>
<h4 id="dai-ma-shi-xian">代码实现</h4>
<h5 id="main-c-3">main.c</h5>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_TIM1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token comment">// 清除定时器初始化时调用UG(Update Generation)强制刷新预装载值产生的更新中断</span>
  <span class="token function">__HAL_TIM_CLEAR_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim1<span class="token punctuation">,</span> TIM_IT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__HAL_TIM_ENABLE_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim1<span class="token punctuation">,</span> TIM_IT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAL_TIM_PWM_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim1<span class="token punctuation">,</span> TIM_CHANNEL_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="tim-c">tim.c</h5>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 1 */</span>
<span class="token keyword">void</span> <span class="token function">HAL_TIM_PeriodElapsedCallback</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>htim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>htim <span class="token operator">==</span> <span class="token operator">&amp;</span>htim1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">HAL_TIM_PWM_Stop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim1<span class="token punctuation">,</span> TIM_CHANNEL_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>TIMER</tag>
        <tag>定时器</tag>
        <tag>TIM</tag>
      </tags>
  </entry>
  <entry>
    <title>掌握 STM32 PWR 电源管理：降低功耗的策略与技巧</title>
    <url>/2024/12/17/42586.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
<li><a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual  </a></li>
</ul>
<h1 id="di-gong-hao-mo-shi-gai-lan">低功耗模式概览</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218101004440.png" alt="image-20241218101004440"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218093555836.png" alt="image-20241218093555836"></p>
<h1 id="shui-mian-mo-shi-sleep">睡眠模式-Sleep</h1>
<h2 id="ji-cun-qi-shi-xian">寄存器实现</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217222619344.png" alt="image-20241217222619344"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241217222715054.png" alt="image-20241217222715054"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218090949304.png" alt="image-20241218090949304"></p>
<blockquote>
<p>注意：这里最好延时3秒再进入睡眠，给下次烧录预留点缓冲时间（睡眠模式下烧录无法识别设备）</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218101833417.png" alt="image-20241218101833417" style="zoom:25%;">
<h2 id="ce-shi">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218094547425.png" alt="image-20241218094547425"></p>
<h2 id="hal-ku-shi-xian">HAL库实现</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218102329835.png" alt="image-20241218102329835"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218102504340.png" alt="image-20241218102504340" style="zoom:25%;">
<h1 id="ting-zhi-mo-shi-stop">停止模式-Stop</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218104104296.png" alt="image-20241218104104296"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218103249363.png" alt="image-20241218103249363"></p>
<blockquote>
<p>退出停止模式后，HSI会被选择作为系统时钟，因此我们需要重新打通HSE和PLL</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218124049119.png" alt="image-20241218124049119"></p>
<h2 id="shi-li-dai-ma">示例代码</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218125130153.png" alt="image-20241218125130153"></p>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">enter_stop_mode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCB<span class="token operator">-&gt;</span>SCR <span class="token operator">|=</span> SCB_SCR_SLEEPDEEP<span class="token punctuation">;</span>

    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_PWREN<span class="token punctuation">;</span> <span class="token comment">// 配置PWR之前需要使能其时钟</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;=</span> <span class="token operator">~</span>PWR_CR_PDDS<span class="token punctuation">;</span>           <span class="token comment">// 停止模式</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_LPDS<span class="token punctuation">;</span> <span class="token comment">// 停止模式下电压调节器为低功耗模式</span>
    <span class="token function">__WFI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 进入停止模式</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">get_system_clock</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>sysclk<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>hclck<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>pclk1<span class="token punctuation">,</span>
                      <span class="token class-name">uint32_t</span> <span class="token operator">*</span>pclk2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> rcc_config <span class="token operator">=</span> RCC<span class="token operator">-&gt;</span>CFGR<span class="token punctuation">;</span>

    <span class="token comment">// 根据sysclk时钟源来计算其频率</span>
    <span class="token class-name">uint32_t</span> sysclk_source <span class="token operator">=</span> rcc_config <span class="token operator">&amp;</span> RCC_CFGR_SWS<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sysclk_source <span class="token operator">==</span> RCC_CFGR_SWS_HSI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>sysclk <span class="token operator">=</span> HSI_VALUE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sysclk_source <span class="token operator">==</span> RCC_CFGR_SWS_HSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>sysclk <span class="token operator">=</span> HSE_VALUE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sysclk_source <span class="token operator">==</span> RCC_CFGR_SWS_PLL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// HSE*PLL倍频系数</span>
        <span class="token class-name">uint8_t</span> pllmul <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rcc_config <span class="token operator">&amp;</span> RCC_CFGR_PLLMULL<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>sysclk <span class="token operator">=</span> HSE_VALUE <span class="token operator">*</span> pllmul<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 根据AHP预分频计算hclk</span>
    <span class="token class-name">uint8_t</span> hpre <span class="token operator">=</span> <span class="token punctuation">(</span>rcc_config <span class="token operator">&amp;</span> RCC_CFGR_HPRE<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hpre <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>hclck <span class="token operator">=</span> <span class="token operator">*</span>sysclk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hpre <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>hclck <span class="token operator">=</span> <span class="token operator">*</span>sysclk <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>hpre <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>hclck <span class="token operator">=</span> <span class="token operator">*</span>sysclk <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>hpre <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 根据apb的预分频计算pclk</span>
    <span class="token class-name">uint8_t</span> ppre1 <span class="token operator">=</span> <span class="token punctuation">(</span>rcc_config <span class="token operator">&amp;</span> RCC_CFGR_PPRE1<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> ppre2 <span class="token operator">=</span> <span class="token punctuation">(</span>rcc_config <span class="token operator">&amp;</span> RCC_CFGR_PPRE2<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ppre1 <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>pclk1 <span class="token operator">=</span> <span class="token operator">*</span>sysclk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>pclk1 <span class="token operator">=</span> <span class="token operator">*</span>sysclk <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>ppre1 <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ppre2 <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>pclk2 <span class="token operator">=</span> <span class="token operator">*</span>sysclk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>pclk2 <span class="token operator">=</span> <span class="token operator">*</span>sysclk <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>ppre2 <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将系统时钟从HSI切换到HSE+PLL，参考SystemInit</span>
<span class="token keyword">void</span> <span class="token function">config_system_clock</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使能HSE</span>
    RCC<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> RCC_CR_HSEON<span class="token punctuation">;</span>
    <span class="token comment">// 等待HSE就绪</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;</span> RCC_CR_HSERDY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 选择HSE作为PLL源</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> RCC_CFGR_PLLSRC_HSE<span class="token punctuation">;</span>
    <span class="token comment">// 关闭HSI</span>
    RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_CR_HSION<span class="token punctuation">;</span>
    <span class="token comment">// 使能PLL</span>
    RCC<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> RCC_CR_PLLON<span class="token punctuation">;</span>
    <span class="token comment">// 等待PLL就绪</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>CR <span class="token operator">&amp;</span> RCC_CR_PLLRDY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 选择PLL作为sysclk</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_CFGR_SW<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> RCC_CFGR_SW_1<span class="token punctuation">;</span>
    <span class="token comment">// 等待切换完成</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;</span> RCC_CFGR_SWS<span class="token punctuation">)</span> <span class="token operator">!=</span> RCC_CFGR_SWS_PLL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span>

    <span class="token comment">// 停止模式下，IO保持运行时状态</span>
    <span class="token function">LED_On</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加个延时，给下次烧录预留点缓冲时间</span>

        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"进入停止模式，可通过外部中断按键唤醒"</span><span class="token punctuation">)</span>
        <span class="token function">enter_stop_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 查看切换PLL前时钟频率</span>
        <span class="token class-name">uint32_t</span> sysclk<span class="token punctuation">,</span> hclck<span class="token punctuation">,</span> pclk1<span class="token punctuation">,</span> pclk2<span class="token punctuation">;</span>
        <span class="token function">get_system_clock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sysclk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hclck<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pclk1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pclk2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">config_system_clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换HSI为PLL</span>

        <span class="token comment">// 查看切换PLL后时钟频率</span>
        <span class="token class-name">uint32_t</span> sysclk_after<span class="token punctuation">,</span> hclck_after<span class="token punctuation">,</span> pclk1_after<span class="token punctuation">,</span> pclk2_after<span class="token punctuation">;</span>
        <span class="token function">get_system_clock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sysclk_after<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hclck_after<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pclk1_after<span class="token punctuation">,</span>
                         <span class="token operator">&amp;</span>pclk2_after<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"从停止模式退出"</span><span class="token punctuation">)</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"PLL切换前, sysclk = %d, hclk = %d, pclk1 = %d, pclk2 = %d"</span><span class="token punctuation">,</span>
                  sysclk<span class="token punctuation">,</span> hclck<span class="token punctuation">,</span> pclk1<span class="token punctuation">,</span> pclk2<span class="token punctuation">)</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"PLL切换后, sysclk = %d, hclk = %d, pclk1 = %d, pclk2 = %d"</span><span class="token punctuation">,</span>
                  sysclk_after<span class="token punctuation">,</span> hclck_after<span class="token punctuation">,</span> pclk1_after<span class="token punctuation">,</span> pclk2_after<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="key-c">key.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>



<span class="token keyword">void</span> <span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// gpio clock</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPFEN<span class="token punctuation">;</span>
    <span class="token comment">// afio clock</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span>

    <span class="token comment">// gpio config for PF10</span>
    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_1<span class="token punctuation">;</span>   <span class="token comment">// input with pull-up/down</span>
    GPIOF<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_0<span class="token punctuation">;</span>
    GPIOF<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">;</span>   <span class="token comment">// pull-down</span>

    <span class="token comment">// afio config</span>
    AFIO<span class="token operator">-&gt;</span>EXTICR<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_EXTICR3_EXTI10<span class="token punctuation">;</span>
    AFIO<span class="token operator">-&gt;</span>EXTICR<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> AFIO_EXTICR3_EXTI10_PF<span class="token punctuation">;</span>   <span class="token comment">// select PF as exti10</span>

    <span class="token comment">// exti config</span>
    EXTI<span class="token operator">-&gt;</span>IMR <span class="token operator">|=</span> EXTI_IMR_MR10<span class="token punctuation">;</span>   <span class="token comment">// unmask interrupt</span>
    EXTI<span class="token operator">-&gt;</span>RTSR <span class="token operator">|=</span> EXTI_RTSR_TR10<span class="token punctuation">;</span>   <span class="token comment">// rising edge trigger</span>

    <span class="token comment">// nvic config</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// only pre-priority</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>EXTI15_10_IRQn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>EXTI15_10_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// response interrupt</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">EXTI15_10_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    EXTI<span class="token operator">-&gt;</span>PR <span class="token operator">|=</span> EXTI_PR_PR10<span class="token punctuation">;</span>   <span class="token comment">// clear pending flag</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>GPIOF<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR10<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-1">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218115945697.png" alt="image-20241218115945697"></p>
<h2 id="hal-ku-shi-xian-1">HAL库实现</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218125931172.png" alt="image-20241218125931172"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218125954456.png" alt="image-20241218125954456"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218130243584.png" alt="image-20241218130243584"></p>
<h1 id="dai-ji-mo-shi-standby">待机模式-Standby</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218133909621.png" alt="image-20241218133909621"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218134919226.png" alt="image-20241218134919226"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218133930441.png" alt="image-20241218133930441"></p>
<h2 id="shi-li-dai-ma-1">示例代码</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218145929098.png" alt="image-20241218145929098"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">enter_standby_mode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使能唤醒引脚(PA0)，引脚会被强制为输入下拉配置（最好提前使能GPIOA的时钟）</span>
    PWR<span class="token operator">-&gt;</span>CSR <span class="token operator">|=</span> PWR_CSR_EWUP<span class="token punctuation">;</span>

    SCB<span class="token operator">-&gt;</span>SCR <span class="token operator">|=</span> SCB_SCR_SLEEPDEEP<span class="token punctuation">;</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_PDDS<span class="token punctuation">;</span>
    PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_CWUF<span class="token punctuation">;</span> <span class="token comment">// CSR-WUF的清除需要通过置位CR-CWUF</span>
    <span class="token function">__WFI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 需要访问PWR寄存器，提前开启时钟</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_PWREN<span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>

    <span class="token comment">// SBF指示了曾经是否进入过待机模式</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>PWR<span class="token operator">-&gt;</span>CSR <span class="token operator">&amp;</span> PWR_CSR_SBF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"当前复位由待机模式下唤醒"</span><span class="token punctuation">)</span>
        PWR<span class="token operator">-&gt;</span>CR <span class="token operator">|=</span> PWR_CR_CSBF<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"非待机唤醒复位"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 待机模式下, IO为高阻态（除了复位、唤醒引脚）</span>
    <span class="token function">LED_On</span><span class="token punctuation">(</span>LED2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加个延时，给下次烧录预留点缓冲时间</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"进入待机模式，可通过复位和唤醒引脚退出"</span><span class="token punctuation">)</span>
        <span class="token function">enter_standby_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"退出待机模式"</span><span class="token punctuation">)</span> <span class="token comment">// 待机模式唤醒后，走复位流程</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ce-shi-2">测试</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218145708151.png" alt="image-20241218145708151"></p>
<h2 id="hal-ku-shi-xian-2">HAL库实现</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218151932900.png" alt="image-20241218151932900"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218152010642.png" alt="image-20241218152010642" style="zoom:50%;">
<h1 id="zong-jie">总结</h1>
<p>降低功耗方向：</p>
<ul>
<li>数字信号时钟
<ul>
<li>CPU时钟：停止执行指令</li>
<li>外设时钟：外设停止工作</li>
</ul>
</li>
<li>高速晶振：唤醒后需要将HSI切换为HSE+PLL</li>
<li>电压调节器
<ul>
<li>寄存器、SRAM保护：决定唤醒后能否恢复现场继续执行</li>
</ul>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218093555836.png" alt="image-20241218093555836"></p>
<h1 id="tuo-zhan">拓展</h1>
<h2 id="dian-ya-diao-jie-qi">电压调节器</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218152722411.png" alt="image-20241218152722411"></p>
<h2 id="shang-dian-fu-wei-he-diao-dian-fu-wei">上电复位和掉电复位</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241218152757027.png" alt="image-20241218152757027"></p>
<h3 id="por-he-pdr-de-qu-bie">POR 和 PDR 的区别</h3>
<table>
<thead>
<tr>
<th>特性</th>
<th>Power-on Reset (POR)</th>
<th>Power-down Reset (PDR)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>触发条件</strong></td>
<td>上电时，电压从 0 上升到工作电压范围</td>
<td>电源电压下降到芯片最低工作电压以下</td>
</tr>
<tr>
<td><strong>工作阶段</strong></td>
<td>上电初始阶段</td>
<td>运行过程中</td>
</tr>
<tr>
<td><strong>作用</strong></td>
<td>确保芯片在电压足够高时才开始运行</td>
<td>保护芯片在欠压情况下停止运行，防止错误执行</td>
</tr>
<tr>
<td><strong>典型应用场景</strong></td>
<td>芯片启动时（比如接入电池或插上外部电源）</td>
<td>运行过程中发生电源波动或断电</td>
</tr>
<tr>
<td><strong>复位时机</strong></td>
<td>电压达到指定门限时释放复位信号</td>
<td>电压回升到指定门限以上时释放复位信号</td>
</tr>
<tr>
<td><strong>复位阈值</strong></td>
<td>通常比 PDR 的电压门限稍高</td>
<td>通常比 POR 的电压门限稍低</td>
</tr>
</tbody>
</table>
<h3 id="strong-por-he-pdr-de-zhong-yao-xing-strong"><strong>POR 和 PDR 的重要性</strong></h3>
<p>这两种复位机制在系统稳定性中扮演着重要角色：</p>
<h4 id="strong-power-on-reset-de-zhong-yao-xing-strong"><strong>Power-on Reset 的重要性</strong></h4>
<ul>
<li>确保芯片只有在供电电压达到安全范围后才会运行。</li>
<li>避免芯片在电压未稳定时尝试执行指令，导致系统崩溃或初始化失败。</li>
</ul>
<h4 id="strong-power-down-reset-de-zhong-yao-xing-strong"><strong>Power-down Reset 的重要性</strong></h4>
<ul>
<li>防止在电源电压过低时运行 MCU，避免损坏外设或执行错误代码。</li>
<li>在电池供电系统中，保护用户数据或触发安全关机流程。</li>
</ul>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>低功耗</tag>
        <tag>电源管理</tag>
      </tags>
  </entry>
  <entry>
    <title>掌握CAN总线：原理解析与开发实践</title>
    <url>/2024/12/11/43974.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<h2 id="wen-dang-zi-liao">文档资料</h2>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
<li><a href="http://esd.cs.ucr.edu/webres/can20.pdf">CAN Specification</a></li>
<li>瑞萨CAN入门书
<ul>
<li><a href="https://d1.amobbs.com/bbs_upload782111/files_34/ourdev_592917X7VICE.pdf">https://d1.amobbs.com/bbs_upload782111/files_34/ourdev_592917X7VICE.pdf</a></li>
<li><a href="https://www.scribd.com/document/382995112/%E7%91%9E%E8%90%A8CAN-pdf">https://www.scribd.com/document/382995112/瑞萨CAN-pdf</a></li>
</ul>
</li>
</ul>
<h2 id="shi-pin-jiao-cheng">视频教程</h2>
<p>江协科技CAN总线教程</p>
<iframe src="//player.bilibili.com/player.html?isOutside=true&amp;aid=1303451568&amp;bvid=BV1vu4m1F7Gt&amp;cid=1513756504&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
<h1 id="yuan-li-jie-xi">原理解析</h1>
<h2 id="can-jian-jie">CAN简介</h2>
<ul>
<li>
<p>CAN总线（Controller Area Network Bus）控制器局域网总线</p>
</li>
<li>
<p>CAN总线是由BOSCH公司开发的一种<mark>简洁易用、传输速度快、易扩展、可靠性高的串行通信总线</mark>，广泛应用于汽车、嵌入式、工业控制等领域</p>
</li>
<li>
<p>CAN总线特征：</p>
<ul>
<li>
<p>两根通信线（CAN_H、CAN_L），线路少</p>
</li>
<li>
<p>差分信号通信，抗干扰能力强</p>
</li>
<li>
<p>高速CAN（ISO11898）：125k~1Mbps, &lt;40m</p>
</li>
<li>
<p>低速CAN（ISO11519）：10k~125kbps, &lt;1km</p>
</li>
<li>
<p>异步，无需时钟线，通信速率由设备各自约定</p>
</li>
<li>
<p>半双工，可挂载多设备，多设备同时发送数据时通过仲裁判断先后顺序</p>
</li>
<li>
<p>11位/29位报文ID，用于区分消息功能，同时决定优先级</p>
</li>
<li>
<p>可配置1~8字节的有效载荷</p>
</li>
<li>
<p>可实现广播式和请求式两种传输方式</p>
</li>
<li>
<p>应答、CRC校验、位填充、位同步、错误处理等特性</p>
</li>
</ul>
</li>
</ul>
<h2 id="wu-li-ceng">物理层</h2>
<h3 id="zhu-liu-tong-xin-xie-yi-dui-bi">主流通信协议对比</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103157423.png" alt="image-20241211103157423"></p>
<h3 id="can-ying-jian-dian-lu">CAN硬件电路</h3>
<ul>
<li>每个设备通过CAN收发器挂载在CAN总线网络上</li>
<li>CAN控制器引出的TX和RX与CAN收发器相连，CAN收发器引出的CAN_H和CAN_L分别与总线的CAN_H和CAN_L相连</li>
<li>高速CAN使用闭环网络，CAN_H和CAN_L两端添加120Ω的终端电阻</li>
<li>低速CAN使用开环网络，CAN_H和CAN_L其中一端添加2.2kΩ的终端电阻</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103336247.png" alt="image-20241211103336247"></p>
<h3 id="can-dian-ping-biao-zhun">CAN电平标准</h3>
<ul>
<li>CAN总线采用差分信号，即两线电压差（VCAN_H-VCAN_L）传输数据位</li>
<li>高速CAN规定：
<ul>
<li>电压差为0V时表示逻辑1（隐性电平）</li>
<li>电压差为2V时表示逻辑0（显性电平）</li>
</ul>
</li>
<li>低速CAN规定：
<ul>
<li>电压差为-1.5V时表示逻辑1（隐性电平）</li>
<li>电压差为3V时表示逻辑0（显性电平）</li>
</ul>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103423494.png" alt="image-20241211103423494"></p>
<h3 id="can-shou-fa-qi-tja-1050-gao-su-can">CAN收发器 – TJA1050（高速CAN）</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103451188.png" alt="image-20241211103451188"></p>
<h3 id="can-wu-li-ceng-te-xing">CAN物理层特性</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103523971.png" alt="image-20241211103523971"></p>
<h2 id="can-zong-xian-zheng-ge-shi">CAN总线帧格式</h2>
<p>CAN协议规定了以下5种类型的帧：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103713455.png" alt="image-20241211103713455"></p>
<h3 id="shu-ju-zheng">数据帧</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103734684.png" alt="image-20241211103734684"></p>
<blockquote>
<p>[!NOTE]</p>
<p>图例说明：D表示对应颜色bit只能为显性电平（Dominant），R则表示只能为隐形电平（Recessive）；ACK位槽，该bit周期，发送方发送隐形电平，接收方如果要回复ACK则发送显性电平</p>
</blockquote>
<ul>
<li>SOF（Start of Frame）：帧起始，表示后面一段波形为传输的数据位</li>
<li>ID（Identify）：标识符，区分功能，同时决定优先级</li>
<li>RTR（Remote Transmission Request ）：远程请求位，区分数据帧和遥控帧</li>
<li>IDE（Identifier Extension）：扩展标志位，区分标准格式和扩展格式</li>
<li>SRR（Substitute Remote Request）：替代RTR，协议升级时留下的无意义位</li>
<li>r0/r1（Reserve）：保留位，为后续协议升级留下空间</li>
<li>DLC（Data Length Code）：数据长度，指示数据段有几个字节</li>
<li>Data：数据段的1~8个字节有效数据</li>
<li>CRC（Cyclic Redundancy Check）：循环冗余校验，校验数据是否正确</li>
<li>ACK（Acknowledgement）：应答位，判断数据有没有被接收方接收</li>
<li>CRC/ACK界定符：为应答位前后发送方和接收方释放总线留下时间</li>
<li>EOF（End of Frame ）：帧结束，表示数据位已经传输完毕</li>
</ul>
<h3 id="shu-ju-zheng-de-fa-zhan-li-shi">数据帧的发展历史</h3>
<p>CAN 1.2时期，仅存在标准格式，IDE位当时仍为保留位r1</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103838836.png" alt="image-20241211103838836"></p>
<p>CAN 2.0时期，ID不够用，出现了扩展格式，增加了ID的位数，为了区分标准格式与扩展格式，协议将标准格式中的r1赋予了新功能—IDE</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211103940322.png" alt="image-20241211103940322"></p>
<h3 id="yao-kong-zheng">遥控帧</h3>
<p>遥控帧无数据段，RTR为隐性电平1，其他部分与数据帧相同</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211104804170.png" alt="image-20241211104804170"></p>
<h3 id="cuo-wu-zheng">错误帧</h3>
<p>总线上所有设备都会监督总线的数据，一旦发现“位错误”或“填充错误”或“CRC错误”或“格式错误”或“应答错误” ，这些设备便会发出错误帧来破坏数据，同时终止当前的发送设备</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211105439974.png" alt="image-20241211105439974"></p>
<h3 id="guo-zai-zheng">过载帧</h3>
<p>当接收方收到大量数据而无法处理时，其可以发出过载帧，延缓发送方的数据发送，以平衡总线负载，避免数据丢失</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211105630400.png" alt="image-20241211105630400"></p>
<h3 id="zheng-jian-ge">帧间隔</h3>
<p>将数据帧和遥控帧与前面的帧分离开</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211191607718.png" alt="image-20241211191607718"></p>
<h3 id="wei-tian-chong">位填充</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211180356925.png" alt="image-20241211180356925"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211180336251.png" alt="image-20241211180336251"></p>
<h3 id="bo-xing-shi-li">波形实例</h3>
<h4 id="biao-zhun-shu-ju-zheng-bao-wen-id-wei-0-x-555-shu-ju-chang-du-1-zi-jie-shu-ju-nei-rong-wei-0-x-aa">标准数据帧，报文ID为0x555，数据长度1字节，数据内容为0xAA</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211113902996.png" alt="image-20241211113902996"></p>
<blockquote>
<p>[!NOTE]</p>
<p>标准格式下，r0默认为显性电平，这样设计是为了让标准格式比扩展格式有更高的优先级。</p>
<p>黄色高亮表示该bit为5个相同电平后的一个位填充。</p>
<p>CRC界定符使得发送方能够在ACK槽前提前释放总线，这样接收方能够在ACK槽处发送显性电平。</p>
<p>ACK界定符给接收方发送ACK后交回总线控制权留出时间，发送方随后能够发送EOF。</p>
</blockquote>
<h4 id="biao-zhun-shu-ju-zheng-bao-wen-id-wei-0-x-666-shu-ju-chang-du-2-zi-jie-shu-ju-nei-rong-wei-0-x-12-0-x-34">标准数据帧，报文ID为0x666，数据长度2字节，数据内容为0x12, 0x34</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211113920115.png" alt="image-20241211113920115"></p>
<h4 id="kuo-zhan-shu-ju-zheng-bao-wen-id-wei-0-x-0789-abcd-shu-ju-chang-du-1-zi-jie-shu-ju-nei-rong-wei-0-x-56">扩展数据帧，报文ID为0x0789ABCD，数据长度1字节，数据内容为0x56</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211113931152.png" alt="image-20241211113931152"></p>
<h4 id="biao-zhun-yao-kong-zheng-bao-wen-id-wei-0-x-088-shu-ju-chang-du-1-zi-jie-wu-shu-ju-nei-rong">标准遥控帧，报文ID为0x088，数据长度1字节，无数据内容</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211113944116.png" alt="image-20241211113944116"></p>
<h2 id="jie-shou-fang-shu-ju-cai-yang-he-tong-bu-wen-ti">接收方数据采样和同步问题</h2>
<ul>
<li>CAN总线没有时钟线，总线上的所有设备通过约定波特率的方式确定每一个数据位的时长</li>
<li>发送方以约定的位时长每隔固定时间输出一个数据位</li>
<li>接收方以约定的位时长每隔固定时间采样总线的电平，输入一个数据位</li>
<li>理想状态下，接收方能依次采样到发送方发出的每个数据位，且<mark>采样点位于数据位中心附近</mark></li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211125847282.png" alt="image-20241211125847282"></p>
<h3 id="shu-ju-cai-yang-ke-neng-yu-dao-de-wen-ti">数据采样可能遇到的问题</h3>
<p>接收方以约定的位时长进行采样，但是采样点没有对齐数据位中心附近</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211125923383.png" alt="image-20241211125923383"></p>
<p>接收方刚开始采样正确，但是时钟有误差，随着误差积累，采样点逐渐偏离</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211125933990.png" alt="image-20241211125933990"></p>
<blockquote>
<p>[!NOTE]</p>
<p>发送方和接收方的时钟都可能因自身的物理特性或环境因素导致不准的情况。</p>
</blockquote>
<h3 id="wei-shi-xu">位时序</h3>
<p>为了<mark>灵活调整每个采样点的位置</mark>，<mark>使采样点对齐数据位中心附近</mark>，CAN总线对<mark>每一个数据位的时长</mark>进行了更细的划分，分为同步段（SS）、传播时间段（PTS）、相位缓冲段1（PBS1）和相位缓冲段2（PBS2），每个段又由若干个最小时间单位（Tq，Time Quantum）构成</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211132431579.png" alt="image-20241211132431579" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211130818764.png" alt="image-20241211130818764"></p>
<h3 id="ying-jian-tong-bu-hard-synchronization">硬件同步（Hard Synchronization）</h3>
<ul>
<li>每个设备都有一个位时序计时周期，当某个设备（发送方）率先发送报文，其他所有设备（接收方）收到SOF的下降沿时，接收方会将自己的位时序计时周期拨到SS段的位置，与发送方的位时序计时周期保持同步</li>
<li>硬同步只在帧的第一个下降沿（SOF下降沿）有效</li>
<li><mark>经过硬同步后，若发送方和接收方的时钟没有误差</mark>，则后续所有数据位的采样点必然都会对齐数据位中心附近</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211131840885.png" alt="image-20241211131840885"></p>
<h3 id="zai-tong-bu-resynchronization">再同步（Resynchronization）</h3>
<ul>
<li>若发送方或接收方的时钟有误差，随着<mark>误差积累，数据位边沿逐渐偏离SS段</mark>，则此时接收方根据再同步补偿宽度值（SJW）<mark>通过加长PBS1段，或缩短PBS2段，以调整同步</mark></li>
<li><mark>再同步可以发生在第一个下降沿（SOF）之后的每个数据位跳变边沿</mark></li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211133115226.png" alt="image-20241211133115226"></p>
<h3 id="diao-zheng-tong-bu-de-gui-ze">调整同步的规则</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211191214713.png" alt="image-20241211191214713"></p>
<h3 id="bo-te-lu-ji-suan">波特率计算</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211133136193.png" alt="image-20241211133136193"></p>
<h2 id="duo-she-bei-tong-shi-fa-song-yu-dao-de-wen-ti">多设备同时发送遇到的问题</h2>
<ul>
<li>
<p>CAN总线只有一对差分信号线，同一时间只能有一个设备操作总线发送数据，若多个设备同时有发送需求，该如何分配总线资源？</p>
</li>
<li>
<p>解决问题的思路：制定资源分配规则，依次满足多个设备的发送需求，确保同一时间只有一个设备操作总线</p>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211174841073.png" alt="image-20241211174841073"></p>
<h3 id="zi-yuan-fen-pei-gui-ze-yi-xian-dao-xian-de">资源分配规则一：先到先得</h3>
<ul>
<li>若当前已经有设备正在操作总线发送数据帧/遥控帧，则其他任何设备不能再同时发送数据帧/遥控帧（可以发送错误帧/过载帧破坏当前数据）</li>
<li>任何设备检测到<mark>连续11个隐性电平</mark>，即认为<mark>总线空闲</mark>，只有在总线空闲时，设备才能发送数据帧/遥控帧</li>
<li>一旦有设备正在发送数据帧/遥控帧，总线就会变为活跃状态，必然不会出现连续11个隐性电平，其他设备自然也不会破坏当前发送</li>
<li>若总线活跃状态其他设备有发送需求，则需要<mark>等待总线变为空闲</mark>，才能执行发送需求</li>
</ul>
<h3 id="zi-yuan-fen-pei-gui-ze-er-fei-po-pi-xing-zhong-cai">资源分配规则二：非破坏性仲裁</h3>
<ul>
<li>若多个设备的发送需求同时到来或因等待而同时到来，则CAN总线协议会根据ID号（仲裁段）进行非破坏性仲裁，ID号小的（优先级高）取到总线控制权，ID号大的（优先级低）仲裁失利后将转入接收状态，等待下一次总线空闲时再尝试发送</li>
<li>实现非破坏性仲裁需要两个要求：
<ul>
<li><mark>线与特性</mark>：总线上任何一个设备发送显性电平0时，总线就会呈现显性电平0状态，只有当所有设备都发送隐性电平1时，总线才呈现隐性电平1状态，即：<code>0 &amp; X &amp; X = 0</code>，<code>1 &amp; 1 &amp; 1 = 1</code></li>
<li><mark>回读机制</mark>：每个设备发出一个数据位后，都会读回总线当前的电平状态，以确认自己发出的电平是否被真实地发送出去了，根据线与特性，发出0读回必然是0，发出1读回不一定是1</li>
</ul>
</li>
</ul>
<h4 id="id-hao-da-de-zhong-cai-shi-li">ID号大的仲裁失利</h4>
<p>数据位从前到后依次比较，出现差异且数据位为1的设备仲裁失利：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211175242537.png" alt="image-20241211175242537"></p>
<h4 id="shu-ju-zheng-he-yao-kong-zheng-de-you-xian-ji">数据帧和遥控帧的优先级</h4>
<p>数据帧和遥控帧ID号一样时，数据帧的优先级高于遥控帧</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211175432015.png" alt="image-20241211175432015"></p>
<h4 id="biao-zhun-ge-shi-he-kuo-zhan-ge-shi-de-you-xian-ji">标准格式和扩展格式的优先级</h4>
<p>标准格式11位ID号和扩展格式29位ID号的<mark>高11位一样时</mark>，标准格式的优先级高于扩展格式（<mark>SRR必须始终为1，以保证此要求</mark>）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211175707024.png" alt="image-20241211175707024"></p>
<h2 id="cuo-wu-chu-li">错误处理</h2>
<h3 id="zai-kan-cuo-wu-zheng-he-guo-zai-zheng">再看错误帧和过载帧</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211191507549.png" alt="image-20241211191507549"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211191523945.png" alt="image-20241211191523945"></p>
<h3 id="cuo-wu-de-chong-lei">错误的种类</h3>
<p>错误共有 5 种。多种错误可能同时发生。</p>
<ul>
<li>位错误</li>
<li>填充错误</li>
<li>CRC 错误</li>
<li>格式错误</li>
<li>ACK 错误</li>
</ul>
<p>错误的种类、错误的内容、错误检测帧和检测单元如表 9 所示。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211191701691.png" alt="image-20241211191701691"></p>
<h3 id="cuo-wu-zhuang-tai-de-chong-lei">错误状态的种类</h3>
<ul>
<li>主动错误状态的设备正常参与通信并在检测到错误时发出<mark>主动错误帧</mark></li>
<li>被动错误状态的设备正常参与通信但检测到错误时只能发出<mark>被动错误帧</mark></li>
<li><mark>总线关闭状态</mark>的设备不能参与通信</li>
<li><mark>每个设备内部管理一个TEC和REC，根据TEC和REC的值确定自己的状态</mark></li>
</ul>
<blockquote>
<p>[!NOTE]</p>
<p>TEC：Transmit Error Count，REC：Receive Error Count</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211192417870.png" alt="image-20241211192417870"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211192435203.png" alt="image-20241211192435203"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211192528991.png" alt="image-20241211192528991"></p>
<h3 id="cuo-wu-ji-shu-zhi">错误计数值</h3>
<ul>
<li>发送错误计数值和接收错误计数值根据一定的条件发生变化。错误计数值的变动条件如表 2 所示。</li>
<li>一次数据的接收和发送可能同时满足多个条件。</li>
<li>错误计数器在错误标志的第一个位出现的时间点上开始计数</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211192847770.png" alt="image-20241211192847770"></p>
<h3 id="bo-xing-shi-li-1">波形示例</h3>
<p>设备处于<mark>主动错误状态</mark>，发送标准数据帧，<mark>正常传输</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211194323125.png" alt="image-20241211194323125"></p>
<p>设备处于<mark>主动错误状态</mark>，发送标准数据帧，<mark>检测到ACK错误</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211194335826.png" alt="image-20241211194335826"></p>
<p>设备处于<mark>被动错误状态</mark>，发送标准数据帧，<mark>检测到ACK错误</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211194413309.png" alt="image-20241211194413309"></p>
<h1 id="stm-32-de-can-wai-she-yi-stm-32-f-103-wei-li">STM32的CAN外设（以STM32F103为例）</h1>
<p>STM32的芯片中具有bxCAN控制器（Basic Extended CAN），它<mark>支持CAN协议2.0A 和2.0B Active</mark>标准。（CAN2.0A只能处理标准数据帧且扩展帧的内容会织别错误。而CAN2.0 B Active可以处理标准数据帧和扩展数据帧。CAN2.0 B Passive只能处理标准数据帧而扩展帧的内容会被忽略）。</p>
<ul>
<li>该CAN控制器支持最高的通讯速率为1Mb/s；</li>
<li>可以自动地接收和发送CAN报文，支持使用标准ID和扩展ID的报文；</li>
<li>外设中具有<mark>3个发送邮箱</mark>，发送报文的<mark>优先级可以使用软件控制</mark>，还可以记录发送的时间；</li>
<li>具有<mark>2个3级深度的接收FIFO</mark>，可使用<mark>过滤功能</mark>只接收或不接收某些ID号的报文；</li>
<li>可配置成自动重发；</li>
<li><mark>不支持使用DMA</mark>进行数据收发。</li>
</ul>
<h2 id="can-kong-zhi-qi-de-3-chong-gong-zuo-mo-shi">CAN控制器的3种工作模式</h2>
<p>CAN控制器有3种工作模式：初始化模式，正常模式，睡眠模式。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211201002715.png" alt="image-20241211201002715" style="zoom:50%;">
<p>上电复位后CAN控制器默认会进入睡眠模式，作用是降低功耗。当需要将进行初始的时候（配置寄存器），会进入初始化模式。当需要通讯的时候，就进入正常模式。</p>
<h2 id="can-kong-zhi-qi-de-3-chong-ce-shi-mo-shi">CAN控制器的3种测试模式</h2>
<p>有3种测试模式：静默模式、环回模式、环回静默模式。当控制器进入初始化模式的时候才可以配置测试模式。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241211201844569.png" alt="image-20241211201844569" style="zoom:50%;">
<h2 id="gong-neng-kuang-tu">功能框图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212164440303.png" alt="image-20241212164440303"></p>
<h3 id="zhu-dong-nei-he">主动内核</h3>
<p>含各种控制/状态/配置寄存器，可以配置模式、波特率等。在STM32CubeMx中可以非常方便的配置。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212163911496.png" alt="image-20241212163911496"></p>
<h3 id="fa-song-you-xiang">发送邮箱</h3>
<p>用来缓存待发送的报文，最多可以缓存3个报文。发送调度决定报文的发送顺序。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212163930213.png" alt="image-20241212163930213"></p>
<h3 id="jie-shou-fifo">接收FIFO</h3>
<p>共有2个接收FIFO，每个FIFO都可以存放3个完整的报文。它们完全由硬件来管理。从而节省了CPU的处理负荷，简化了软件并保证了数据的一致性。应用程序只能通过读取FIFO输出邮箱，来读取FIFO中最先收到的报文。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212163947526.png" alt="image-20241212163947526"></p>
<h3 id="jie-shou-guo-lu-qi">接收过滤器</h3>
<p>作用：对接到的报文进行过滤。最后放入FIFO 0或FIFO 1。</p>
<p>当总线上报文数据量很大时，总线上的设备会频繁获取报文，占用CPU。过滤器的存在，选择性接收有效报文，减轻系统负担。</p>
<p>有2种过滤模式：</p>
<ul>
<li>标识符列表模式，它把要接收报文的ID列成一个表，要求报文ID与列表中的某一个标识符完全相同才可以接收，可以理解为白名单管理。</li>
<li>屏蔽位模式，允许将特定的bit设置为屏蔽模式，即不关心该bit是0还是1。</li>
</ul>
<p>如果使能了过滤器，且报文的ID与所有过滤器的配置都不匹配，CAN外设会丢弃该报文，不存入接收FIFO。</p>
<p>每个CAN提供了14个位宽可变的、可配置的过滤器组(13~0)。每个过滤器组x由2个32位寄存器，CAN_FxR1和 CAN_FxR2组成。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212163630363.png" alt="image-20241212163630363"></p>
<p>说明：</p>
<p>（1）当工作于32位屏蔽位模式时，FR1保存标识符，FR2保存屏蔽位。FR2某位是1表示来的ID的这位必须和FR1中对应的位一致，FR2某位是0，表示ID的这位不关心。</p>
<p>（2）当工作于32位标识符模式时。FR1和FR2分别保存两个标识符。这意味着将来只有两个ID会匹配成功。</p>
<h3 id="wei-shi-xu-1">位时序</h3>
<blockquote>
<p>[!NOTE]</p>
<p>在协议标准的位时序基础上，STM32的CAN将PROP_SEG（传播缓冲段）和PHASE_SEG1（相位缓冲段1）合并为了一个BS1：</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212165355790.png" alt="image-20241212165355790"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212164957235.png" alt="image-20241212164957235"></p>
<h1 id="shi-yan-1-hui-huan-jing-mo-mo-shi-ce-shi">实验1-回环静默模式测试</h1>
<h2 id="ying-jian-lian-xian">硬件连线</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212153436025.png" alt="image-20241212153436025"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212153634218.png" alt="image-20241212153634218"></p>
<h2 id="rcc-shi-zhong-pei-zhi">RCC-时钟配置</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 开启CAN外设、CAN引脚GPIO、引脚重定义AFIO时钟 */</span>
RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_CAN1EN<span class="token punctuation">;</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> <span class="token punctuation">(</span>RCC_APB2ENR_IOPBEN <span class="token operator">|</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="afio-wai-she-yin-jiao-fu-yong-zhong-ying-she">AFIO-外设引脚复用重映射</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212160109662.png" alt="image-20241212160109662"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* CAN引脚复用重映射 */</span>
<span class="token comment">// REMAP=10</span>
AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_CAN_REMAP_0<span class="token punctuation">;</span>
AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">|=</span> AFIO_MAPR_CAN_REMAP_1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="gpio-wai-she-yin-jiao-gong-zuo-mo-shi">GPIO-外设引脚工作模式</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212160148678.png" alt="image-20241212160148678"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 配置CAN引脚的工作模式 PB8-RX：浮空输入 PB9-TX：复用推挽 */</span>
<span class="token comment">// PB8 MODE=00 CNF=01</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE8<span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF8_0<span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF8_1<span class="token punctuation">;</span>
<span class="token comment">// PB9 MODE=11 CNF=10</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="can-wai-she-chu-shi-hua">CAN外设初始化</h2>
<h3 id="can-ji-cun-qi-fang-wen-bao-hu">CAN寄存器访问保护</h3>
<blockquote>
<p>[!NOTE]</p>
<ul>
<li>CAN时序配置寄存器只能在CAN外设初始化模式下修改</li>
<li>发送邮箱只能在其状态为空时被修改</li>
<li>过滤器值只能在其被停用时修改（FINIT被置位或对应的过滤器组在CAN_FA1R中的状态为停用状态）；此外，过滤器配置（过滤值位宽、过滤模式、关联FIFO）只能在过滤器初始化模式下完成（FINIT为置位状态）</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212161458197.png" alt="image-20241212161458197"></p>
<h3 id="can-wai-she-chu-shi-hua-liu-cheng-fen-xi">CAN外设初始化流程分析</h3>
<blockquote>
<p>[!NOTE]</p>
<ul>
<li>CAN外设硬件复位后，默认处于睡眠模式以降低功耗
<ul>
<li>该模式下通过置位INRQ或SLEEP可以进入初始化/睡眠模式</li>
<li>一旦模式切换完成，INAK或SLAK会被硬件置位</li>
</ul>
</li>
<li>软件初始化CAN外设需要在其处于初始化模式时完成
<ul>
<li>软件可以通过置位INRQ进入CAN初始化模式，并需要等待INAK被硬件置位来确保硬件已进入该模式</li>
<li>软件可以通过清除INRQ来退出初始化模式，退出完成时INAK会被硬件清除</li>
<li>在该模式下，软件需要配置CAN参数寄存器（MCR）和位时序寄存器（BTR）来初始化CAN外设</li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212165741348.png" alt="image-20241212165741348"></p>
<blockquote>
<p>[!NOTE]</p>
<ul>
<li>为了初始化CAN过滤器组相关的寄存器（过滤模式、过滤器位宽、关联FIFO、过滤器激活、过滤值），软件必须置位FINIT</li>
<li>单个过滤器组中过滤器值的初始化可以在CAN初始化模式中完成，也可以在CAN初始化模式之外操作</li>
<li>注意
<ul>
<li>FINIT置位时，CAN外设接收功能是不工作的。</li>
<li>如果想修改某个过滤器组的过滤值，可以通过CAN_FA1R先将其失活，然后进行修改。（FINIT是针对整个过滤器模块的全局状态，而CAN_FA1R则是针对某个单独的过滤器组配置激活/停用）</li>
<li>如果不想使用某个过滤器组了，也建议通过CAN_FA1R将其设置为停用状态。</li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212171538693.png" alt="image-20241212171538693"></p>
<blockquote>
<p>[!NOTE]</p>
<ul>
<li>一旦完成了CAN外设的初始化，软件必须请求外设进入正常模式，以在CAN总线上取得同步，并开始接收和发送报文。</li>
<li>通过清除INRQ可以请求外设进入正常模式。请求发出后，当CAN外设和CAN总线上传输的数据取得同步后（等待11个连续的隐形电平，即总线空闲状态），外设会进入正常模式并准备好参与总线活动。外设切换到正常模式后，会清除INAK。</li>
<li>过滤器值的初始化不依赖CAN外设的初始化模式，但是必须在过滤器停用（见CAN_FA1R）时操作。</li>
<li>过滤器位宽和过滤模式必须在进入正常模式之前配置。</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241212193910645.png" alt="image-20241212193910645"></p>
<h3 id="qing-qiu-can-wai-she-jin-ru-chu-shi-hua-mo-shi">请求CAN外设进入初始化模式</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* CAN主要参数配置 */</span>
<span class="token comment">// 复位后CAN外设默认处于睡眠模式</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_INRQ<span class="token punctuation">;</span> <span class="token comment">// 请求CAN外设进入初始化模式</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>MSR <span class="token operator">&amp;</span> CAN_MSR_INAK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 轮询等待CAN外设确认</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="can-zhu-yao-kong-zhi-can-shu-pei-zhi-mcr">CAN主要控制参数配置-MCR</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 发送FIFO队列中报文发送的优先级 0=&gt;ID小的先发 1=&gt;时间顺序先入队的先发</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_TXFP<span class="token punctuation">;</span> <span class="token comment">// 先入队先发</span>
<span class="token comment">// 接收FIFO队列满后入队报文处理：0=&gt;覆盖先前的 1=&gt;丢弃</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_RFLM<span class="token punctuation">;</span> <span class="token comment">// 丢弃</span>
<span class="token comment">// 是否停用自动重传（根据CAN协议规范，发生仲裁失利、错误处理等需要重传报文）</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_NART<span class="token punctuation">;</span> <span class="token comment">// 测试回环静默模式，不需要自动重传</span>
<span class="token comment">// 是否启用自动唤醒模式（当检测到CAN报文时自动退出睡眠模式）</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_AWUM<span class="token punctuation">;</span> <span class="token comment">// 启用自动唤醒模式</span>
<span class="token comment">// 是否启用自动离线管理（根据CAN标准，TEC超过255后节点会进入离线模式，当检测128次连续的11位隐形电平后可以恢复到主动错误状态）</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_ABOM<span class="token punctuation">;</span> <span class="token comment">// 启用自动离线管理（符合条件后，自动从离线状态恢复到主动错误状态）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="can-shi-xu-pei-zhi">CAN时序配置</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* CAN时序配置 */</span>
<span class="token comment">// 配置1Tq时间 =&gt; (BRP + 1)*Tpclk，CAN1时钟36M，BRP配置为35，则1Tq=1us</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_BRP<span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">36</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 位时序配置</span>
<span class="token comment">// 同步段固定为1Tq，TS1配置为3Tq，TS2配置6Tq，1bit时间为10Tq=10us，波特率为100kbps</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_TS1<span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_TS2<span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">// 再同步时，需要增加或减少Tq来调整bit时间（调整值称为跳跃宽度），该参数表示允许CAN外设执行再同步时跳跃宽度的最大值（限制过度补偿）</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_SJW<span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">// 允许的最大跳跃宽度为2Tq</span>
<span class="token comment">// 开启测试模式：回环模式+静默模式，即不发到总线上，也不从总线接收，仅自己发给自己</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> CAN_BTR_LBKM<span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> CAN_BTR_SILM<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="can-guo-lu-qi-pei-zhi">CAN过滤器配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213084354231.png" alt="image-20241213084354231"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 配置过滤器 */</span>
<span class="token comment">// 过滤模式 0=&gt;掩码模式 1=&gt;清单模式（白名单）</span>
CAN1<span class="token operator">-&gt;</span>FM1R <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FM1R_FBM0<span class="token punctuation">;</span> <span class="token comment">// 过滤器1配置为掩码模式</span>
<span class="token comment">// 过滤器位宽配置</span>
CAN1<span class="token operator">-&gt;</span>FS1R <span class="token operator">|=</span> CAN_FS1R_FSC0<span class="token punctuation">;</span> <span class="token comment">// 过滤值配置为32位（可以过滤11位ID和29位ID）</span>
<span class="token comment">// 分配FIFO，过滤器匹配后递交给那个接收FIFO</span>
CAN1<span class="token operator">-&gt;</span>FFA1R <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FFA1R_FFA0<span class="token punctuation">;</span> <span class="token comment">// 过滤器1分配给FIFO0</span>
<span class="token comment">// 过滤器1的过滤值和屏蔽位</span>
CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR1 <span class="token operator">=</span> <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment">// 过滤值为0</span>
CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR2 <span class="token operator">=</span>
    <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment">// 屏蔽为0表示该bit不关心，不需要和过滤值相应bit进行比较</span>
<span class="token comment">// 激活过滤器1</span>
CAN1<span class="token operator">-&gt;</span>FA1R <span class="token operator">|=</span> CAN_FA1R_FACT0<span class="token punctuation">;</span>
<span class="token comment">// 进入过滤器激活模式</span>
CAN1<span class="token operator">-&gt;</span>FMR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FMR_FINIT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="qing-qiu-can-wai-she-jin-ru-zheng-chang-mo-shi">请求CAN外设进入正常模式</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 请求CAN外设进入正常模式</span>
CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_MCR_INRQ<span class="token punctuation">;</span>
<span class="token comment">// 轮询等待外设确认</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>MSR <span class="token operator">&amp;</span> CAN_MSR_INAK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="wan-zheng-dai-ma">完整代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CAN_GPIOConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* CAN引脚复用重映射 */</span>
    <span class="token comment">// REMAP=10</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_CAN_REMAP_0<span class="token punctuation">;</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">|=</span> AFIO_MAPR_CAN_REMAP_1<span class="token punctuation">;</span>

    <span class="token comment">/* 配置CAN引脚的工作模式 PB8-RX：浮空输入 PB9-TX：复用推挽 */</span>
    <span class="token comment">// PB8 MODE=00 CNF=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE8<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF8_0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF8_1<span class="token punctuation">;</span>
    <span class="token comment">// PB9 MODE=11 CNF=10</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 开启CAN外设、CAN引脚GPIO、引脚重定义AFIO时钟 */</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_CAN1EN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> <span class="token punctuation">(</span>RCC_APB2ENR_IOPBEN <span class="token operator">|</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CAN_GPIOConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* CAN主要参数配置 */</span>
    <span class="token comment">// 复位后CAN外设默认处于睡眠模式</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_INRQ<span class="token punctuation">;</span> <span class="token comment">// 请求CAN外设进入初始化模式</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>MSR <span class="token operator">&amp;</span> CAN_MSR_INAK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 轮询等待CAN外设确认</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 发送FIFO队列中报文发送的优先级 0=&gt;ID小的先发 1=&gt;时间顺序先入队的先发</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_TXFP<span class="token punctuation">;</span> <span class="token comment">// 先入队先发</span>
    <span class="token comment">// 接收FIFO队列满后入队报文处理：0=&gt;覆盖先前的 1=&gt;丢弃</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_RFLM<span class="token punctuation">;</span> <span class="token comment">// 丢弃</span>
    <span class="token comment">// 是否停用自动重传（根据CAN协议规范，发生仲裁失利、错误处理等需要重传报文）</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_NART<span class="token punctuation">;</span> <span class="token comment">// 测试回环静默模式，不需要自动重传</span>
    <span class="token comment">// 是否启用自动唤醒模式（当检测到CAN报文时自动退出睡眠模式）</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_AWUM<span class="token punctuation">;</span> <span class="token comment">// 启用自动唤醒模式</span>
    <span class="token comment">// 是否启用自动离线管理（根据CAN标准，TEC超过255后节点会进入离线模式，当检测128次连续的11位隐形电平后可以恢复到主动错误状态）</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_ABOM<span class="token punctuation">;</span> <span class="token comment">// 启用自动离线管理（符合条件后，自动从离线状态恢复到主动错误状态）</span>

    <span class="token comment">/* CAN时序配置 */</span>
    <span class="token comment">// 配置1Tq时间 =&gt; (BRP + 1)*Tpclk，CAN1时钟36M，BRP配置为35，则1Tq=1us</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_BRP<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">36</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 位时序配置</span>
    <span class="token comment">// 同步段固定为1Tq，TS1配置为3Tq，TS2配置6Tq，1bit时间为10Tq=10us，波特率为100kbps</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_TS1<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_TS2<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 再同步时，需要增加或减少Tq来调整bit时间（调整值称为跳跃宽度），该参数表示允许CAN外设执行再同步时跳跃宽度的最大值（限制过度补偿）</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_SJW<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">// 允许的最大跳跃宽度为2Tq</span>
    <span class="token comment">// 开启测试模式：回环模式+静默模式，即不发到总线上，也不从总线接收，仅自己发给自己</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> CAN_BTR_LBKM<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> CAN_BTR_SILM<span class="token punctuation">;</span>

    <span class="token comment">/* 配置过滤器 */</span>
    <span class="token comment">// 过滤模式 0=&gt;掩码模式 1=&gt;清单模式（白名单）</span>
    CAN1<span class="token operator">-&gt;</span>FM1R <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FM1R_FBM0<span class="token punctuation">;</span> <span class="token comment">// 过滤器1配置为掩码模式</span>
    <span class="token comment">// 过滤器位宽配置</span>
    CAN1<span class="token operator">-&gt;</span>FS1R <span class="token operator">|=</span> CAN_FS1R_FSC0<span class="token punctuation">;</span> <span class="token comment">// 过滤值配置为32位（可以过滤11位ID和29位ID）</span>
    <span class="token comment">// 分配FIFO，过滤器匹配后递交给那个接收FIFO</span>
    CAN1<span class="token operator">-&gt;</span>FFA1R <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FFA1R_FFA0<span class="token punctuation">;</span> <span class="token comment">// 过滤器1分配给FIFO0</span>
    <span class="token comment">// 过滤器1的过滤值和屏蔽位</span>
    CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR1 <span class="token operator">=</span> <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment">// 过滤值为0</span>
    CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR2 <span class="token operator">=</span>
        <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment">// 屏蔽为0表示该bit不关心，不需要和过滤值相应bit进行比较</span>
    <span class="token comment">// 激活过滤器1</span>
    CAN1<span class="token operator">-&gt;</span>FA1R <span class="token operator">|=</span> CAN_FA1R_FACT0<span class="token punctuation">;</span>
    <span class="token comment">// 进入过滤器激活模式</span>
    CAN1<span class="token operator">-&gt;</span>FMR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FMR_FINIT<span class="token punctuation">;</span>

    <span class="token comment">// 请求CAN外设进入正常模式</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_MCR_INRQ<span class="token punctuation">;</span>
    <span class="token comment">// 轮询等待外设确认</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>MSR <span class="token operator">&amp;</span> CAN_MSR_INAK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fa-song-bao-wen">发送报文</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> stdId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"最多只能发送8个字节"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果发送邮箱0不为空，则轮询等待</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>TSR <span class="token operator">&amp;</span> CAN_TSR_TME0<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 配置发送邮箱0 */</span>
    <span class="token comment">// ID配置</span>
    <span class="token comment">// 标准格式，扩展格式</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TI0R_IDE<span class="token punctuation">;</span>
    <span class="token comment">// 数据帧，远程帧配置</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TI0R_RTR<span class="token punctuation">;</span>
    <span class="token comment">// 设置ID</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TI0R_STID<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">|=</span> <span class="token punctuation">(</span>stdId <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置数据长度</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TDT0R_DLC<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置数据字节</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDLR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDHR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDLR <span class="token operator">|=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDHR <span class="token operator">|=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 请求发送数据</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">|=</span> CAN_TI0R_TXRQ<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jie-shou-bao-wen">接收报文</h2>
<blockquote>
<p>[!NOTE]</p>
<p>接收时使用的是封装好的FIFO模型，虽然我们知道FIFO中有3个邮箱，但是在STM32的API设计中，我们只能通过 <code>CAN_TypeDef#sFIFOMailBox[0]</code>访问FIFO0中的队首报文，并通过 <code>CAN1-&gt;RF0R |= CAN_RF0R_RFOM0</code>来释放（出队）FIFO0的队首报文。</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>CAN_RxMsgStruct <span class="token operator">*</span>msgBuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>msgSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取接收FIFO0中的报文数量</span>
 	<span class="token operator">*</span>msgSize <span class="token operator">=</span> <span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>RF0R <span class="token operator">&amp;</span> CAN_RF0R_FMP0<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">*</span>msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CAN_RxMsgStruct <span class="token operator">*</span>buf <span class="token operator">=</span> msgBuf <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token comment">// 获取FIFO0队首报文</span>
        CAN_FIFOMailBox_TypeDef <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sFIFOMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 解析报文</span>
        buf<span class="token operator">-&gt;</span>stdId <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RIR <span class="token operator">&amp;</span> CAN_RI0R_STID<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">21</span><span class="token punctuation">;</span>
        buf<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDTR <span class="token operator">&amp;</span> CAN_RDT0R_DLC<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buf<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDLR <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDHR <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 释放FIFO0队首报文（出队）</span>
        CAN1<span class="token operator">-&gt;</span>RF0R <span class="token operator">|=</span> CAN_RF0R_RFOM0<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="gou-jian-jie-xi-bao-wen-you-hua-wei-yun-suan">构建/解析报文优化（位运算）</h2>
<blockquote>
<p>[!NOTE]</p>
<p>⚠️值得注意的是：通过掩码和按位与从寄存器中取某个字段的值时，经常容易忘记右移以让其最低有效位和bit0对齐。可以封装一个从寄存器取字段值的函数，并通过入参强制传入移位参数。</p>
</blockquote>
<h3 id="wei-yun-suan-feng-zhuang-gui-fan-bi-yao-ru-can">位运算封装，规范必要入参</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_REG_FIELD</span><span class="token expression"><span class="token punctuation">(</span>regVal<span class="token punctuation">,</span> fieldMask<span class="token punctuation">,</span> shift<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>regVal <span class="token operator">&amp;</span> fieldMask<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> shift<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_REG_BYTE</span><span class="token expression"><span class="token punctuation">(</span>regVal<span class="token punctuation">,</span> byteIndex<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>regVal <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>byteIndex <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET_REG_BYTE</span><span class="token expression"><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> byteIndex<span class="token punctuation">,</span> byteData<span class="token punctuation">)</span> <span class="token punctuation">(</span>reg <span class="token operator">|=</span> <span class="token punctuation">(</span>byteData <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byteIndex<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="gou-jian-bao-wen">构建报文</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 设置数据字节</span>
CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDLR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDHR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SET_REG_BYTE</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDLR<span class="token punctuation">,</span> i<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">SET_REG_BYTE</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDHR<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="jie-xi-bao-wen">解析报文</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 解析报文</span>
buf<span class="token operator">-&gt;</span>stdId <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RIR<span class="token punctuation">,</span> CAN_RI0R_STID<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDTR<span class="token punctuation">,</span> CAN_RDT0R_DLC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buf<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_REG_BYTE</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDLR<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_REG_BYTE</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDHR<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="shi-li-dai-ma">示例代码</h2>
<h3 id="can-h">can.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__CAN_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__CAN_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_REG_FIELD</span><span class="token expression"><span class="token punctuation">(</span>regVal<span class="token punctuation">,</span> fieldMask<span class="token punctuation">,</span> shift<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>regVal <span class="token operator">&amp;</span> fieldMask<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> shift<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_REG_BYTE</span><span class="token expression"><span class="token punctuation">(</span>regVal<span class="token punctuation">,</span> byteIndex<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>regVal <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>byteIndex <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET_REG_BYTE</span><span class="token expression"><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> byteIndex<span class="token punctuation">,</span> byteData<span class="token punctuation">)</span> <span class="token punctuation">(</span>reg <span class="token operator">|=</span> <span class="token punctuation">(</span>byteData <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byteIndex<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> stdId<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> len<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> CAN_RxMsgStruct<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> stdId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>CAN_RxMsgStruct <span class="token operator">*</span>msgBuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>msgSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __CAN_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="can-c">can.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"can.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CAN_GPIOConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* CAN引脚复用重映射 */</span>
    <span class="token comment">// REMAP=10</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_CAN_REMAP_0<span class="token punctuation">;</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">|=</span> AFIO_MAPR_CAN_REMAP_1<span class="token punctuation">;</span>

    <span class="token comment">/* 配置CAN引脚的工作模式 PB8-RX：浮空输入 PB9-TX：复用推挽 */</span>
    <span class="token comment">// PB8 MODE=00 CNF=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE8<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF8_0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF8_1<span class="token punctuation">;</span>
    <span class="token comment">// PB9 MODE=11 CNF=10</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 开启CAN外设、CAN引脚GPIO、引脚重定义AFIO时钟 */</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_CAN1EN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> <span class="token punctuation">(</span>RCC_APB2ENR_IOPBEN <span class="token operator">|</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CAN_GPIOConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* CAN主要参数配置 */</span>
    <span class="token comment">// 复位后CAN外设默认处于睡眠模式</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_INRQ<span class="token punctuation">;</span> <span class="token comment">// 请求CAN外设进入初始化模式</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>MSR <span class="token operator">&amp;</span> CAN_MSR_INAK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 轮询等待CAN外设确认</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 发送FIFO队列中报文发送的优先级 0=&gt;ID小的先发 1=&gt;时间顺序先入队的先发</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_TXFP<span class="token punctuation">;</span> <span class="token comment">// 先入队先发</span>
    <span class="token comment">// 接收FIFO队列满后入队报文处理：0=&gt;覆盖先前的 1=&gt;丢弃</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_RFLM<span class="token punctuation">;</span> <span class="token comment">// 丢弃</span>
    <span class="token comment">// 是否停用自动重传（根据CAN协议规范，发生仲裁失利、错误处理等需要重传报文）</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_NART<span class="token punctuation">;</span> <span class="token comment">// 测试回环静默模式，不需要自动重传</span>
    <span class="token comment">// 是否启用自动唤醒模式（当检测到CAN报文时自动退出睡眠模式）</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span> CAN_MCR_AWUM<span class="token punctuation">;</span> <span class="token comment">// 启用自动唤醒模式</span>
    <span class="token comment">// 是否启用自动离线管理（根据CAN标准，TEC超过255后节点会进入离线模式，当检测128次连续的11位隐形电平后可以恢复到主动错误状态）</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">|=</span>
        CAN_MCR_ABOM<span class="token punctuation">;</span> <span class="token comment">// 启用自动离线管理（符合条件后，自动从离线状态恢复到主动错误状态）</span>

    <span class="token comment">/* CAN时序配置 */</span>
    <span class="token comment">// 配置1Tq时间 =&gt; (BRP + 1)*Tpclk，CAN1时钟36M，BRP配置为35，则1Tq=1us</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_BRP<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">36</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 位时序配置</span>
    <span class="token comment">// 同步段固定为1Tq，TS1配置为3Tq，TS2配置6Tq，1bit时间为10Tq=10us，波特率为100kbps</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_TS1<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_TS2<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 再同步时，需要增加或减少Tq来调整bit时间（调整值称为跳跃宽度），该参数表示允许CAN外设执行再同步时跳跃宽度的最大值（限制过度补偿）</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_SJW<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">// 允许的最大跳跃宽度为2Tq</span>
    <span class="token comment">// 开启测试模式：回环模式+静默模式，即不发到总线上，也不从总线接收，仅自己发给自己</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> CAN_BTR_LBKM<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">|=</span> CAN_BTR_SILM<span class="token punctuation">;</span>

    <span class="token comment">/* 配置过滤器 */</span>
    <span class="token comment">// 过滤模式 0=&gt;掩码模式 1=&gt;清单模式（白名单）</span>
    CAN1<span class="token operator">-&gt;</span>FM1R <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FM1R_FBM0<span class="token punctuation">;</span> <span class="token comment">// 过滤器1配置为掩码模式</span>
    <span class="token comment">// 过滤器位宽配置</span>
    CAN1<span class="token operator">-&gt;</span>FS1R <span class="token operator">|=</span> CAN_FS1R_FSC0<span class="token punctuation">;</span> <span class="token comment">// 过滤值配置为32位（可以过滤11位ID和29位ID）</span>
    <span class="token comment">// 分配FIFO，过滤器匹配后递交给那个接收FIFO</span>
    CAN1<span class="token operator">-&gt;</span>FFA1R <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FFA1R_FFA0<span class="token punctuation">;</span> <span class="token comment">// 过滤器1分配给FIFO0</span>
    <span class="token comment">// 过滤器1的过滤值和屏蔽位</span>
    CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR1 <span class="token operator">=</span> <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment">// 过滤值为0</span>
    CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR2 <span class="token operator">=</span>
        <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment">// 屏蔽为0表示该bit不关心，不需要和过滤值相应bit进行比较</span>
    <span class="token comment">// 激活过滤器1</span>
    CAN1<span class="token operator">-&gt;</span>FA1R <span class="token operator">|=</span> CAN_FA1R_FACT0<span class="token punctuation">;</span>
    <span class="token comment">// 进入过滤器激活模式</span>
    CAN1<span class="token operator">-&gt;</span>FMR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_FMR_FINIT<span class="token punctuation">;</span>

    <span class="token comment">// 请求CAN外设进入正常模式</span>
    CAN1<span class="token operator">-&gt;</span>MCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_MCR_INRQ<span class="token punctuation">;</span>
    <span class="token comment">// 轮询等待外设确认</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>MSR <span class="token operator">&amp;</span> CAN_MSR_INAK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> stdId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"最多只能发送8个字节"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果发送邮箱0不为空，则轮询等待</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>TSR <span class="token operator">&amp;</span> CAN_TSR_TME0<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 配置发送邮箱0 */</span>
    <span class="token comment">// ID配置</span>
    <span class="token comment">// 标准格式，扩展格式</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TI0R_IDE<span class="token punctuation">;</span>
    <span class="token comment">// 数据帧，远程帧配置</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TI0R_RTR<span class="token punctuation">;</span>
    <span class="token comment">// 设置ID</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TI0R_STID<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">|=</span> <span class="token punctuation">(</span>stdId <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置数据长度</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_TDT0R_DLC<span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDTR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置数据字节</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDLR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDHR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">SET_REG_BYTE</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDLR<span class="token punctuation">,</span> i<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">SET_REG_BYTE</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TDHR<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 请求发送数据</span>
    CAN1<span class="token operator">-&gt;</span>sTxMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TIR <span class="token operator">|=</span> CAN_TI0R_TXRQ<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>CAN_RxMsgStruct <span class="token operator">*</span>msgBuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>msgSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取接收FIFO0中的报文数量</span>
    <span class="token operator">*</span>msgSize <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>RF0R<span class="token punctuation">,</span> CAN_RF0R_FMP0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">*</span>msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CAN_RxMsgStruct <span class="token operator">*</span>buf <span class="token operator">=</span> msgBuf <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token comment">// 获取FIFO0队首报文句柄</span>
        CAN_FIFOMailBox_TypeDef <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sFIFOMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 解析报文</span>
        buf<span class="token operator">-&gt;</span>stdId <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RIR<span class="token punctuation">,</span> CAN_RI0R_STID<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buf<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDTR<span class="token punctuation">,</span> CAN_RDT0R_DLC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buf<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_REG_BYTE</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDLR<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_REG_BYTE</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDHR<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 释放FIFO0队首报文（出队）</span>
        CAN1<span class="token operator">-&gt;</span>RF0R <span class="token operator">|=</span> CAN_RF0R_RFOM0<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"can.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"send msg done"</span><span class="token punctuation">)</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待发送到CAN的接收FIFO</span>
    
    CAN_RxMsgStruct msgBuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> msgSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>msgBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msgSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"msgSize = %d"</span><span class="token punctuation">,</span> msgSize<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"id = %#x, msg = %s"</span><span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stdId<span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="guo-lu-qi-ce-shi">过滤器测试</h2>
<p>过滤出ID为1的报文</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213095703620.png" alt="image-20241213095703620" style="zoom:33%;">
<p>过滤出ID为2的报文</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR1 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>sFilterRegister<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FR2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213095631079.png" alt="image-20241213095631079" style="zoom:33%;">
<h1 id="ji-cun-qi-zong-jie">寄存器总结</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213111618075.png" alt="image-20241213111618075"></p>
<h1 id="shi-yan-1-de-hal-ku-shi-xian">实验1的HAL库实现</h1>
<h2 id="cube-pei-zhi">Cube配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241213122551361.png" alt="image-20241213122551361"></p>
<h2 id="shi-li-dai-ma-1">示例代码</h2>
<h3 id="can-h-1">can.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN Prototypes */</span>
<span class="token keyword">void</span> <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> stdId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>CAN_RxMsgStruct <span class="token operator">*</span>msgBuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>msgSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END Prototypes */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="can-c-1">can.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 1 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CAN_FilterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CAN_FilterTypeDef filterConfig<span class="token punctuation">;</span>
    <span class="token comment">// 初始化 CAN_FilterTypeDef 结构体</span>
    filterConfig<span class="token punctuation">.</span>FilterBank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment">// 选择过滤器组 0</span>
    filterConfig<span class="token punctuation">.</span>FilterMode <span class="token operator">=</span> CAN_FILTERMODE_IDMASK<span class="token punctuation">;</span> <span class="token comment">// 掩码模式</span>
    filterConfig<span class="token punctuation">.</span>FilterScale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">// 32 位过滤器</span>
    filterConfig<span class="token punctuation">.</span>FilterIdHigh <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span> <span class="token comment">// 高 16 位标识符，设置为 0x0000</span>
    filterConfig<span class="token punctuation">.</span>FilterIdLow <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span> <span class="token comment">// 低 16 位标识符，设置为 0x0000</span>
    filterConfig<span class="token punctuation">.</span>FilterMaskIdHigh <span class="token operator">=</span>
        <span class="token number">0x0000</span><span class="token punctuation">;</span> <span class="token comment">// 高 16 位掩码，设置为 0xFFFF（全屏蔽）</span>
    filterConfig<span class="token punctuation">.</span>FilterMaskIdLow <span class="token operator">=</span>
        <span class="token number">0x0000</span><span class="token punctuation">;</span> <span class="token comment">// 低 16 位掩码，设置为 0xFFFF（全屏蔽）</span>
    filterConfig<span class="token punctuation">.</span>FilterFIFOAssignment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 分配到 FIFO 0</span>
    filterConfig<span class="token punctuation">.</span>FilterActivation <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 启用过滤器</span>

    <span class="token function">HAL_CAN_ConfigFilter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hcan<span class="token punctuation">,</span> <span class="token operator">&amp;</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置CAN外设主要参数</span>
    <span class="token function">MX_CAN_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置自定义过滤规则</span>
    <span class="token function">CAN_FilterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 请求CAN外设退出初始化模式，进入正常模式</span>
    <span class="token function">HAL_CAN_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hcan<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> stdId<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待发送邮箱空闲</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">HAL_CAN_GetTxMailboxesFreeLevel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hcan<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将报文添加到发送邮箱</span>
    CAN_TxHeaderTypeDef header<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> txMailBox <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    header<span class="token punctuation">.</span>IDE <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span> <span class="token comment">// 标准格式ID</span>
    header<span class="token punctuation">.</span>StdId <span class="token operator">=</span> stdId<span class="token punctuation">;</span>
    header<span class="token punctuation">.</span>DLC <span class="token operator">=</span> len<span class="token punctuation">;</span>
    header<span class="token punctuation">.</span>RTR <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span> <span class="token comment">// 数据帧</span>
    <span class="token function">HAL_CAN_AddTxMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hcan<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>txMailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>CAN_RxMsgStruct <span class="token operator">*</span>msgBuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>msgSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取接收队列(FIFO0)待处理报文数量</span>
    <span class="token operator">*</span>msgSize <span class="token operator">=</span> <span class="token function">HAL_CAN_GetRxFifoFillLevel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hcan<span class="token punctuation">,</span> CAN_RX_FIFO0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">*</span>msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CAN_RxHeaderTypeDef header<span class="token punctuation">;</span>
        <span class="token comment">// 从FIFO0中出队报文</span>
        <span class="token function">HAL_CAN_GetRxMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hcan<span class="token punctuation">,</span> CAN_RX_FIFO0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stdId <span class="token operator">=</span> header<span class="token punctuation">.</span>StdId<span class="token punctuation">;</span>
        msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> header<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//MX_CAN_Init();</span>
  <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>
    <span class="token function">CAN_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main start\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send msg done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待发送到CAN的接收FIFO</span>
    
    CAN_RxMsgStruct msgBuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> msgSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>msgBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msgSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"msgSize = %d\n"</span><span class="token punctuation">,</span> msgSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id = %#x, msg = %s\n"</span><span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stdId<span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="shi-yan-2-liang-ge-can-jie-dian-yi-shou-yi-fa">实验2-两个CAN节点一收一发</h1>
<h2 id="guan-bi-ce-shi-mo-shi">关闭测试模式</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 关闭测试模式</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_LBKM<span class="token punctuation">;</span>
CAN1<span class="token operator">-&gt;</span>BTR <span class="token operator">&amp;=</span> <span class="token operator">~</span>CAN_BTR_SILM<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="jie-dian-a-lun-xun-fa-song">节点A轮询发送</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint32_t</span> seq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"hello msg, seq = %d"</span><span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CAN_SendMsg</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    seq<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jie-dian-b-lun-xun-jie-shou">节点B轮询接收</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">CAN_RxMsgStruct msgBuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> msgSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>msgBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msgSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"id = %#x, msg = %.*s"</span><span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stdId<span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">,</span> msgBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jie-shou-bao-wen-jie-gou-ti-shu-ju-can-liu-wen-ti">接收报文结构体数据残留问题</h2>
<blockquote>
<p>[!NOTE]</p>
<p><code>CAN_RxMsgStruct#data</code>大小为8字节，可能残留了上次接收的数据，可以根据业务需要来清除。但最好还是根据 <code>CAN_RxMsgStruct#len</code>指示的字节数量来处理报文数据</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CAN_ReceiveMsg</span><span class="token punctuation">(</span>CAN_RxMsgStruct <span class="token operator">*</span>msgBuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>msgSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取接收FIFO0中的报文数量</span>
    <span class="token operator">*</span>msgSize <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>RF0R<span class="token punctuation">,</span> CAN_RF0R_FMP0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">*</span>msgSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CAN_RxMsgStruct <span class="token operator">*</span>buf <span class="token operator">=</span> msgBuf <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token comment">// 获取FIFO0队首报文句柄</span>
        CAN_FIFOMailBox_TypeDef <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>CAN1<span class="token operator">-&gt;</span>sFIFOMailBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 解析报文</span>
        buf<span class="token operator">-&gt;</span>stdId <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RIR<span class="token punctuation">,</span> CAN_RI0R_STID<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buf<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token function">GET_REG_FIELD</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDTR<span class="token punctuation">,</span> CAN_RDT0R_DLC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// buf.data可能残留了上次接收到的数据，可以按需清除</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buf<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_REG_BYTE</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDLR<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                buf<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_REG_BYTE</span><span class="token punctuation">(</span>msg<span class="token operator">-&gt;</span>RDHR<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 释放FIFO0队首报文（出队）</span>
        CAN1<span class="token operator">-&gt;</span>RF0R <span class="token operator">|=</span> CAN_RF0R_RFOM0<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>协议</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>模数转换ADC(STM32F103ZE)</title>
    <url>/2024/12/07/52846.html</url>
    <content><![CDATA[<h1 id="gai-shu">概述</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207132054463.png" alt=""></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207132628019.png" alt="image-20241207132628019"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207132958431.png" alt="image-20241207132958431"></p>
<h1 id="stm-32-zhong-de-adc">STM32中的ADC</h1>
<p>STM32F103系列提供了3个ADC，精度为12位，每个ADC最多有16个通道和2个内部信号源。</p>
<p>STM32F103的ADC是一种逐次逼近型模拟数字转换器。各通道的A/D转换可以单次、连续、扫描或间断模式执行。ADC的结果可以左对齐或右对齐方式存储在16位数据寄存器中。模拟看门狗特性允许应用程序检测输入电压是否超出用户定义的高/低阈值。ADC的输入时钟不得超过14MHz，它是由PCLK2经分频产生。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207133434436.png" alt="image-20241207133434436"></p>
<h2 id="adc-lei-xing">ADC类型</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207141746294.png" alt="image-20241207141746294"></p>
<h2 id="zhu-ci-bi-jin-xing-gong-zuo-yuan-li">逐次逼近型工作原理</h2>
<h3 id="lei-bi-tian-ping-cheng-zhong-jian-hua-guo-cheng">类比天平称重简化过程</h3>
<p>类比称量未知重量的物体的最优方法：先上大砝码，后上小砝码；如果某次增加砝码后发现砝码端较重，则将该砝码替换为较小一点的砝码；如果某次增加砝码后发现砝码端较轻，则继续增加一个较小一点的砝码。直至天平两端平衡。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207144028375.png" alt="image-20241207144028375"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207144527257.png" alt="image-20241207144527257"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207144601805.png" alt="image-20241207144601805"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207144649256.png" alt="image-20241207144649256"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207144659421.png" alt="image-20241207144659421"></p>
<h3 id="dian-lu-yuan-li">电路原理</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207142920535.png" alt="image-20241207142920535"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207143812523.png" alt="image-20241207143812523"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207143952014.png" alt="image-20241207143952014"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207144920604.png" alt="image-20241207144920604"></p>
<h3 id="zhuan-huan-guo-cheng-fen-xi">转换过程分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207145340136.png" alt="image-20241207145340136"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207145417112.png" alt="image-20241207145417112"></p>
<h2 id="adc-gong-neng-fen-xi">ADC功能分析</h2>
<h3 id="mo-ni-dian-yuan-amp-mo-ni-can-kao-dian-ya">模拟电源 &amp; 模拟参考电压</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207150154532.png" alt="image-20241207150154532"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207150859556.png" alt="image-20241207150859556"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207150113218.png" alt="image-20241207150113218"></p>
<h3 id="shu-ru-tong-dao">输入通道</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207151028730.png" alt="image-20241207151028730"></p>
<h3 id="tong-dao-zu-ruo-gan-tong-dao-de-luo-ji-zu-zhi-xu-lie">通道组（若干通道的逻辑组织序列）</h3>
<blockquote>
<p>[!NOTE]</p>
<p>类比一下歌曲和歌单的关系：</p>
<ul>
<li>可以将每个通道的转换任务类比为一首歌曲的播放</li>
<li>我们可以将若干首歌按照自己爱好的播放顺序组织为一个惯常歌单列表（常规组），并进行顺序/循环放</li>
<li>有时突然兴起，特别想听几首歌，于是将它们插队到当前播放列表中（例如“下一首播放”功能），这样它们能够比惯常列表中的歌曲优先播放</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207151700153.png" alt="image-20241207151700153"></p>
<h4 id="chang-gui-zu">常规组</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207152657556.png" alt="image-20241207152657556"></p>
<h4 id="cha-ru-zu">插入组</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207153813447.png" alt="image-20241207153813447"></p>
<h3 id="hong-fa-yuan">触发源</h3>
<h4 id="ruan-jian-hong-fa">软件触发</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207154500929.png" alt="image-20241207154500929"></p>
<h3 id="zhuan-huan-fang-shi">转换方式</h3>
<blockquote>
<p>[!NOTE]</p>
<p>类比歌单播放：</p>
<ul>
<li>扫描模式：开启则自上而下顺序播放歌单列表；关闭则仅播放列表中第一首歌</li>
<li>连续转换：是否循环播放
<ul>
<li>扫描+连续：循环播放歌单</li>
<li>非扫描+连续：循环播放歌单第一首歌</li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207154823940.png" alt="image-20241207154823940"></p>
<h3 id="shi-jian-amp-zhong-duan">事件 &amp; 中断</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207155421171.png" alt="image-20241207155421171"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207211313719.png" alt="image-20241207211313719"></p>
<h4 id="zhuan-huan-jie-shu-zhong-duan">转换结束中断</h4>
<p>数据转换结束后，可以产生中断，中断分为三种：规则通道转换结束中断，注入转换通道转换结束中断，模拟看门狗中断。其中转换结束中断很好理解，跟我们平时接触的中断一样，有相应的中断标志位和中断使能位，我们还可以根据中断类型写相应配套的中断服务程序。</p>
<h4 id="mo-ni-kan-men-gou-zhong-duan">模拟看门狗中断</h4>
<p>当被 ADC 转换的模拟电压低于低阈值或者高于高阈值时，就会产生中断，前提是我们开启了模拟看门狗中断，其中低阈值和高阈值由 ADC_LTR 和 ADC_HTR 设置。例如我们设置高阈值是2.5V，那么模拟电压超过 2.5V 的时候，就会产生模拟看门狗中断，反之低阈值也一样。</p>
<h3 id="dma-qing-qiu">DMA请求</h3>
<p>规则和注入通道转换结束后，除了产生中断外，还可以产生DMA请求，把转换好的数据直接存储在内存里面。要注意的是只有<strong>ADC1和ADC3可以产生DMA请求</strong>。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207155811981.png" alt="image-20241207155811981"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207155845368.png" alt="image-20241207155845368"></p>
<h3 id="shu-ju-dui-qi">数据对齐</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207160310466.png" alt="image-20241207160310466"></p>
<h3 id="zhuan-huan-shi-jian-ji-suan">转换时间计算</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207160652894.png" alt="image-20241207160652894"></p>
<h1 id="an-li-cai-ji-ke-bian-dian-zu-dian-ya">案例-采集可变电阻电压</h1>
<h2 id="ying-jian-dian-lu">硬件电路</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207170951408.png" alt="image-20241207170951408"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207170929018.png" alt="image-20241207170929018"></p>
<h2 id="ji-cun-qi-fen-xi">寄存器分析</h2>
<h3 id="rcc-shi-zhong">RCC时钟</h3>
<blockquote>
<p>[!NOTE]</p>
<p>虽然挂载在APB2上，但是ADC的最大输入频率为14MHz</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207171058355.png" alt="image-20241207171058355"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207171350684.png" alt="image-20241207171350684"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207171330944.png" alt="image-20241207171330944"></p>
<h3 id="adc-shu-ru-shi-zhong-yu-fen-pin">ADC输入时钟预分频</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207172036548.png" alt="image-20241207172036548"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207172049933.png" alt="image-20241207172049933"></p>
<p>由于APB2为72MHz，要满足ADC输入时钟最大14MHz的要求，我们可以设置预分频为6。</p>
<h3 id="gpio-gong-zuo-mo-shi">GPIO工作模式</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207172607090.png" alt="image-20241207172607090"></p>
<p>GPIO工作模式需要配置模拟信号输入，由于不需要经过TTL采样到IDR中，因此GPIO的时钟可以不用开启。</p>
<blockquote>
<p>[!TIP]</p>
<p>但为了统一编程，最好还是养成用到了GPIO则开启对应时钟的习惯，除非有特殊的考量。</p>
</blockquote>
<h3 id="bian-pai-chang-gui-zu-tong-dao-xu-lie">编排常规组通道序列</h3>
<p>现在外部模拟信号能够通过PC0到达ADC1通道10了，我们需要将通道组织到常规组中，这样ADC才能知道按照什么流程来执行这些通道的转换任务。</p>
<h4 id="xu-lie-shu-liang">序列数量</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207173824003.png" alt="image-20241207173824003"></p>
<p>这里我们只使用通道10来采集可变电阻电压，因此序列只需包含通道10即可，数量为1.</p>
<h4 id="xu-lie-shun-xu">序列顺序</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207174007845.png" alt="image-20241207174007845"></p>
<p>通过SQ1可以指定常规组中第一个要转换的通道编号（从0到17），SQ2则用来指定第二个要转换的通道，以此类推。</p>
<h3 id="adc-kong-zhi-xiang-guan">ADC控制相关</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207181439887.png" alt="image-20241207181439887"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207181613976.png" alt="image-20241207181613976"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ADC控制相关</span>
<span class="token comment">// 关闭扫描模式，常规组只有一个通道</span>
ADC1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_CR1_SCAN<span class="token punctuation">;</span>
<span class="token comment">// 开启连续模式，循环采样可调电阻电压</span>
ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_CONT<span class="token punctuation">;</span>
<span class="token comment">// 数据对齐：右对齐</span>
ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_CR2_ALIGN<span class="token punctuation">;</span>
<span class="token comment">// 使能外部触发ADC采样</span>
ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_EXTTRIG<span class="token punctuation">;</span>
<span class="token comment">// 外部触发源选择软件触发 =&gt; 111</span>
ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_EXTSEL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="cai-yang-shi-jian">采样时间</h3>
<h4 id="strong-cai-yang-shi-jian-de-zuo-yong-strong"><strong>采样时间的作用</strong></h4>
<ul>
<li>ADC 内部有一个采样保持电路，由采样电容和开关组成。在采样过程中，采样电容需要通过输入信号的驱动完成充电，采样时间就是给采样电容充电到目标电压所需要的时间。</li>
<li>如果采样时间太短，采样电容未充满，电压达不到稳定值，会导致 ADC 输出的数字值不准确。</li>
</ul>
<h4 id="strong-cai-yang-shi-jian-you-shi-yao-jue-ding-strong"><strong>采样时间由什么决定</strong></h4>
<ul>
<li><strong>输入阻抗：</strong> 输入信号源的阻抗越高，采样电容充电越慢，需要更长的采样时间。</li>
<li><strong>ADC 采样电容：</strong> STM32 的采样电容通常在几十 pF 到几百 pF 范围。</li>
<li><strong>信号频率：</strong> 高频信号需要更快的采样时间，但仍需足够时间充电。</li>
</ul>
<h4 id="adc-dian-qi-te-xing">ADC电气特性</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207212034901.png" alt="image-20241207212034901"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207181039478.png" alt="image-20241207181039478"></p>
<h4 id="cai-yang-shi-jian-she-zhi">采样时间设置</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207182324177.png" alt="image-20241207182324177"></p>
<h3 id="adc-huan-xing-amp-xiao-zhun">ADC唤醒 &amp; 校准</h3>
<h4 id="adc-huan-xing-amp-guan-bi-amp-hong-fa-ad-zhuan-huan">ADC唤醒 &amp; 关闭 &amp; 触发AD转换</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207190825998.png" alt="image-20241207190825998"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207190616679.png" alt="image-20241207190616679"></p>
<blockquote>
<p>[!NOTE]</p>
<p>需要注意的是，通过ADON开启转换针对的是常规组。</p>
</blockquote>
<h4 id="adc-xiao-zhun">ADC校准</h4>
<p>ADC校准能够显著减少由于内部电容组变化导致的精度错误。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207191313952.png" alt="image-20241207191313952"></p>
<blockquote>
<p>[!NOTE]</p>
<ul>
<li>建议每次唤醒ADC后，都执行一次校准</li>
<li>必须在ADC上电至少两个ADC时钟周期后，才开始校准</li>
</ul>
</blockquote>
<h3 id="ruan-jian-hong-fa-ad-zhuan-huan">软件触发AD转换</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207193334202.png" alt="image-20241207193334202"></p>
<h3 id="zhuang-tai-ji-cun-qi">状态寄存器</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207194215560.png" alt="image-20241207194215560"></p>
<h3 id="shi-xu-kong-zhi">时序控制</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207193043135.png" alt="image-20241207193043135"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207192938318.png" alt="image-20241207192938318"></p>
<h3 id="shi-li-dai-ma">示例代码</h3>
<h4 id="adc-h">adc.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ADC_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__ADC_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ADC1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ADC1_StartConvert</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">ADC1_ReadVoltage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __ADC_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="adc-c">adc.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"adc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ADC1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ADC输入时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_ADC1EN<span class="token punctuation">;</span>
    <span class="token comment">// APB2 6分频 =&gt; 10</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_CFGR_ADCPRE<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> RCC_CFGR_ADCPRE_1<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_CFGR_ADCPRE_0<span class="token punctuation">;</span>

    <span class="token comment">// GPIO工作模式配置为模拟输入 MODE=00 CNF=00</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPCEN<span class="token punctuation">;</span>
    GPIOC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span> GPIO_CRL_CNF0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 编排常规组通道序列</span>
    <span class="token comment">// 序列数量为1 =&gt; 0000</span>
    ADC1<span class="token operator">-&gt;</span>SQR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SQR1_L<span class="token punctuation">;</span>
    <span class="token comment">// 将通道10配置为转换序列第一个 =&gt; 01010</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SQR3_SQ1<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">|=</span> ADC_SQR3_SQ1_3<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">|=</span> ADC_SQR3_SQ1_1<span class="token punctuation">;</span>
    <span class="token comment">// 配置通道10的采样时间 13.5 cycles =&gt; 010</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP10<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP10_2<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">|=</span> ADC_SMPR1_SMP10_1<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP10_0<span class="token punctuation">;</span>

    <span class="token comment">// ADC控制相关</span>
    <span class="token comment">// 关闭扫描模式，常规组只有一个通道</span>
    ADC1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_CR1_SCAN<span class="token punctuation">;</span>
    <span class="token comment">// 开启连续模式，循环采样可调电阻电压</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_CONT<span class="token punctuation">;</span>
    <span class="token comment">// 数据对齐：右对齐</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_CR2_ALIGN<span class="token punctuation">;</span>
    <span class="token comment">// 使能外部触发ADC采样</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_EXTTRIG<span class="token punctuation">;</span>
    <span class="token comment">// 外部触发源选择软件触发 =&gt; 111</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_EXTSEL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ADC1_StartConvert</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 唤醒ADC</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_ADON<span class="token punctuation">;</span>
    <span class="token comment">// 等待至少两个ADC时钟周期后开始执行校准</span>
    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_CAL<span class="token punctuation">;</span>
    <span class="token comment">// 等待校准结束</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;</span> ADC_CR2_CAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 软件触发开始转换，由于配置了连续模式，因此触发一次后常规组的转换会循环不断</span>
    <span class="token comment">// 也可以通过ADON触发常规组转换</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_SWSTART<span class="token punctuation">;</span>
    <span class="token comment">// 等待第一次转换完成</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ADC1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> ADC_SR_EOC<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">ADC1_ReadVoltage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> adc_val <span class="token operator">=</span> ADC1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
    <span class="token keyword">double</span> voltage <span class="token operator">=</span> adc_val <span class="token operator">*</span> <span class="token number">3.3</span> <span class="token operator">/</span> <span class="token number">4095</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"adc_val = %d, voltage = %.2fV"</span><span class="token punctuation">,</span> adc_val<span class="token punctuation">,</span> voltage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> voltage<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"adc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ADC1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token function">ADC1_StartConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ADC1_ReadVoltage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hal-shi-xian">HAL实现</h2>
<h4 id="cube-pei-zhi">Cube配置</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207202209344.png" alt="image-20241207202209344"></p>
<blockquote>
<p>[!TIP]</p>
<p>我们可以学习Cube图形化界面中对各个寄存器的编排形式来模块化理解寄存器。</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207202257369.png" alt="image-20241207202257369"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207202232215.png" alt="image-20241207202232215"></p>
<h4 id="main-c-1">main.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_ADC1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token comment">// perform calibration before start adc</span>
  <span class="token function">HAL_ADCEx_Calibration_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hadc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAL_ADC_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hadc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">double</span> v <span class="token operator">=</span> <span class="token function">HAL_ADC_GetValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hadc1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.3</span> <span class="token operator">/</span> <span class="token number">4095</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"v = %.2fV\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END WHILE */</span>
  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="an-li-duo-tong-dao-dma">案例-多通道+DMA</h1>
<h2 id="xu-qiu">需求</h2>
<p>PC0是10通道，采集的是可变电阻器的电压。PC2对应的是12通道，使用杜邦线连接到电源或地，测试他们的电压。</p>
<p>当多个通道同时采集时，一般就需要使用DMA来传输数据，否则数据如果来不及取出，则会导致数据被覆盖。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241207214851385.png" alt="image-20241207214851385"></p>
<h2 id="shi-li-dai-ma-1">示例代码</h2>
<h3 id="adc-h-1">adc.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ADC_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__ADC_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ADC1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ADC1_StartConvert_DMA</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> bufAddr<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __ADC_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="adc-c-1">adc.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"adc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">ADC1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ADC输入时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_ADC1EN<span class="token punctuation">;</span>
    <span class="token comment">// APB2 6分频 =&gt; 10</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_CFGR_ADCPRE<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> RCC_CFGR_ADCPRE_1<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;=</span> <span class="token operator">~</span>RCC_CFGR_ADCPRE_0<span class="token punctuation">;</span>

    <span class="token comment">// GPIO工作模式配置为模拟输入 MODE=00 CNF=00</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPCEN<span class="token punctuation">;</span>
    GPIOC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_MODE0 <span class="token operator">|</span> GPIO_CRL_CNF0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOC<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRL_MODE2 <span class="token operator">|</span> GPIO_CRL_CNF2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 编排常规组通道序列</span>
    <span class="token comment">// 序列数量为2 =&gt; 0001</span>
    ADC1<span class="token operator">-&gt;</span>SQR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SQR1_L<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR1 <span class="token operator">|=</span> ADC_SQR1_L_0<span class="token punctuation">;</span>
    <span class="token comment">// 将通道10配置为转换序列第一个 =&gt; 01010</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SQR3_SQ1<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">|=</span> ADC_SQR3_SQ1_3<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">|=</span> ADC_SQR3_SQ1_1<span class="token punctuation">;</span>
    <span class="token comment">// 将通道12配置为转换序列第二个 =&gt; 01100</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SQR3_SQ2<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">|=</span> ADC_SQR3_SQ2_3<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SQR3 <span class="token operator">|=</span> ADC_SQR3_SQ2_2<span class="token punctuation">;</span>
    <span class="token comment">// 配置通道10的采样时间 7.5 cycles =&gt; 001</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP10<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP10_2<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP10_1<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">|=</span> ADC_SMPR1_SMP10_0<span class="token punctuation">;</span>
    <span class="token comment">// 配置通道12的采样时间 7.5 cycles =&gt; 001</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP12<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP12_2<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_SMPR1_SMP12_1<span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>SMPR1 <span class="token operator">|=</span> ADC_SMPR1_SMP12_0<span class="token punctuation">;</span>

    <span class="token comment">// ADC控制相关</span>
    <span class="token comment">// 开启扫描模式，常规组有两个通道</span>
    ADC1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> ADC_CR1_SCAN<span class="token punctuation">;</span>
    <span class="token comment">// 开启连续模式</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_CONT<span class="token punctuation">;</span>
    <span class="token comment">// 数据对齐：右对齐</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>ADC_CR2_ALIGN<span class="token punctuation">;</span>
    <span class="token comment">// 使能外部触发ADC采样</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_EXTTRIG<span class="token punctuation">;</span>
    <span class="token comment">// 外部触发源选择软件触发 =&gt; 111</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_EXTSEL<span class="token punctuation">;</span>
    <span class="token comment">// 使能DMA模式</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_DMA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Init_DMA_Channel</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> bufAddr<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> dataSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使能DMA时钟</span>
    RCC<span class="token operator">-&gt;</span>AHBENR <span class="token operator">|=</span> RCC_AHBENR_DMA1EN<span class="token punctuation">;</span>
    <span class="token comment">// ADC1使用DMA1通道1</span>
    <span class="token comment">// 从外设读到内存</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_DIR<span class="token punctuation">;</span>
    <span class="token comment">// 源地址和目标地址</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CPAR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>ADC1<span class="token operator">-&gt;</span>DR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CMAR <span class="token operator">=</span> bufAddr<span class="token punctuation">;</span>
    <span class="token comment">// 数据宽度和数量，注意DMA的DR是16bit</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_MSIZE<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_MSIZE_0<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_PSIZE<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_PSIZE_0<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CNDTR <span class="token operator">=</span> dataSize<span class="token punctuation">;</span>
    <span class="token comment">// ADC.DR地址不变，内存地址自增</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>DMA_CCR1_PINC<span class="token punctuation">;</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_MINC<span class="token punctuation">;</span>
    <span class="token comment">// 开启循环模式，和ADC连续模式配合</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_CIRC<span class="token punctuation">;</span>
    <span class="token comment">// 开启DMA通道</span>
    DMA1_Channel1<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> DMA_CCR1_EN<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ADC1_StartConvert_DMA</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> bufAddr<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> dataSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 唤醒ADC</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_ADON<span class="token punctuation">;</span>
    <span class="token comment">// 等待至少两个ADC时钟周期后开始执行校准</span>
    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_CAL<span class="token punctuation">;</span>
    <span class="token comment">// 等待校准结束</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;</span> ADC_CR2_CAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 开始转换前建立DMA通道</span>
    <span class="token function">Init_DMA_Channel</span><span class="token punctuation">(</span>bufAddr<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 软件触发开始转换</span>
    ADC1<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> ADC_CR2_SWSTART<span class="token punctuation">;</span>
    <span class="token comment">// 等待常规组首次转换完成</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ADC1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> ADC_SR_EOC<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-2">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"adc.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ADC1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint16_t</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">ADC1_StartConvert_DMA</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"v1 = %.2fV, v2 = %.2fV"</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3.3</span> <span class="token operator">/</span> <span class="token number">4095</span><span class="token punctuation">,</span>
                  buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3.3</span> <span class="token operator">/</span> <span class="token number">4095</span><span class="token punctuation">)</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="dma-tong-dao-jian-li-shi-ji-wen-ti">DMA通道建立时机问题</h2>
<blockquote>
<p>[!TIP]</p>
<p>应该在ADC上电后，再建立DMA通道；在ADC掉电状态建立DMA通道则可能失败。</p>
<p>在建立DMA通道时，应该确保双方是活跃状态。</p>
</blockquote>
<h2 id="hal-ku-shi-xian">HAL库实现</h2>
<h3 id="chang-gui-zu-tong-dao-bian-pai">常规组通道编排</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208083218931.png" alt="image-20241208083218931"></p>
<h3 id="kai-qi-dma">开启DMA</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208083357152.png" alt="image-20241208083357152"></p>
<h3 id="jin-yong-dma-zhong-duan">禁用DMA中断</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208083449124.png" alt="image-20241208083449124"></p>
<h3 id="adc-shi-zhong-yu-fen-pin">ADC时钟预分频</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208083304844.png" alt="image-20241208083304844"></p>
<h3 id="main-c-3">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_DMA_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_ADC1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token class-name">uint16_t</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">HAL_ADCEx_Calibration_Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hadc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAL_ADC_Start_DMA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hadc1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"V1 = %.2fV, V2 = %.2fV\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3.3</span> <span class="token operator">/</span> <span class="token number">4095</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3.3</span> <span class="token operator">/</span> <span class="token number">4095</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="yuan-ma-fen-xi">源码分析</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">HAL_StatusTypeDef <span class="token function">HAL_ADC_Start_DMA</span><span class="token punctuation">(</span>ADC_HandleTypeDef<span class="token operator">*</span> hadc<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> pData<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Enable the ADC peripheral */</span>
    tmp_hal_status <span class="token operator">=</span> <span class="token function">ADC_Enable</span><span class="token punctuation">(</span>hadc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
 	<span class="token comment">/* Start the DMA channel */</span>
  	<span class="token function">HAL_DMA_Start_IT</span><span class="token punctuation">(</span>hadc<span class="token operator">-&gt;</span>DMA_Handle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>hadc<span class="token operator">-&gt;</span>Instance<span class="token operator">-&gt;</span>DR<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>ADC</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解I2C时序（以I2C实时时钟PCF8563为案例）</title>
    <url>/2024/11/16/31289.html</url>
    <content><![CDATA[<h1 id="yi-qian-yan">一、前言</h1>
<h2 id="ying-jian-bei-jing">硬件背景</h2>
<ul>
<li>GD32F407VET6</li>
<li>I2C实时时钟PCF8563</li>
</ul>
<h2 id="yuan-li-tu">原理图</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116194724707.png" alt="image-20241116194724707" style="zoom: 33%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116194750339.png" alt="image-20241116194750339" style="zoom:33%;">
<h2 id="wen-dang-zi-liao">文档资料</h2>
<ul>
<li><a href="https://www.nxp.com/docs/en/user-guide/UM10204.pdf">NXP（恩智浦）I2C总线协议说明书和用户手册</a></li>
<li><a href="https://atta.szlcsc.com/upload/public/pdf/source/20230921/9DB04F89E1E4336DD7CCB7C268B77442.pdf">I 2 C 实时时钟/日历芯片 PCF8563</a></li>
</ul>
<h1 id="er-en-zhi-pu-nxp-i-2-c-zong-xian-xie-yi-shi-xu-jie-xi">二、恩智浦（NXP）I2C总线协议时序解析</h1>
<blockquote>
<p>参见<a href="https://www.nxp.com/docs/en/user-guide/UM10204.pdf">NXP（恩智浦）I2C总线协议说明书和用户手册</a>中的</p>
<p>**6 Electrical specifications and timing for I/O stages and bus lines  **</p>
<p>**Table 11. Characteristics of the SDA and SCL bus lines for Standard, Fast, and Fast-mode Plus I2C-bus devices **</p>
</blockquote>
<h2 id="overview">Overview</h2>
<h3 id="sda-scl-zong-xian-te-xing">SDA/SCL总线特性</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116195121046.png" alt="image-20241116195121046"></p>
<h3 id="shi-xu-ding-yi">时序定义</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116202433638.png" alt="image-20241116202433638"></p>
<h2 id="i-2-c-chuan-shu-kong-zhi">I2C传输控制</h2>
<p>I2C规定单次通信需要遵循如下两个控制</p>
<h3 id="shu-ju-chuan-shu-kong-zhi">数据传输控制</h3>
<p><mark>在SCL为低时可以修改SDA；SCL为高时，SDA应该保持不变。</mark></p>
<p>在SCL为低电平时，准备SDA（发送方）；在SCL为高时，保持SDA（在此期间接送方会读取SDA）。</p>
<p>这一点在<a href="https://www.nxp.com/docs/en/user-guide/UM10204.pdf">NXP（恩智浦）I2C总线协议说明书和用户手册</a>中的 <strong>3.1.3 Data validity</strong>说明如下：</p>
<blockquote>
<p>The data on the SDA line must be stable during the HIGH period of the clock. The HIGH or LOW state of the data line can only change when the clock signal on the SCL line is LOW (see Figure 4). One clock pulse is generated for each data bit transferred.</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116214251742.png" alt="image-20241116214251742"></p>
<h2 id="qi-shi-zhong-zhi-kong-zhi">起始/终止控制</h2>
<p>在SCL为高时，拉低SDA（需要提前准备好SDA为高）；在SCL为低时，拉高SDA（需要提前准备好SDA为低）。</p>
<p><mark>可以发现为了区分数据传输控制，特意在SCL为高时操作SDA。</mark></p>
<p>这一点在<a href="https://www.nxp.com/docs/en/user-guide/UM10204.pdf">NXP（恩智浦）I2C总线协议说明书和用户手册</a>中的 <strong>3.1.4 START and STOP conditions</strong> 说明如下：</p>
<blockquote>
<p>All transactions begin with a START (S) and are terminated by a STOP (P) (see Figure 5). A HIGH to LOW transition on the SDA line while SCL is HIGH defines a START condition. A LOW to HIGH transition on the SDA line while SCL is HIGH defines a STOP condition.</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116214423843.png" alt="image-20241116214423843"></p>
<h2 id="f-sub-scl-sub-shi-zhong-xian-pin-lu-frequency-for-scl">f<sub>SCL</sub>时钟线频率（frequency for SCL）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116201656138.png" alt="image-20241116201656138"></p>
<p>该参数规定了I2C的SCL时钟线的频率，以Fast-mode为例，最大为400kHz。这意味着我们在操作SCL时，将SCL置0的时间+随后将SCL置1的时间之和不能小于 1/400kHz = 2.5us：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116201725124.png" alt="image-20241116201725124"></p>
<p>以GD32F4为例，对应标准库函数 <code>gpio_output_options_set</code>中的 <code>speed</code>参数，即控制GPIO引脚输出高低电平时，能够达到的最大频率。</p>
<h2 id="t-sub-hd-sta-sub-qi-shi-xin-hao-bao-chi-shi-jian-hol-d-time-for-start-condition">t<sub>HD;STA</sub>起始信号保持时间（HolD time for START condition）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116202607065.png" alt="image-20241116202607065"></p>
<p>该参数规定了起始信号（START condition）需要保持的时间（在SCL为高电平时，将SDA由高拉低后需要保持的时间）</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116202932000.png" alt="image-20241116202932000" style="zoom: 50%;">
<p>这里有两个细节需要注意一下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116204002371.png" alt="image-20241116204002371"></p>
<ol>
<li>hold time (<mark>repeated</mark>) START condition：<mark>repeated</mark>表明第一个起始信号后的重复起始信号都需要遵循这个规则，例如在<a href="https://atta.szlcsc.com/upload/public/pdf/source/20230921/9DB04F89E1E4336DD7CCB7C268B77442.pdf">PCF8563</a>中提到的 <mark>写地址，读数据</mark>模式中，在第一个S（起始信号）之后有一个 <mark>dummy&nbsp;write</mark>（指定后面连续读的起始寄存器地址），然后又有一个S，紧接着才是真正的连续读数据。这里第二个S就属于 <mark>repeated&nbsp;START&nbsp;condition</mark>。</li>
</ol>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116203555124.png" alt="image-20241116203555124" style="zoom: 33%;">
<ol start="2">
<li>
<p><mark>After this period, the first clock pulse is generated</mark>：暗示我们在这个t<sub>HD;STA</sub>周期（相当于I2C通信的准备阶段）过后，主设备应该生成第一个时钟脉冲开始传输数据。因此时序定义里也给出了如下示意图，<strong>暗示我们在延时t<sub>HD;STA</sub>之后，应该将SCL拉低</strong>（图中 <mark>1<sup>st</sup>&nbsp;clock&nbsp;cycle</mark>也进一步印证了这一点）。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116204645958.png" alt="image-20241116204645958" style="zoom:50%;">
</li>
</ol>
<h2 id="t-sub-low-sub-t-sub-high-sub-shi-zhong-xian-gao-di-dian-ping-zhou-qi-kong-zhi-scl-low-high-period">t<sub>LOW</sub>/t<sub>HIGH</sub>时钟线高低电平周期控制（SCL low/high period）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116204955105.png" alt="image-20241116204955105"></p>
<p>该参数规定了我们传输数据拉高拉低SCL时，其高低电平应该持续的时间，以Fast-mode为例，SCL低电平最低持续1.3us，高电平则最低0.6us</p>
<h2 id="t-sub-su-sta-sub-qi-shi-xin-hao-jian-li-zhun-bei-shi-jian-set-up-time-for-start">t<sub>SU;STA</sub> 起始信号建立（准备）时间（SetUp time for START）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116205306146.png" alt="image-20241116205306146"></p>
<p>该参数规定了起始信号的建立（准备）时间，这个参数有点难理解。我们参照时序定义来看下：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116205502756.png" alt="image-20241116205502756" style="zoom: 50%;">
<p>和t<sub>HD;STA</sub>对比来看，t<sub>HD;STA</sub>规定了起始信号的保持时间（SCL为高时，拉低SDA并保持）。</p>
<p>t<sub>SU;STA</sub> 则是用于重复起始信号的（每次通信至少对应一个START和STOP，连续的多次通信中紧接着前一次通信STOP之后的START可称为 <mark>repeated START</mark>，前面介绍的 <mark>写地址，连续读模式</mark>对应的START,START,STOP中第二个START也是如此）。</p>
<p>对于重复起始信号而言，SCL可能是以低电平开始的（例如上一次通信将SCL拉低了），为了满足实现起始信号（拉低SDA）的<mark>前置条件（SCL为高，SDA为高）</mark>，该参数规定了在拉低SDA之前，SDA应该在SCL为高期间保持高电平的时间。</p>
<h2 id="qi-shi-zhong-zhi-xin-hao-de-shi-xian">起始/终止信号的实现</h2>
<p>这里我们已经可以写出起始信号的伪代码了（所有延时以 Fast-mode 为例）：</p>
<p><code>I2C_Start()</code></p>
<pre class="line-numbers language-none"><code class="language-none">// 前置条件
SDA = HIGH
SCL = HIGH
// 前置条件建立（准备）时间
delay 0.6us

// 起始信号(SCL,SDA为高时，拉低SDA)
SDA = LOW
// 起始信号保持时间
delay 0.6

// 开始第一个时钟周期低电平阶段
SCL = 0;
delay 1.3us<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应的C语言实现如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_SCL_PIN</span>    <span class="token expression">GPIO_PIN_6</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_SDA_PIN</span>    <span class="token expression">GPIO_PIN_7</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_GPIO_PORT</span>  <span class="token expression">GPIOB</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_GPIO_RCU</span>   <span class="token expression">RCU_GPIOB</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_HIGH</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_LOW</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SCL_HIGH</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SCL_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SCL_LOW</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SCL_PIN<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start setup</span>
    <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start hold</span>

    <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><mark>注意</mark>：这里第22行，并没有和伪代码中的1.3us保持一致，是因为在后续的数据传输中，置位SDA后是需要一个setup时延的（例如1us），无形之间延长了SCL低电平的时间（相当于变成为2us），详见后文分析。</p>
<h2 id="t-sub-hd-dat-sub-shu-ju-bao-chi-shi-jian-hol-d-time-for-data">t<sub>HD;DAT</sub>数据保持时间（HolD time for DATA）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116212042232.png" alt="image-20241116212042232"></p>
<p>可以发现该参数对应两种条件： <mark>CBUS compatible controllers</mark>和 <mark>I2C-bus devices</mark>，我们这里只关心I2C，要求持续的最小时间为0，相当于不需要控制时延，暂时可以忽略该参数。</p>
<h2 id="t-sub-su-dat-sub-shu-ju-jian-li-zhun-bei-shi-jian-set-up-time-for-data">t<sub>SU;DAT</sub>数据建立（准备）时间（SetUp time for DATA）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116212548515.png" alt="image-20241116212548515"></p>
<p>该参数规定了SDA建立（准备）时间，也即在SCL为低时，置位SDA为下一个要发送的数据后，到拉高SCL（以让接收方读取数据）之前应该保持的时间：</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116214624147.png" alt="image-20241116214624147" style="zoom:50%;">
<p>我们每次发送数据都遵循如下流程</p>
<ul>
<li>拉低SCL，并延时t<sub>LOW</sub></li>
<li>准备SDA（下一次要发送的数据），并延时t<sub>SU;DAT</sub></li>
<li>拉高SCL，并延时/t<sub>HIGH</sub></li>
</ul>
<h2 id="fa-song-yi-ge-zi-jie-de-shi-xian">发送一个字节的实现</h2>
<p>至此，我们可以写出发送一个字节的伪代码了（接着之前的 <code>I2C_Start</code>）：</p>
<p><code>I2C_SendByte</code></p>
<pre class="line-numbers language-none"><code class="language-none">uint8_t byte
// 需要循环8次，发送一个字节8个bit
for(i = 0 ; i &lt; 8 ; i++) {
    // 此前I2C_Start的结尾以将SCL拉低，这里我们可以直接准备SDA
    SDA = (byte &amp; (0x08 &gt;&gt; i)) ? HIGH : LOW
    delay 1us // SDA建立时间，这期间SCL仍未低电平，因此一共持续了2us
    
    SCL = HIGH
    delay 1us // SCL高电平周期
    
    SCL = LOW // 开启下一个时钟周期
    delay 1us // SCL低电平周期
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应GD32F4的C语言实现：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start setup</span>
    <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start hold</span>

    <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// data set-up</span>

        <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scl high</span>

        <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="t-sub-r-sub-t-sub-f-sub-shang-sheng-yan-xia-jiang-yan-shi-jian-rising-falling-edge">t<sub>r</sub> / t<sub>f</sub>上升沿/下降沿时间（Rising/Falling edge）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116220318791.png" alt="image-20241116220318791"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116220810270.png" alt="image-20241116220810270" style="zoom:33%;">
<p>这两个参数规定了SCL和SDA的上升沿（r-rising edge）、下降沿（f-falling edge）的时间控制。这个参数和GPIO对应电气特性中的压摆率（<mark>Slew Rate</mark>）。</p>
<blockquote>
<p>[!NOTE]</p>
<p>该参数可以在MCU数据手册与电气特性（<code>Electrical characteristics  </code>）相关的章节中可以找到（<code>AC characteristics</code> ）</p>
</blockquote>
<h2 id="t-sub-su-sto-sub-zhong-zhi-xin-hao-jian-li-zhun-bei-shi-jian-set-up-time-for-stop">t<sub>SU;STO</sub>终止信号建立（准备）时间（SetUp time for STOP）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116221510344.png" alt="image-20241116221510344"></p>
<p>由于终止信号（拉高SDA）是有前置条件的（SCL为高，SDA为低），该参数规定了在拉高SDA之前，SDA在SCL为高期间保持低电平的时间：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116222328620.png" alt="image-20241116222328620"></p>
<h2 id="t-sub-buf-sub-zong-xian-shi-fang-shi-jian-b-us-free-time">t<sub>BUF</sub>总线释放时间（BUs Free time）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116222447598.png" alt="image-20241116222447598"></p>
<p>该参数规定了在一个终止信号（P）和下一个起始信号（S）之间，总线应该被释放（SCL/SDA保持高电平）的时间：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116222631166.png" alt="image-20241116222631166"></p>
<h2 id="zhong-zhi-xin-hao-de-shi-xian">终止信号的实现</h2>
<p>至此，我们可以实现终止信号的伪代码了：</p>
<p><code>I2C_Stop</code></p>
<pre class="line-numbers language-none"><code class="language-none">// 前置条件：SDA为低，SCL为高
// 此前I2C_SendByte的结尾已将SCL拉低，这里可以直接准备SDA
SDA = 0
delay 1us // 为了确保SCL低电平周期大于1.3us，这里补充一个1us
SCL = HIGH
delay 1us // SCL高电平周期
delay 1us // 补充1us，确保&gt;总线释放时间1.3us<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应C语言实现：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//stop setup</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//bus free time between a STOP and START condition</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="t-sub-vd-dat-sub-t-sub-vd-ack-sub-shu-ju-ack-you-xiao-shi-jian-valid-time-for-data-ack">t<sub>VD;DAT</sub>/t<sub>VD;ACK</sub>数据/ACK有效时间（Valid time for DATA/ACK）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241116223438554.png" alt="image-20241116223438554"></p>
<p>个人理解这两个参数是在接收的场景下使用的，在作为接收方释放SDA（拉高SDA）之后，发送方会通过拉高/拉低SDA来准备ACK/数据比特，然后我们需要等待t<sub>VD;DAT</sub>/t<sub>VD;ACK</sub>这样一个时间确保发送方准备好SDA了，然后我们再拉高SCL（让发送方保持SDA），并读取SDA。</p>
<h2 id="jie-shou-ack-shu-ju-zi-jie-dai-ma-shi-xian">接收ACK/数据字节代码实现</h2>
<p>至此，我们可以实现接收ack和数据字节的代码了：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_IN</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_mode_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> GPIO_MODE_INPUT<span class="token punctuation">,</span> GPIO_PUPD_PULLUP<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_OUT</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_mode_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> GPIO_MODE_OUTPUT<span class="token punctuation">,</span> GPIO_PUPD_PULLUP<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_READ</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_input_bit_get</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>

bool <span class="token function">wait_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bool success <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// release bus</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scl high</span>

    <span class="token function">SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    success <span class="token operator">=</span> <span class="token function">SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">;</span> <span class="token comment">// read ack</span>
    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scl low</span>
    <span class="token keyword">return</span> success<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">receive_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// slave keep data</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// read data</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// let slave prepare next data</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="san-i-2-c-wan-zheng-dai-ma">三、I2C完整代码</h1>
<h2 id="code-hal-i-2-c-soft-h-code"><code>hal_i2c_soft.h</code></h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/16.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HAL_I2C_SOFT_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAL_I2C_SOFT_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"gd32f4xx.h"</span></span>

<span class="token keyword">void</span> <span class="token function">hal_i2c_soft_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bool <span class="token function">hal_i2c_soft_write</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dev_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> reg_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
bool <span class="token function">hal_i2c_soft_read</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dev_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> reg_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">hal_i2c_soft_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//HAL_I2C_SOFT_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="code-hal-i-2-c-soft-c-code"><code>hal_i2c_soft.c</code></h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/16.</span>
<span class="token comment">//</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hal_i2c_soft.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"systick.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_SCL_PIN</span>    <span class="token expression">GPIO_PIN_6</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_SDA_PIN</span>    <span class="token expression">GPIO_PIN_7</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_GPIO_PORT</span>  <span class="token expression">GPIOB</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_GPIO_RCU</span>   <span class="token expression">RCU_GPIOB</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_HIGH</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_LOW</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SCL_HIGH</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SCL_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SCL_LOW</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SCL_PIN<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_IN</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_mode_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> GPIO_MODE_INPUT<span class="token punctuation">,</span> GPIO_PUPD_PULLUP<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_OUT</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_mode_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> GPIO_MODE_OUTPUT<span class="token punctuation">,</span> GPIO_PUPD_PULLUP<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_READ</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">gpio_input_bit_get</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SDA_PIN<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">hal_i2c_soft_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使能GPIOB时钟</span>
    <span class="token function">rcu_periph_clock_enable</span><span class="token punctuation">(</span>I2C_GPIO_RCU<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 配置PB6（SCL）和PB7（SDA）为开漏输出模式</span>
    <span class="token function">gpio_mode_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> GPIO_MODE_OUTPUT<span class="token punctuation">,</span> GPIO_PUPD_PULLUP<span class="token punctuation">,</span> I2C_SCL_PIN <span class="token operator">|</span> I2C_SDA_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_output_options_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> GPIO_OTYPE_OD<span class="token punctuation">,</span> GPIO_OSPEED_50MHZ<span class="token punctuation">,</span> I2C_SCL_PIN <span class="token operator">|</span> I2C_SDA_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将SCL和SDA线拉高</span>
    <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>I2C_GPIO_PORT<span class="token punctuation">,</span> I2C_SCL_PIN <span class="token operator">|</span> I2C_SDA_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start setup</span>
    <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start hold</span>

    <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//stop setup</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//bus free time between a STOP and START condition</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool <span class="token function">wait_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bool success <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// release bus</span>
    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scl high</span>

    <span class="token function">SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    success <span class="token operator">=</span> <span class="token function">SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">;</span> <span class="token comment">// read ack</span>
    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scl low</span>
    <span class="token keyword">return</span> success<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send_ack</span><span class="token punctuation">(</span>bool ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// set sda to reponse ack/nack</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sda setup</span>

    <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// let slave read ack</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reset scl for next operation</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">SDA_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">SDA_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// data set-up</span>

        <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scl high</span>

        <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">receive_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SCL_HIGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// slave keep data</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// read data</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">SCL_LOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// let slave prepare next data</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool <span class="token function">start_for_write</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dev_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> reg_addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">send_byte</span><span class="token punctuation">(</span>dev_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">wait_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"write dev_addr failed"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">send_byte</span><span class="token punctuation">(</span>reg_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">wait_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"write reg_addr failed"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool <span class="token function">start_for_read</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dev_addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">send_byte</span><span class="token punctuation">(</span>dev_addr <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// read from slave</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">wait_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"write dev_addr for read failed"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">hal_i2c_soft_write</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dev_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> reg_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">start_for_write</span><span class="token punctuation">(</span>dev_addr<span class="token punctuation">,</span> reg_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">send_byte</span><span class="token punctuation">(</span><span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">wait_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"write data[%d] failed"</span><span class="token punctuation">,</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        data<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">hal_i2c_soft_read</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dev_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> reg_addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// dummy write for register address</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">start_for_write</span><span class="token punctuation">(</span>dev_addr<span class="token punctuation">,</span> reg_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// continuous read</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">start_for_read</span><span class="token punctuation">(</span>dev_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">receive_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">send_ack</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">receive_byte</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">send_ack</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>I2C</tag>
        <tag>时序</tag>
        <tag>PCF8563</tag>
        <tag>I²C</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解FreeRTOS：内核特性和底层原理</title>
    <url>/2024/12/24/21034.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<ul>
<li><a href="https://documentation-service.arm.com/static/606dc36485368c4c2b1bf62f?token=">ARMv7-M Architecture Reference Manual</a></li>
<li><a href="https://www.freertos.org/Documentation/02-Kernel/07-Books-and-manual/01-RTOS_book">Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide</a>
<ul>
<li><a href="https://github.com/FreeRTOS/FreeRTOS-Kernel-Book/blob/main/toc.md">https://github.com/FreeRTOS/FreeRTOS-Kernel-Book/blob/main/toc.md</a></li>
</ul>
</li>
<li>《The Definitive Guide to ARM Cortex-M3 and Cortex-M4 processors 3rd edition》</li>
<li>《清华开发者书库 ARM Cortex-M3与Cortex-M4权威指南》</li>
<li><a href="https://rtos.100ask.net/zh/FreeRTOS/DShanMCU-F103/">百问网《FreeRTOS入门与工程实践-基于STM32F103》教程-基于DShanMCU-103(STM32F103)</a></li>
</ul>
<h1 id="ar-mv-7-m-jia-gou">ARMv7-M架构</h1>
<h2 id="cong-c-cheng-xu-dao-hui-bian">从C程序到汇编</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224100940681.png" alt="image-20241224100940681"></p>
<h2 id="arm-he-ji-cun-qi">ARM核寄存器</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224102230446.png" alt="《The Definitive Guide to ARM Cortex-M3 and Cortex-M4 processors 3rd edition》" style="zoom: 50%;">
<h2 id="aapcs-arm-jia-gou-guo-cheng-diao-yong-biao-zhun">AAPCS（ARM架构过程调用标准）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224094127013.png" alt="《The Definitive Guide to ARM Cortex-M3 and Cortex-M4 processors 3rd edition》"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224094418134.png" alt="《The Definitive Guide to ARM Cortex-M3 and Cortex-M4 processors 3rd edition》"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224094512683.png" alt="《The Definitive Guide to ARM Cortex-M3 and Cortex-M4 processors 3rd edition》"></p>
<h3 id="yi-chang-chu-li">异常处理</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224131251232.png" alt="《The Definitive Guide to ARM Cortex-M3 and Cortex-M4 processors 3rd edition》"></p>
<h2 id="c-han-shu-diao-yong-fan-hui-bian-fen-xi">C函数调用反汇编分析</h2>
<h3 id="keil-sheng-cheng-fan-hui-bian">Keil生成反汇编</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224103049492.png" alt="image-20241224103049492"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fromelf  <span class="token parameter variable">--text</span>  <span class="token parameter variable">-a</span> <span class="token parameter variable">-c</span>  <span class="token parameter variable">--output</span><span class="token operator">=</span>xxx.dis  xxx.axf
示例：fromelf  <span class="token parameter variable">--text</span>  <span class="token parameter variable">-a</span> <span class="token parameter variable">-c</span>  <span class="token parameter variable">--output</span><span class="token operator">=</span>test.dis  01_freertos_template<span class="token punctuation">\</span>01_freertos_template.axf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="jie-he-aapcs-fen-xi-c-han-shu-diao-yong">结合AAPCS分析C函数调用</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224103854969.png" alt="image-20241224103854969"></p>
<ul>
<li>局部变量不一定保存在栈中，经过编译器优化后可能保存在Rn寄存器中；通过 <code>volatile</code>关键字可以强制将其保存在栈中</li>
</ul>
<h1 id="nei-cun-guan-li">内存管理</h1>
<h2 id="wei-shi-yao-yao-zi-ji-shi-xian-nei-cun-guan-li">为什么要自己实现内存管理</h2>
<p>FreeRTOS中有内核对象：task、queue、semaphores和event group等。为了让FreeRTOS更容易使用，这些内核对象一般都是动态分配：用到时分配，不使用时释放。使用内存的动态管理功能，简化了程序设计：不再需要小心翼翼地提前规划各类对象，简化API函数的涉及，甚至可以减少内存的使用。</p>
<p>在C语言的库函数中，有mallc、free等函数，但是在FreeRTOS中，它们不适用：</p>
<ul>
<li>不适合用在资源紧缺的嵌入式系统中</li>
<li>这些函数的实现过于复杂、占据的代码空间太大</li>
<li>并非线程安全的(thread- safe)</li>
<li>运行有不确定性：每次调用这些函数时花费的时间可能都不相同</li>
<li>内存碎片化</li>
<li>使用不同的编译器时，需要进行复杂的配置</li>
<li>有时候难以调试</li>
</ul>
<h2 id="dui-guan-li-suan-fa">堆管理算法</h2>
<h3 id="zhi-fen-pei-bu-hui-shou">只分配不回收</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224114401326.png" alt="image-20241224114401326"></p>
<h3 id="yuan-shu-ju-header-kong-xian-lian-biao">元数据header+空闲链表</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224114431719.png" alt="image-20241224114431719"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224114858195.png" alt="image-20241224114858195"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224115022035.png" alt="image-20241224115022035"></p>
<h2 id="dui-he-zhan">堆和栈</h2>
<p><strong>注意：我们经常"堆栈"混合着说，其实它们不是同一个东西</strong>：</p>
<ul>
<li>堆，heap，就是一块空闲的内存，需要提供管理函数
<ul>
<li>malloc：从堆里划出一块空间给程序使用</li>
<li>free：用完后，再把它标记为"空闲"的，可以再次使用</li>
</ul>
</li>
<li>栈，stack，<strong>函数调用时局部变量保存在栈中，当前程序的环境也是保存在栈中</strong>
<ul>
<li><strong>可以从堆中分配一块空间用作栈</strong></li>
</ul>
</li>
</ul>
<img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-8/image1.png" alt="img" style="zoom:50%;">
<h3 id="free-rtos-zhong-ren-wu-zhan-de-chuang-jian-he-shi-fang">FreeRTOS中任务栈的创建和释放</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224105255478.png" alt="xTaskCreate"></p>
<h2 id="free-rtos-zhong-de-nei-cun-guan-li">FreeRTOS中的内存管理</h2>
<p>FreeRTOS中内存管理的接口函数为：<code>pvPortMalloc</code> 、<code>vPortFree</code>，对应于C库的<code>malloc</code>、<code>free</code>。 文件在<code>FreeRTOS/Source/portable/MemMang</code>下，它也是放在<code>portable</code>目录下，表示你可以提供自己的函数。</p>
<p>源码中默认提供了5个文件，对应内存管理的5种方法：</p>
<table>
<thead>
<tr>
<th><strong>文件</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>heap_1.c</td>
<td>分配简单，时间确定</td>
<td>只分配、不回收</td>
</tr>
<tr>
<td>heap_2.c</td>
<td>动态分配、最佳匹配</td>
<td>碎片、时间不定</td>
</tr>
<tr>
<td>heap_3.c</td>
<td>调用标准库函数</td>
<td>速度慢、时间不定</td>
</tr>
<tr>
<td>heap_4.c</td>
<td>相邻空闲内存可合并</td>
<td>可解决碎片问题、时间不定</td>
</tr>
<tr>
<td>heap_5.c</td>
<td>在heap_4基础上支持分隔的内存块</td>
<td>可解决碎片问题、时间不定</td>
</tr>
</tbody>
</table>
<h3 id="heap-1">heap_1</h3>
<p>它只实现了<code>pvPortMalloc</code>，没有实现<code>vPortFree</code>。</p>
<p>如果你的程序<strong>不需要删除内核对象</strong>，那么可以使用<code>heap_1</code>：</p>
<ul>
<li>实现最简单</li>
<li>没有碎片问题</li>
<li>一些要求非常严格的系统里，不允许使用动态内存，就可以使用<code>heap_1</code></li>
</ul>
<p>它的实现原理很简单，首先定义一个大数组：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224110238896.png" alt="image-20241224110238896"></p>
<p>然后，对于pvPortMalloc调用时，从这个数组中分配空间。</p>
<p>FreeRTOS在创建任务时，需要2个内核对象：task control block(TCB)、stack。 使用heap_1时，内存分配过程如下图所示：</p>
<ul>
<li>A：创建任务之前整个数组都是空闲的</li>
<li>B：创建第1个任务之后，蓝色区域被分配出去了</li>
<li>C：创建3个任务之后的数组使用情况</li>
</ul>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224110934902.png" alt="Mastering the FreeRTOS™ Real Time Kernel" style="zoom:50%;">
<h3 id="heap-2">heap_2</h3>
<p>Heap_2之所以还保留，只是为了兼容以前的代码。新设计中不再推荐使用Heap_2。建议使用Heap_4来替代Heap_2，更加高效。</p>
<p>Heap_2也是在数组上分配内存，跟Heap_1不一样的地方在于：</p>
<ul>
<li>Heap_2使用**最佳匹配算法(best fit)**来分配内存</li>
<li>它支持vPortFree</li>
</ul>
<p><strong>最佳匹配算法</strong>：</p>
<ul>
<li>假设heap有3块空闲内存：5字节、25字节、100字节</li>
<li>pvPortMalloc想申请20字节</li>
<li><strong>找出最小的、能满足pvPortMalloc的内存</strong>：25字节</li>
<li>把它划分为20字节、5字节
<ul>
<li>返回这20字节的地址</li>
<li>剩下的5字节仍然是空闲状态，留给后续的pvPortMalloc使用</li>
</ul>
</li>
</ul>
<p><strong>与Heap_4相比，Heap_2不会合并相邻的空闲内存，所以Heap_2会导致严重的"碎片化"问题。</strong></p>
<p>但是，如果申请、分配内存时大小总是相同的，这类场景下Heap_2没有碎片化的问题。所以<strong>它适合这种场景：频繁地创建、删除任务，但是任务的栈大小都是相同的(创建任务时，需要分配TCB和栈，TCB总是一样的)</strong>。</p>
<p>虽然不再推荐使用heap_2，但是它的效率还是远高于malloc、free。</p>
<p>使用heap_2时，内存分配过程如下图所示：</p>
<ul>
<li>A：创建了3个任务</li>
<li>B：删除了一个任务，空闲内存有3部分：顶层的、被删除任务的TCB空间、被删除任务的Stack空间</li>
<li>C：创建了一个新任务，因为TCB、栈大小跟前面被删除任务的TCB、栈大小一致，所以刚好分配到原来的内存</li>
</ul>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224111525286.png" alt="Mastering the FreeRTOS™ Real Time Kernel" style="zoom:50%;">
<h3 id="heap-3">heap_3</h3>
<p>Heap_3使用标准C库里的<code>malloc</code>、<code>free</code>函数，所以<strong>堆大小由链接器的配置决定，配置项<code>configTOTAL_HEAP_SIZE</code>不再起作用</strong>。</p>
<p><strong>C库里的malloc、free函数并非线程安全</strong>的，<strong>Heap_3中先暂停FreeRTOS的调度器，再去调用这些函数，使用这种方法实现了线程安全</strong>。</p>
<h3 id="heap-4">heap_4</h3>
<p>跟Heap_1、Heap_2一样，Heap_4也是使用大数组来分配内存。</p>
<p>Heap_4使用 <strong>首次适应算法(first fit)来分配内存</strong> 。它还<strong>会把相邻的空闲内存合并为一个更大的空闲内存</strong>，这有助于较少内存的碎片问题。</p>
<p>首次适应算法：</p>
<ul>
<li>假设堆中有3块空闲内存：5字节、200字节、100字节</li>
<li>pvPortMalloc想申请20字节</li>
<li>找出第1个能满足pvPortMalloc的内存：200字节</li>
<li>把它划分为20字节、180字节</li>
<li>返回这20字节的地址</li>
<li>剩下的180字节仍然是空闲状态，留给后续的pvPortMalloc使用</li>
</ul>
<p>Heap_4会把相邻空闲内存合并为一个大的空闲内存，可以较少内存的碎片化问题。适用于这种场景：频繁地分配、释放不同大小的内存。</p>
<p>Heap_4的使用过程举例如下：</p>
<ul>
<li>A：创建了3个任务</li>
<li>B：删除了一个任务，空闲内存有2部分：
<ul>
<li>顶层的</li>
<li>被删除任务的TCB空间、被删除任务的Stack空间合并起来的</li>
</ul>
</li>
<li>C：分配了一个Queue，从第1个空闲块中分配空间</li>
<li>D：分配了一个User数据，从Queue之后的空闲块中分配</li>
<li>E：释放的Queue，User前后都有一块空闲内存</li>
<li>F：释放了User数据，User前后的内存、User本身占据的内存，合并为一个大的空闲内存</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224111821826.png" alt="Mastering the FreeRTOS™ Real Time Kernel"></p>
<h3 id="heap-5">heap_5</h3>
<p>Heap_5分配内存、释放内存的算法跟Heap_4是一样的。</p>
<p>相比于Heap_4，Heap_5并不局限于管理一个大数组：它可以管理<strong>多块、分隔开的内存</strong>。</p>
<p>在嵌入式系统中，内存的地址可能并不连续，这种场景下可以使用Heap_5。</p>
<p>既然内存是分隔开的，那么就需要进行初始化：确定这些内存块在哪、多大：</p>
<ul>
<li>在使用<code>pvPortMalloc</code>之前，必须先指定内存块的信息</li>
<li>使用<code>vPortDefineHeapRegions</code>来指定这些信息</li>
</ul>
<p>怎么指定一块内存？使用如下结构体：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224112057765.png" alt="image-20241224112057765"></p>
<p>怎么指定多块内存？使用一个HeapRegion_t数组，在这个数组中，低地址在前、高地址在后。 比如：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224112149988.png" alt="image-20241224112149988"></p>
<p><code>vPortDefineHeapRegions</code>函数原型如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224112220562.png" alt="image-20241224112220562"></p>
<h2 id="heap-xiang-guan-de-han-shu">heap相关的函数</h2>
<h3 id="pv-port-malloc-v-port-free">pvPortMalloc/vPortFree</h3>
<p>函数原型：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">pvPortMalloc</span><span class="token punctuation">(</span> <span class="token class-name">size_t</span> xWantedSize <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">vPortFree</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span> pv <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>作用：分配内存、释放内存。</p>
<p>如果分配内存不成功，则返回值为NULL。</p>
<h3 id="x-port-get-free-heap-size">xPortGetFreeHeapSize</h3>
<p>函数原型：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">xPortGetFreeHeapSize</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当前还有多少空闲内存，这函数可以用来优化内存的使用情况。比如当所有内核对象都分配好后，执行此函数返回2000，那么configTOTAL_HEAP_SIZE就可减小2000。</p>
<p>注意：在heap_3中无法使用。</p>
<h3 id="x-port-get-minimum-ever-free-heap-size">xPortGetMinimumEverFreeHeapSize</h3>
<p>函数原型：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">xPortGetMinimumEverFreeHeapSize</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回：程序运行过程中，空闲内存容量的最小值。</p>
<p>注意：只有heap_4、heap_5支持此函数。</p>
<h3 id="malloc-shi-bai-de-gou-zi-han-shu">malloc失败的钩子函数</h3>
<p>在<code>pvPortMalloc</code>函数内部：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224112611563.png" alt="image-20241224112611563"></p>
<p>所以，如果想使用这个钩子函数：</p>
<ul>
<li>在<code>FreeRTOSConfig.h</code>中，把<code>configUSE_MALLOC_FAILED_HOOK</code>定义为<code>1</code></li>
<li>提供<code>vApplicationMallocFailedHook</code>函数</li>
<li><code>pvPortMalloc</code>失败时，才会调用此函数</li>
</ul>
<h1 id="zhan">栈</h1>
<h2 id="ju-bu-bian-liang-bao-cun-zai-zhan-li-ru-he-ti-xian">局部变量保存在栈里？如何体现？</h2>
<ul>
<li>编译器优化后，局部变量可能保存在Rn寄存器中</li>
<li>使用<code>volatile</code>可以强制编译器从内存中读写变量</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224115549974.png" alt="image-20241224115549974"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224124325959.png" alt="image-20241224124325959"></p>
<h2 id="han-shu-diao-yong-dui-ying-ya-zhan-chu-zhan">函数调用对应压栈/出栈？</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224115808926.png" alt="image-20241224115808926"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224124139332.png" alt="image-20241224124139332"></p>
<h2 id="wei-he-mei-ge-ren-wu-yao-you-zi-ji-de-zhan">为何每个任务要有自己的栈？</h2>
<ul>
<li>函数的调用关系/调用深度，调用者需要按需保护的寄存器：R0~R2、R12、LR、PSR</li>
<li>函数的局部变量
<ul>
<li>通用寄存器不够用时，局部变量在栈中分配</li>
<li><code>volatile</code>变量在栈中分配</li>
</ul>
</li>
<li>被切换前任务的执行现场
<ul>
<li>进入PendSV异常，在执行ISR之前，ARM架构异常机制会按照AAPCS标准保护调用者需要保存的寄存器：R0~R2、R12、LR、PSR、<strong>PC</strong>（这些都由硬件自动完成）</li>
<li>FreeRTOS的 <code>xPortPendSVHandler</code>中，将剩余的R4~R11也都一并保存起来，这样任务的执行现场就都保存到任务的栈中了</li>
</ul>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224124452571.png" alt="image-20241224124452571"></p>
<h1 id="ren-wu-guan-li">任务管理</h1>
<h2 id="ren-wu-de-chuang-jian">任务的创建</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224130522653.png" alt="image-20241224130522653"></p>
<h2 id="ping-gu-ren-wu-zhan-da-xiao">评估任务栈大小</h2>
<ul>
<li>函数调用链
<ul>
<li>每个调用方需要按照AAPCS按需保存自己所用到的R0~R3、R12、LR、PSR</li>
<li>每个函数的局部变量</li>
</ul>
</li>
<li>任务执行现场
<ul>
<li>进入PendSV时由硬件保存：R0~R3、R12、LR、PSR、PC</li>
<li>FreeRTOS的 <code>xPortPendSVHandler</code>保存：R4~R11</li>
</ul>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224130621193.png" alt="image-20241224130621193"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224130839772.png" alt="image-20241224130839772"></p>
<h2 id="ren-wu-zhuang-tai-ji">任务状态机</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224142259763.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide" style="zoom: 50%;">
<h2 id="ren-wu-diao-du">任务调度</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224144752049.png" alt="image-20241224144752049"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224150031530.png" alt="image-20241224150031530"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224145415371.png" alt="image-20241224145415371"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224145109913.png" alt="image-20241224145109913"></p>
<h2 id="kong-xian-ren-wu-amp-la-ji-hui-shou">空闲任务 &amp; 垃圾回收</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224150154327.png" alt="image-20241224150154327"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224150227503.png" alt="image-20241224150227503"></p>
<h2 id="liang-chong-yan-shi">两种延时</h2>
<h3 id="jue-dui-yan-shi">绝对延时</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224150359183.png" alt="image-20241224150359183"></p>
<h3 id="xiang-dui-yan-shi">相对延时</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224150415924.png" alt="image-20241224150415924"></p>
<h1 id="ren-wu-jian-tong-bu-hu-chi-yu-tong-xin">任务间同步/互斥与通信</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224150511395.png" alt="image-20241224150511395"></p>
<h2 id="ji-yu-quan-ju-bian-liang-shi-xian-cun-zai-de-wen-ti">基于全局变量实现存在的问题</h2>
<h3 id="tong-bu">同步</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224152011608.png" alt="image-20241224152011608"></p>
<h3 id="hu-chi">互斥</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224153008075.png" alt="image-20241224153008075"></p>
<h2 id="dui-lie">队列</h2>
<h3 id="ren-wu-zhi-jian-ru-he-chuan-shu-shu-ju">任务之间如何传输数据</h3>
<table>
<thead>
<tr>
<th></th>
<th>数据个数</th>
<th>互斥措施</th>
<th>阻塞-唤醒</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局变量</td>
<td>1</td>
<td>无</td>
<td>无</td>
<td>一读一写</td>
</tr>
<tr>
<td>环形缓冲区</td>
<td>多个</td>
<td>无</td>
<td>无</td>
<td>一读一写</td>
</tr>
<tr>
<td>队列</td>
<td>多个</td>
<td>有</td>
<td>有</td>
<td>多读多写</td>
</tr>
</tbody>
</table>
<h3 id="huan-xing-huan-chong-qu">环形缓冲区</h3>
<p>读写分离可以支持一个生产者和一个消费者同时访问，不会产生竞态条件：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224151016122.png" alt="image-20241224151016122"></p>
<p>使用共享变量，例如缓冲区的数据数量 <code>num</code>则会产生竞态条件：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224154142274.png" alt="image-20241224154142274"></p>
<h3 id="dui-lie-de-ben-zhi">队列的本质</h3>
<p>队列中，数据的读写本质就是环形缓冲区，在这个基础上增加了互斥措施、阻塞-唤醒机制。</p>
<p>如果这个队列不传输数据，只调整"数据个数"，它就是信号量(semaphore)。</p>
<p>如果信号量中，限定"数据个数"最大值为1，它就是互斥量(mutex)。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224155227682.png" alt="image-20241224155227682"></p>
<h3 id="shi-yong-dui-lie-shi-xian-kong-zhi-fan-zhuan">使用队列实现控制翻转</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224160735285.png" alt="image-20241224160735285"></p>
<h3 id="shi-yong-dui-lie-ji-zheng-he-bu-tong-de-shi-jian-yuan">使用队列集整合不同的事件源</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161055197.png" alt="image-20241224161055197"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161151779.png" alt="image-20241224161151779"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161325181.png" alt="image-20241224161325181"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161216093.png" alt="image-20241224161216093"></p>
<h2 id="xin-hao-liang-hu-chi-liang">信号量/互斥量</h2>
<h3 id="xin-hao-liang-de-ben-zhi">信号量的本质</h3>
<blockquote>
<p>控制并发访问共享资源的数量</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161544902.png" alt="image-20241224161544902"></p>
<h3 id="you-xian-ji-fan-zhuan-wen-ti">优先级翻转问题</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161722878.png" alt="image-20241224161722878"></p>
<h3 id="hu-chi-liang-amp-you-xian-ji-ji-cheng">互斥量 &amp; 优先级继承</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224161808946.png" alt="image-20241224161808946"></p>
<h2 id="shi-jian-zu">事件组</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224162326740.png" alt="image-20241224162326740"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224162221034.png" alt="image-20241224162221034"></p>
<h3 id="shi-yong-shi-jian-zu-you-hua-bu-duan-lun-xun-i-2-c-du-qu-mpu-6050-de-wen-ti">使用事件组优化不断轮询I2C读取MPU6050的问题</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224162518626.png" alt="image-20241224162518626"></p>
<h2 id="ren-wu-tong-zhi">任务通知</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224162751206.png" alt="image-20241224162751206"></p>
<h3 id="tcb-tong-zhi-zhuang-tai">TCB通知状态</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224162840004.png" alt="image-20241224162840004"></p>
<h3 id="chang-jing-yi-fa-song-tong-zhi-shi-bei-tong-zhi-fang-bu-shi-deng-dai-tong-zhi-zhuang-tai">场景一：发送通知时，被通知方不是等待通知状态</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224163035649.png" alt="image-20241224163035649"></p>
<h3 id="chang-jing-er-fa-song-tong-zhi-shi-bei-tong-zhi-fang-zheng-zai-deng-dai-tong-zhi">场景二：发送通知时，被通知方正在等待通知</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224163100066.png" alt="image-20241224163100066"></p>
<h3 id="liang-lei-han-shu">两类函数</h3>
<p>任务通知有2套函数，简化版、专业版，列表如下：</p>
<ul>
<li>简化版函数的使用比较简单，它实际上也是使用专业版函数实现的</li>
<li>专业版函数支持很多参数，可以实现很多功能</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>简化版</th>
<th>专业版</th>
</tr>
</thead>
<tbody>
<tr>
<td>发出通知</td>
<td>xTaskNotifyGive vTaskNotifyGiveFromISR</td>
<td>xTaskNotify xTaskNotifyFromISR</td>
</tr>
<tr>
<td>取出通知</td>
<td>ulTaskNotifyTake</td>
<td>xTaskNotifyWait</td>
</tr>
</tbody>
</table>
<h4 id="jian-hua-ban">简化版</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224163222931.png" alt="image-20241224163222931"></p>
<h4 id="zhuan-ye-ban">专业版</h4>
<p>xTaskNotify函数的参数说明如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>参数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">xTaskToNotify</td>
<td>任务句柄(创建任务时得到)，给哪个任务发通知</td>
</tr>
<tr>
<td style="text-align:center">ulValue</td>
<td>怎么使用ulValue，由eAction参数决定</td>
</tr>
<tr>
<td style="text-align:center">eAction</td>
<td>见下表</td>
</tr>
<tr>
<td style="text-align:center">返回值</td>
<td>pdPASS：成功，大部分调用都会成功 pdFAIL：只有一种情况会失败，当eAction为eSetValueWithoutOverwrite， 并且通知状态为"pending"(表示有新数据未读)，这时就会失败。</td>
</tr>
</tbody>
</table>
<p>eNotifyAction参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>eNotifyAction取值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">eNoAction</td>
<td>仅仅是更新通知状态为"pending"，未使用ulValue。 这个选项相当于轻量级的、更高效的二进制信号量。</td>
</tr>
<tr>
<td style="text-align:center">eSetBits</td>
<td>通知值 = 原来的通知值 | ulValue，按位或。 相当于轻量级的、更高效的事件组。</td>
</tr>
<tr>
<td style="text-align:center">eIncrement</td>
<td>通知值 = 原来的通知值 + 1，未使用ulValue。 相当于轻量级的、更高效的二进制信号量、计数型信号量。 相当于**xTaskNotifyGive()**函数。</td>
</tr>
<tr>
<td style="text-align:center">eSetValueWithoutOverwrite</td>
<td>不覆盖。 如果通知状态为"pending"(表示有数据未读)， 则此次调用xTaskNotify不做任何事，返回pdFAIL。 如果通知状态不是"pending"(表示没有新数据)， 则：通知值 = ulValue。</td>
</tr>
<tr>
<td style="text-align:center">eSetValueWithOverwrite</td>
<td>覆盖。 无论如何，不管通知状态是否为"pendng"， 通知值 = ulValue。</td>
</tr>
</tbody>
</table>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224163627001.png" alt="image-20241224163627001"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224163646903.png" alt="image-20241224163646903"></p>
<h1 id="ruan-jian-ding-shi-qi">软件定时器</h1>
<p>软件定时器就是"闹钟"，你可以设置闹钟，</p>
<ul>
<li>在30分钟后让你起床工作</li>
<li>每隔1小时让你例行检查机器运行情况</li>
</ul>
<p>软件定时器也可以完成两类事情：</p>
<ul>
<li>在"未来"某个时间点，运行函数</li>
<li>周期性地运行函数</li>
</ul>
<p>日常生活中我们可以定无数个"闹钟"，这无数的"闹钟"要基于一个真实的闹钟。</p>
<p>在FreeRTOS里，我们也可以设置无数个"软件定时器"，它们都是基于系统滴答中断(Tick Interrupt)。</p>
<h2 id="ruan-jian-ding-shi-qi-de-te-xing">软件定时器的特性</h2>
<p>我们在手机上添加闹钟时，需要指定时间、指定类型(一次性的，还是周期性的)、指定做什么事；还有一些过时的、不再使用的闹钟。如下图所示：</p>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-16/image1.png" alt="img"></p>
<p>使用定时器跟使用手机闹钟是类似的：</p>
<ul>
<li>指定时间：启动定时器和运行回调函数，两者的间隔被称为定时器的周期(period)。</li>
<li>指定类型，定时器有两种类型：
<ul>
<li>一次性(One-shot timers)： 这类定时器启动后，它的回调函数只会被调用一次； 可以手工再次启动它，但是不会自动启动它。</li>
<li>自动加载定时器(Auto-reload timers )： 这类定时器启动后，时间到之后它会自动启动它； 这使得回调函数被周期性地调用。</li>
</ul>
</li>
<li>指定要做什么事，就是指定回调函数</li>
</ul>
<p>实际的闹钟分为：有效、无效两类。软件定时器也是类似的，它由两种状态：</p>
<ul>
<li>运行(Running、Active)：运行态的定时器，当指定时间到达之后，它的回调函数会被调用</li>
<li>冬眠(Dormant)：冬眠态的定时器还可以通过句柄来访问它，但是它不再运行，它的回调函数不会被调用</li>
</ul>
<p>定时器运行情况示例如下：</p>
<ul>
<li>Timer1：它是一次性的定时器，在t1启动，周期是6个Tick。经过6个tick后，在t7执行回调函数。它的回调函数只会被执行一次，然后该定时器进入冬眠状态。</li>
<li>Timer2：它是自动加载的定时器，在t1启动，周期是5个Tick。每经过5个tick它的回调函数都被执行，比如在t6、t11、t16都会执行。</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224171600019.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<h2 id="shang-xia-wen">上下文</h2>
<p>要理解软件定时器API函数的参数，特别是里面的<em>xTicksToWait</em>，需要知道定时器执行的过程。</p>
<p>FreeRTOS中有一个Tick中断，软件定时器基于Tick来运行。在哪里执行定时器函数？第一印象就是在Tick中断里执行：</p>
<ul>
<li>在Tick中断中判断定时器是否超时</li>
<li>如果超时了，调用它的回调函数</li>
</ul>
<p>FreeRTOS是RTOS，它不允许在内核、在中断中执行不确定的代码：如果定时器函数很耗时，会影响整个系统。</p>
<p>所以，FreeRTOS中，不在Tick中断中执行定时器函数。</p>
<p>在哪里执行？在某个任务里执行，这个任务就是：RTOS Damemon Task，RTOS守护任务。以前被称为"Timer server"，但是这个任务要做并不仅仅是定时器相关，所以改名为：RTOS Damemon Task。</p>
<p>当FreeRTOS的配置项<em>configUSE_TIMERS</em>被设置为1时，在启动调度器时，会自动创建RTOS Damemon Task。</p>
<p>我们自己编写的任务函数要使用定时器时，是通过"定时器命令队列"(timer command queue)和守护任务交互，如下图所示：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224165840277.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224165832888.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p>守护任务的优先级为：configTIMER_TASK_PRIORITY；定时器命令队列的长度为configTIMER_QUEUE_LENGTH。</p>
<h2 id="shou-hu-ren-wu-diao-du">守护任务调度</h2>
<p>守护任务的调度，跟普通的任务并无差别。当守护任务是当前优先级最高的就绪态任务时，它就可以运行。它的工作有两类：</p>
<ul>
<li>处理命令：从命令队列里取出命令、处理</li>
<li>执行定时器的回调函数</li>
</ul>
<p>能否及时处理定时器的命令、能否及时执行定时器的回调函数，严重依赖于守护任务的优先级。下面使用2个例子来演示。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224165918187.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224165954240.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<blockquote>
<p>注意，定时器的超时时间是基于调用 <strong>xTimerStart()</strong> 的时刻tX，而不是基于守护任务处理命令的时刻tY。假设超时时间是10个Tick，超时时间是"tX+10"，而非"tY+10"。</p>
</blockquote>
<h2 id="hui-diao-han-shu">回调函数</h2>
<p>定时器的回调函数的原型如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ATimerCallback</span><span class="token punctuation">(</span> TimerHandle_t xTimer <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>定时器的回调函数是在守护任务中被调用的，守护任务不是专为某个定时器服务的，它还要处理其他定时器。</p>
<p>所以，定时器的回调函数不要影响其他人：</p>
<ul>
<li>回调函数要尽快实行，不能进入阻塞状态</li>
<li>不要调用会导致阻塞的API函数，比如 <code>vTaskDelay()</code></li>
<li>可以调用 <code>xQueueReceive()</code> 之类的函数，但是超时时间要设为0：即刻返回，不可阻塞</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224172257374.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<h2 id="zhuang-tai-ji">状态机</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224164812059.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<h1 id="zhong-duan-guan-li">中断管理</h1>
<p>在RTOS中，需要应对各类事件。这些事件很多时候是通过硬件中断产生，怎么处理中断呢？</p>
<p>假设当前系统正在运行Task1时，用户按下了按键，触发了按键中断。这个中断的处理流程如下：</p>
<ul>
<li>CPU跳到固定地址去执行代码，这个固定地址通常被称为中断向量，这个跳转时硬件实现的</li>
<li>执行代码做什么？
<ul>
<li>保存现场：Task1被打断，需要先保存Task1的运行环境，比如各类寄存器的值</li>
<li>分辨中断、调用处理函数(这个函数就被称为ISR，interrupt service routine)</li>
<li>恢复现场：继续运行Task1，或者运行其他优先级更高的任务</li>
</ul>
</li>
</ul>
<p><strong>你要注意到，ISR是在内核中被调用的，ISR执行过程中，用户的任务无法执行。ISR要尽量快，否则：</strong></p>
<ul>
<li><strong>其他低优先级的中断无法被处理：实时性无法保证</strong></li>
<li><strong>用户任务无法被执行：系统显得很卡顿</strong></li>
</ul>
<p>如果这个硬件中断的处理，就是非常耗费时间呢？对于这类中断的处理就要分为2部分：</p>
<ul>
<li>ISR：尽快做些清理、记录工作，然后触发某个任务</li>
<li>任务：更复杂的事情放在任务中处理</li>
<li>所以：需要ISR和任务之间进行通信</li>
</ul>
<p>要在FreeRTOS中熟练使用中断，有几个原则要先说明：</p>
<ul>
<li><strong>FreeRTOS把任务认为是硬件无关的，任务的优先级由程序员决定，任务何时运行由调度器决定</strong></li>
<li><strong>ISR虽然也是使用软件实现的，但是它被认为是硬件特性的一部分，因为它跟硬件密切相关</strong>
<ul>
<li><strong>何时执行？由硬件决定</strong></li>
<li><strong>哪个ISR被执行？由硬件决定</strong></li>
</ul>
</li>
<li><strong>ISR的优先级高于任务：即使是优先级最低的中断，它的优先级也高于任务。任务只有在没有中断的情况下，才能执行。</strong></li>
</ul>
<h2 id="liang-tao-api-xxx-he-xxx-from-isr">两套API：Xxx和XxxFromISR</h2>
<h3 id="wei-shi-yao-xu-yao-liang-tao-api">为什么需要两套API</h3>
<p>在任务函数中，我们可以调用各类API函数，比如队列操作函数：xQueueSendToBack。但是在ISR中使用这个函数会导致问题，应该使用另一个函数：xQueueSendToBackFromISR，它的函数名含有后缀"FromISR"，表示"从ISR中给队列发送数据"。</p>
<p>FreeRTOS中很多API函数都有两套：一套在任务中使用，另一套在ISR中使用。后者的函数名含有"FromISR"后缀。</p>
<p>为什么要引入两套API函数？</p>
<ul>
<li><strong>很多API函数会导致任务进入阻塞状态：</strong>
<ul>
<li>运行这个函数的 <strong>任务</strong> 进入阻塞状态</li>
<li>比如写队列时，如果队列已满，可以进入阻塞状态等待一会</li>
</ul>
</li>
<li>ISR调用API函数时，<strong>ISR不是"任务"，ISR不能进入阻塞状态</strong></li>
<li>所以，在任务中、在ISR中，这些函数的功能是有差别的</li>
</ul>
<p>为什么不使用同一套函数，比如在函数里面分辨当前调用者是任务还是ISR呢？示例代码如下</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224173004112.png" alt="image-20241224173004112"></p>
<p>FreeRTOS使用两套函数，而不是使用一套函数，是因为有如下好处：</p>
<ul>
<li>使用同一套函数的话，需要增加额外的判断代码、增加额外的分支，使得函数更长、更复杂、难以测试</li>
<li>在任务、ISR中调用时，需要的参数不一样，比如：
<ul>
<li><strong>在任务中调用：需要指定超时时间，表示如果不成功就阻塞一会</strong></li>
<li><strong>在ISR中调用：不需要指定超时时间，无论是否成功都要即刻返回</strong></li>
<li><strong>如果强行把两套函数揉在一起，会导致参数臃肿、无效</strong></li>
</ul>
</li>
<li>移植FreeRTOS时，还需要提供监测上下文的函数，比如 <strong>is_in_isr()</strong></li>
<li>有些处理器架构没有办法轻易分辨当前是处于任务中，还是处于ISR中，就需要额外添加更多、更复杂的代码</li>
</ul>
<p>使用两套函数可以让程序更高效，但是也有一些缺点，比如你要使用第三方库函数时，即会在任务中调用它，也会在ISR中调用它。这个第三方库函数用到了FreeRTOS的API函数，你无法修改库函数。这个问题可以解决：</p>
<ul>
<li>把中断的处理推迟到任务中进行(Defer interrupt processing)，在任务中调用库函数</li>
<li>尝试在库函数中使用"FromISR"函数：
<ul>
<li>在任务中、在ISR中都可以调用"FromISR"函数</li>
<li>反过来就不行，非FromISR函数无法在ISR中使用</li>
</ul>
</li>
<li>第三方库函数也许会提供OS抽象层，自行判断当前环境是在任务还是在ISR中，分别调用不同的函数</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224173934944.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224174028669.png" alt="image-20241224174028669"></p>
<h3 id="x-higher-priority-task-woken-can-shu">xHigherPriorityTaskWoken参数</h3>
<p><code>xHigherPriorityTaskWoken</code>的含义是：是否有更高优先级的任务被唤醒了。如果为pdTRUE，则意味着后面要进行任务切换。</p>
<p>还是以写队列为例。</p>
<p>任务A调用 <code>xQueueSendToBack()</code> 写队列，有几种情况发生：</p>
<ul>
<li>队列满了，任务A阻塞等待，另一个任务B运行</li>
<li>队列没满，任务A成功写入队列，但是它导致另一个任务B被唤醒，任务B的优先级更高：任务B先运行</li>
<li>队列没满，任务A成功写入队列，即刻返回</li>
</ul>
<p>可以看到，在任务中调用API函数可能导致任务阻塞、任务切换，这叫做"context switch"，上下文切换。这个函数可能很长时间才返回，在函数的内部实现了任务切换。</p>
<p><code>xQueueSendToBackFromISR()</code> 函数也可能导致任务切换，但是不会在函数内部进行切换，而是返回一个参数：表示是否需要切换，函数原型与用法如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224174409929.png" alt="image-20241224174409929"></p>
<p><code>pxHigherPriorityTaskWoken</code>参数，就是用来保存函数的结果：是否需要切换</p>
<ul>
<li><code>pxHigherPriorityTaskWoken</code>等于<code>pdTRUE</code>：函数的操作导致更高优先级的任务就绪了，ISR应该进行任务切换</li>
<li><code>pxHigherPriorityTaskWoken</code>等于<code>pdFALSE</code>：没有进行任务切换的必要</li>
</ul>
<p>为什么不在"FromISR"函数内部进行任务切换，而只是标记一下而已呢？为了效率！示例代码如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224174531949.png" alt="image-20241224174531949"></p>
<p>ISR中有可能多次调用"FromISR"函数，如果在"FromISR"内部进行任务切换，会浪费时间。解决方法是：</p>
<ul>
<li>在"FromISR"中标记是否需要切换</li>
<li>在ISR返回之前再进行任务切换</li>
</ul>
<p>示例代码如下</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224174553605.png" alt="image-20241224174553605"></p>
<p>上述的例子很常见，比如UART中断：在UART的ISR中读取多个字符，发现收到回车符时才进行任务切换。</p>
<p>在ISR中调用API时不进行任务切换，而只是在<code>xHigherPriorityTaskWoken</code>中标记一下，除了效率，还有多种好处：</p>
<ul>
<li>效率高：避免不必要的任务切换</li>
<li>让ISR更可控：中断随机产生，在API中进行任务切换的话，可能导致问题更复杂</li>
<li>可移植性</li>
<li>在Tick中断中，调用 <strong>vApplicationTickHook()</strong> ：它运行于ISR，只能使用"FromISR"的函数</li>
</ul>
<p>使用"FromISR"函数时，如果不想使用xHigherPriorityTaskWoken参数，可以设置为NULL。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224174832140.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224174840677.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224175446319.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<h3 id="zen-yao-qie-huan-ren-wu">怎么切换任务</h3>
<p>FreeRTOS的ISR函数中，使用两个宏进行任务切换：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224175646944.png" alt="image-20241224175646944"></p>
<p>这两个宏做的事情是完全一样的，在老版本的FreeRTOS中，</p>
<ul>
<li><strong>portEND_SWITCHING_ISR</strong> 使用汇编实现</li>
<li><strong>portYIELD_FROM_ISR</strong> 使用C语言实现</li>
</ul>
<p>新版本都统一使用<strong>portYIELD_FROM_ISR</strong>。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224180917055.png" alt="image-20241224180917055"></p>
<blockquote>
<p>注意，这里只是将PendSV中断挂起标志位置位，等到合适的时机才会在PendSV中断中执行任务上下文切换</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224181121598.png" alt="image-20241224181121598"></p>
<h2 id="zhong-duan-de-yan-chi-chu-li">中断的延迟处理</h2>
<p>前面讲过，ISR要尽量快，否则：</p>
<ul>
<li>其他低优先级的中断无法被处理：实时性无法保证</li>
<li>用户任务无法被执行：系统显得很卡顿</li>
<li>如果运行中断嵌套，这会更复杂，ISR越快执行约有助于中断嵌套</li>
</ul>
<p>如果这个硬件中断的处理，就是非常耗费时间呢？对于这类中断的处理就要分为2部分：</p>
<ul>
<li>ISR：尽快做些清理、记录工作，然后触发某个任务</li>
<li>任务：更复杂的事情放在任务中处理</li>
</ul>
<p>这种处理方式叫"中断的延迟处理"(Deferring interrupt processing)，处理流程如下图所示：</p>
<ul>
<li>t1：任务1运行，任务2阻塞</li>
<li>t2：发生中断，</li>
<li>该中断的ISR函数被执行，任务1被打断</li>
<li>ISR函数要尽快能快速地运行，它做一些必要的操作(比如清除中断)，然后唤醒任务2</li>
<li>t3：在创建任务时设置任务2的优先级比任务1高(这取决于设计者)，所以ISR返回后，运行的是任务2，它要完成中断的处理。任务2就被称为"deferred processing task"，中断的延迟处理任务。</li>
<li>t4：任务2处理完中断后，进入阻塞态以等待下一个中断，任务1重新运行</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224181824811.png" alt="image-20241224181824811"></p>
<h1 id="zi-yuan-guan-li">资源管理</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224191115080.png" alt="Mastering the FreeRTOS Real Time Kernel - A Hands On Tutorial Guide"></p>
<p>要独占式地访问临界资源，有3种方法：</p>
<ul>
<li>公平竞争：比如使用互斥量，谁先获得互斥量谁就访问临界资源。</li>
<li>谁要跟我抢，我就灭掉谁：
<ul>
<li>中断要跟我抢？我屏蔽中断</li>
<li>其他任务要跟我抢？我禁止调度器，不运行任务切换</li>
</ul>
</li>
</ul>
<h2 id="ping-bi-zhong-duan">屏蔽中断</h2>
<p>屏蔽中断有两套宏：任务中使用、ISR中使用：</p>
<ul>
<li>任务中使用：<code>taskENTER_CRITICA()/taskEXIT_CRITICAL()</code></li>
<li>ISR中使用：<code>taskENTER_CRITICAL_FROM_ISR()/taskEXIT_CRITICAL_FROM_ISR()</code></li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224185107470.png" alt="image-20241224185107470"></p>
<h3 id="zai-ren-wu-zhong-ping-bi-zhong-duan">在任务中屏蔽中断</h3>
<p>在任务中屏蔽中断的示例代码如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224185603376.png" alt="image-20241224185603376"></p>
<p>在 <code>taskENTER_CRITICA()/taskEXIT_CRITICAL()</code> 之间：</p>
<ul>
<li>低优先级的中断被屏蔽了：优先级低于、等于 <code>configMAX_SYSCALL_INTERRUPT_PRIORITY</code></li>
<li>高优先级的中断可以产生：优先级高于<code>configMAX_SYSCALL_INTERRUPT_PRIORITY</code>
<ul>
<li>但是，这些中断ISR里，不允许使用FreeRTOS的API函数</li>
</ul>
</li>
<li>任务调度依赖于中断、依赖于API函数，所以：这两段代码之间，不会有任务调度产生</li>
</ul>
<p>这套 <code>taskENTER_CRITICA()/taskEXIT_CRITICAL()</code> 宏，是可以递归使用的（<mark>可重入的</mark>），它的内部会记录嵌套的深度，只有嵌套深度变为0时，调用 <code>taskEXIT_CRITICAL()</code> 才会重新使能中断。</p>
<p>使用 <code>taskENTER_CRITICA()/taskEXIT_CRITICAL()</code> 来访问临界资源是很粗鲁的方法：</p>
<ul>
<li>中断无法正常运行</li>
<li>任务调度无法进行</li>
<li>所以，之间的代码要尽可能快速地执行</li>
</ul>
<h3 id="zai-isr-zhong-ping-bi-zhong-duan">在ISR中屏蔽中断</h3>
<p>要使用含有"FROM_ISR"后缀的宏，示例代码如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224185531718.png" alt="image-20241224185531718"></p>
<h2 id="zan-ting-diao-du-qi">暂停调度器</h2>
<p>如果有别的任务来跟你竞争临界资源，你可以把中断关掉：这当然可以禁止别的任务运行，但是这代价太大了。它会影响到中断的处理。</p>
<p>如果只是禁止别的任务来跟你竞争，不需要关中断，暂停调度器就可以了：在这期间，中断还是可以发生、处理。</p>
<p>使用这2个函数来暂停、恢复调度器：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224185654144.png" alt="image-20241224185654144"></p>
<p>示例代码如下：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224185712816.png" alt="image-20241224185712816"></p>
<p>这套 <code>vTaskSuspendScheduler()/xTaskResumeScheduler()</code> 宏，是可以递归使用的，它的内部会记录嵌套的深度，只有嵌套深度变为0时，调用 <code>taskEXIT_CRITICAL()</code> 才会重新使能中断。</p>
<h2 id="an-li-yuan-zi-hua-dht-11-cao-zuo-shi-xu">案例——原子化DHT11操作时序</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241224190736242.png" alt="image-20241224190736242" style="zoom:50%;">
<h1 id="diao-shi-yu-you-hua">调试与优化</h1>
<p>本节视频源码为：<strong>28_freertos_example_stats</strong></p>
<h2 id="diao-shi">调试</h2>
<p>FreeRTOS提供了很多调试手段：</p>
<ul>
<li>打印</li>
<li>断言：<strong>configASSERT</strong></li>
<li>Trace</li>
<li>Hook函数(回调函数)</li>
</ul>
<h3 id="da-yin">打印</h3>
<p>printf：FreeRTOS工程里使用了microlib，里面实现了printf函数。</p>
<p>我们只需实现一下函数即可使用printf：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span> <span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="duan-yan">断言</h3>
<p>一般的C库里面，断言就是一个函数：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">assert</span><span class="token punctuation">(</span>scalar expression<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>它的作用是：确认expression必须为真，如果expression为假的话就中止程序。</p>
<p>在FreeRTOS里，使用 <strong>configASSERT()</strong>，比如：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">##define <span class="token function">configASSERT</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们可以让它提供更多信息，比如：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">##define <span class="token function">configASSERT</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  \
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> \
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %d\r\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \
 	<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>configASSERT(x)中，如果x为假，表示发生了很严重的错误，必须停止系统的运行。</p>
<p>它用在很多场合，比如：</p>
<ul>
<li>队列操作</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"> BaseType_t <span class="token function">xQueueGenericSend</span><span class="token punctuation">(</span> QueueHandle_t xQueue<span class="token punctuation">,</span>
                              <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token keyword">const</span> pvItemToQueue<span class="token punctuation">,</span>
                              TickType_t xTicksToWait<span class="token punctuation">,</span>
                              <span class="token keyword">const</span> BaseType_t xCopyPosition <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BaseType_t xEntryTimeSet <span class="token operator">=</span> pdFALSE<span class="token punctuation">,</span> xYieldRequired<span class="token punctuation">;</span>
    TimeOut_t xTimeOut<span class="token punctuation">;</span>
    Queue_t <span class="token operator">*</span> <span class="token keyword">const</span> pxQueue <span class="token operator">=</span> xQueue<span class="token punctuation">;</span>

    <span class="token function">configASSERT</span><span class="token punctuation">(</span> pxQueue <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">configASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pvItemToQueue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pxQueue<span class="token operator">-&gt;</span>uxItemSize <span class="token operator">!=</span> <span class="token punctuation">(</span>UBaseType_t<span class="token punctuation">)</span><span class="token number">0U</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">configASSERT</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xCopyPosition <span class="token operator">==</span> queueOVERWRITE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pxQueue<span class="token operator">-&gt;</span>uxLength <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>中断级别的判断</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token keyword">void</span> <span class="token function">vPortValidateInterruptPriority</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">uint32_t</span> ulCurrentInterrupt<span class="token punctuation">;</span>
	<span class="token class-name">uint8_t</span> ucCurrentPriority<span class="token punctuation">;</span>

	<span class="token comment">/* Obtain the number of the currently executing interrupt. */</span>
	ulCurrentInterrupt <span class="token operator">=</span> <span class="token function">vPortGetIPSR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* Is the interrupt number a user defined interrupt? */</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span> ulCurrentInterrupt <span class="token operator">&gt;=</span> portFIRST_USER_INTERRUPT_NUMBER <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* Look up the interrupt's priority. */</span>
		ucCurrentPriority <span class="token operator">=</span> pcInterruptPriorityRegisters<span class="token punctuation">[</span> ulCurrentInterrupt <span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token function">configASSERT</span><span class="token punctuation">(</span> ucCurrentPriority <span class="token operator">&gt;=</span> ucMaxSysCallPriority <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="trace">Trace</h3>
<p>FreeRTOS中定义了很多trace开头的宏，这些宏被放在系统个关键位置。</p>
<p>它们一般都是空的宏，这不会影响代码：不影响编程处理的程序大小、不影响运行时间。</p>
<p>我们要调试某些功能时，可以修改宏：修改某些标记变量、打印信息等待。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>trace宏</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">traceTASK_INCREMENT_TICK(xTickCount)</td>
<td>当tick计数自增之前此宏函数被调用。参数xTickCount当前的Tick值，它还没有增加。</td>
</tr>
<tr>
<td style="text-align:center">traceTASK_SWITCHED_OUT()</td>
<td>vTaskSwitchContext中，把当前任务切换出去之前调用此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceTASK_SWITCHED_IN()</td>
<td>vTaskSwitchContext中，新的任务已经被切换进来了，就调用此函数。</td>
</tr>
<tr>
<td style="text-align:center">traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue)</td>
<td>当正在执行的当前任务因为试图去读取一个空的队列、信号或者互斥量而进入阻塞状态时，此函数会被立即调用。参数pxQueue保存的是试图读取的目标队列、信号或者互斥量的句柄，传递给此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceBLOCKING_ON_QUEUE_SEND(pxQueue)</td>
<td>当正在执行的当前任务因为试图往一个已经写满的队列或者信号或者互斥量而进入了阻塞状态时，此函数会被立即调用。参数pxQueue保存的是试图写入的目标队列、信号或者互斥量的句柄，传递给此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_SEND(pxQueue)</td>
<td>当一个队列或者信号发送成功时，此宏函数会在内核函数xQueueSend(),xQueueSendToFront(),xQueueSendToBack(),以及所有的信号give函数中被调用，参数pxQueue是要发送的目标队列或信号的句柄，传递给此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_SEND_FAILED(pxQueue)</td>
<td>当一个队列或者信号发送失败时，此宏函数会在内核函数xQueueSend(),xQueueSendToFront(),xQueueSendToBack(),以及所有的信号give函数中被调用，参数pxQueue是要发送的目标队列或信号的句柄，传递给此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_RECEIVE(pxQueue)</td>
<td>当读取一个队列或者接收信号成功时，此宏函数会在内核函数xQueueReceive()以及所有的信号take函数中被调用，参数pxQueue是要接收的目标队列或信号的句柄，传递给此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_RECEIVE_FAILED(pxQueue)</td>
<td>当读取一个队列或者接收信号失败时，此宏函数会在内核函数xQueueReceive()以及所有的信号take函数中被调用，参数pxQueue是要接收的目标队列或信号的句柄，传递给此宏函数。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_SEND_FROM_ISR(pxQueue)</td>
<td>当在中断中发送一个队列成功时，此函数会在xQueueSendFromISR()中被调用。参数pxQueue是要发送的目标队列的句柄。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue)</td>
<td>当在中断中发送一个队列失败时，此函数会在xQueueSendFromISR()中被调用。参数pxQueue是要发送的目标队列的句柄。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_RECEIVE_FROM_ISR(pxQueue)</td>
<td>当在中断中读取一个队列成功时，此函数会在xQueueReceiveFromISR()中被调用。参数pxQueue是要发送的目标队列的句柄。</td>
</tr>
<tr>
<td style="text-align:center">traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue)</td>
<td>当在中断中读取一个队列失败时，此函数会在xQueueReceiveFromISR()中被调用。参数pxQueue是要发送的目标队列的句柄。</td>
</tr>
<tr>
<td style="text-align:center">traceTASK_DELAY_UNTIL()</td>
<td>当一个任务因为调用了vTaskDelayUntil()进入了阻塞状态的前一刻此宏函数会在vTaskDelayUntil()中被立即调用。</td>
</tr>
<tr>
<td style="text-align:center">traceTASK_DELAY()</td>
<td>当一个任务因为调用了vTaskDelay()进入了阻塞状态的前一刻此宏函数会在vTaskDelay中被立即调用。</td>
</tr>
</tbody>
</table>
<h3 id="malloc-hook-han-shu">Malloc Hook函数</h3>
<p>编程时，一般的逻辑错误都容易解决。难以处理的是内存越界、栈溢出等。</p>
<p>内存越界经常发生在堆的使用过程总：堆，就是使用malloc得到的内存。</p>
<p>并没有很好的方法检测内存越界，但是可以提供一些回调函数：</p>
<ul>
<li>使用pvPortMalloc失败时，如果在FreeRTOSConfig.h里配置 <strong>configUSE_MALLOC_FAILED_HOOK</strong> 为1，会调用：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vApplicationMallocFailedHook</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="zhan-yi-chu-hook-han-shu">栈溢出Hook函数</h3>
<p>在切换任务(vTaskSwitchContext)时调用taskCHECK_FOR_STACK_OVERFLOW来检测栈是否溢出，如果溢出会调用：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vApplicationStackOverflowHook</span><span class="token punctuation">(</span> TaskHandle_t xTask<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> pcTaskName <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>怎么判断栈溢出？有两种方法：</p>
<ul>
<li>方法1：
<ul>
<li>当前任务被切换出去之前，它的整个运行现场都被保存在栈里，这时 <strong>很可能</strong> 就是它对栈的使用到达了峰值。</li>
<li>这方法很高效，但是并不精确</li>
<li>比如：任务在运行过程中调用了函数A大量地使用了栈，调用完函数A后才被调度。</li>
</ul>
</li>
</ul>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image1.png" alt="img"></p>
<ul>
<li>方法2：
<ul>
<li>创建任务时，它的栈被填入固定的值，比如：0xa5</li>
<li>检测栈里最后16字节的数据，如果不是0xa5的话表示栈即将、或者已经被用完了</li>
<li>没有方法1快速，但是也足够快</li>
<li>能捕获 <strong>几乎所有</strong> 的栈溢出</li>
<li>为什么是几乎所有？可能有些函数使用栈时，非常凑巧地把栈设置为0xa5：几乎不可能</li>
</ul>
</li>
</ul>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image2.png" alt="img"></p>
<h2 id="you-hua">优化</h2>
<p>在Windows中，当系统卡顿时我们可以查看任务管理器找到最消耗CPU资源的程序。</p>
<p>在FreeRTOS中，我们也可以查看任务使用CPU的情况、使用栈的情况，然后针对性地进行优化。</p>
<p>这就是查看"任务的统计"信息。</p>
<h3 id="zhan-shi-yong-qing-kuang">栈使用情况</h3>
<p>在创建任务时分配了栈，可以填入固定的数值比如0xa5，以后可以使用以下函数查看"栈的高水位"，也就是还有多少空余的栈空间：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">UBaseType_t <span class="token function">uxTaskGetStackHighWaterMark</span><span class="token punctuation">(</span> TaskHandle_t xTask <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>原理是：从栈底往栈顶逐个字节地判断，它们的值持续是0xa5就表示它是空闲的。</p>
<p>函数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>参数/返回值</strong></th>
<th style="text-align:center"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">xTask</td>
<td style="text-align:center">哪个任务</td>
</tr>
<tr>
<td style="text-align:center">返回值</td>
<td style="text-align:center">任务运行时、任务被切换时，都会用到栈。栈里原来值(0xa5)就会被覆盖。 逐个函数从栈的尾部判断栈的值连续为0xa5的个数， 它就是任务运行过程中空闲内存容量的最小值。 注意：假设从栈尾开始连续为0xa5的栈空间是N字节，返回值是N/4。</td>
</tr>
</tbody>
</table>
<h3 id="ren-wu-yun-xing-shi-jian-tong-ji">任务运行时间统计</h3>
<p>对于同优先级的任务，它们按照时间片轮流运行：你执行一个Tick，我执行一个Tick。</p>
<p>是否可以在Tick中断函数中，统计当前任务的累计运行时间？</p>
<p>不行！很不精确，因为有更高优先级的任务就绪时，当前任务还没运行一个完整的Tick就被抢占了。</p>
<p>我们需要比Tick更快的时钟，比如Tick周期时1ms，我们可以使用另一个定时器，让它发生中断的周期时0.1ms甚至更短。</p>
<p>使用这个定时器来衡量一个任务的运行时间，原理如下图所示：</p>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image3.png" alt="img"></p>
<ul>
<li>切换到Task1时，使用更快的定时器记录当前时间T1</li>
<li>Task1被切换出去时，使用更快的定时器记录当前时间T4</li>
<li>(T4-T1)就是它运行的时间，累加起来</li>
<li>关键点：在 <strong>vTaskSwitchContext</strong> 函数中，使用 <strong>更快的定时器</strong> 统计运行时间</li>
</ul>
<h3 id="she-ji-de-dai-ma">涉及的代码</h3>
<ul>
<li>配置</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configGENERATE_RUN_TIME_STATS</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TRACE_FACILITY</span>    <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_STATS_FORMATTING_FUNCTIONS</span>  <span class="token expression"><span class="token number">1</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>实现宏 <strong>portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()</strong>，它用来初始化更快的定时器</li>
<li>实现这两个宏之一，它们用来返回当前时钟值(更快的定时器)
<ul>
<li>portGET_RUN_TIME_COUNTER_VALUE()：直接返回时钟值</li>
<li>portALT_GET_RUN_TIME_COUNTER_VALUE(Time)：设置Time变量等于时钟值</li>
</ul>
</li>
</ul>
<p>代码执行流程：</p>
<ul>
<li>初始化更快的定时器：启动调度器时</li>
</ul>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image4.png" alt="img"></p>
<p>在任务切换时统计运行时间</p>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image5.png" alt="img"></p>
<ul>
<li>获得统计信息，可以使用下列函数
<ul>
<li>uxTaskGetSystemState：对于每个任务它的统计信息都放在一个TaskStatus_t结构体里</li>
<li>vTaskList：得到的信息是可读的字符串，比如</li>
<li>vTaskGetRunTimeStats： 得到的信息是可读的字符串</li>
</ul>
</li>
</ul>
<h3 id="han-shu-shuo-ming">函数说明</h3>
<ul>
<li>uxTaskGetSystemState：获得任务的统计信息</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">UBaseType_t <span class="token function">uxTaskGetSystemState</span><span class="token punctuation">(</span> TaskStatus_t <span class="token operator">*</span> <span class="token keyword">const</span> pxTaskStatusArray<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> UBaseType_t uxArraySize<span class="token punctuation">,</span>
                                        <span class="token class-name">uint32_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> pulTotalRunTime <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>参数</strong></th>
<th style="text-align:center"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pxTaskStatusArray</td>
<td style="text-align:center">指向一个TaskStatus_t结构体数组，用来保存任务的统计信息。 有多少个任务？可以用 <strong>uxTaskGetNumberOfTasks()</strong> 来获得。</td>
</tr>
<tr>
<td style="text-align:center">uxArraySize</td>
<td style="text-align:center">数组大小、数组项个数，必须大于或等于 <strong>uxTaskGetNumberOfTasks()</strong></td>
</tr>
<tr>
<td style="text-align:center">pulTotalRunTime</td>
<td style="text-align:center">用来保存当前总的运行时间(更快的定时器)，可以传入NULL</td>
</tr>
<tr>
<td style="text-align:center">返回值</td>
<td style="text-align:center">传入的pxTaskStatusArray数组，被设置了几个数组项。 注意：如果传入的uxArraySize小于 <strong>uxTaskGetNumberOfTasks()</strong> ，返回值就是0</td>
</tr>
</tbody>
</table>
<ul>
<li>vTaskList ：获得任务的统计信息，形式为可读的字符串。注意，pcWriteBuffer必须足够大。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vTaskList</span><span class="token punctuation">(</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcWriteBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可读信息格式如下：</p>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image6.png" alt="img"></p>
<ul>
<li>vTaskGetRunTimeStats：获得任务的运行信息，形式为可读的字符串。注意，pcWriteBuffer必须足够大。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vTaskGetRunTimeStats</span><span class="token punctuation">(</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcWriteBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可读信息格式如下：</p>
<p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/DShanMCU-F103/chapter-19/image7.png" alt="img"></p>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>RTOS</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解I²C协议及底层原理（基于STM32F103ZE）</title>
    <url>/2024/11/30/28867.html</url>
    <content><![CDATA[<h1 id="can-kao-shou-ce">参考手册</h1>
<ul>
<li>I²C协议手册：<a href="https://www.nxp.com/docs/en/user-guide/UM10204.pdf">UM10204  I2C-bus specification and user manual</a></li>
<li><a href="https://atta.szlcsc.com/upload/public/pdf/source/20140724/1457707167301.pdf">EEPROM M24C02</a></li>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
</ul>
<h1 id="i-2-c-gai-lan">I²C概览</h1>
<h2 id="gai-nian">概念</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130151131386.png" alt="image-20241130151131386"></p>
<h2 id="wu-li-ceng-dian-lu-lian-jie">物理层电路连接</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130151722614.png" alt="image-20241130151722614"></p>
<h2 id="xie-yi-ceng">协议层</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130152248208.png" alt="image-20241130152248208"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130153034269.png" alt="image-20241130153034269"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130152552172.png" alt="image-20241130152552172"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130153259952.png" alt="image-20241130153259952"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130153342500.png" alt="image-20241130153342500"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130153713298.png" alt="image-20241130153713298"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130153731435.png" alt="image-20241130153731435"></p>
<h1 id="ruan-jian-kong-zhi-shi-xian-i-2-c-ji-cun-qi-ban-ben">软件控制实现I2C（寄存器版本）</h1>
<h2 id="shi-xu-zong-lan">时序总览</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201154135590.png" alt="I2C参考手册"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201154158566.png" alt="I2C参考手册"></p>
<h2 id="gpio-chu-shi-hua">GPIO初始化</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201081651313.png" alt="image-20241201081651313"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201082200624.png" alt="image-20241201082200624"></p>
<h3 id="shi-neng-shi-zhong">使能时钟</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="pei-zhi-gong-zuo-mo-shi-wei-tong-yong-kai-lou-shu-chu">配置工作模式为通用开漏输出</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201154628032.png" alt="I2C参考手册"></p>
<blockquote>
<p>[!NOTE]</p>
<p>如原理图所示，PB10/11外接了上拉电阻</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130193839904.png" alt="STM32参考手册"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11<span class="token punctuation">)</span><span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_1 <span class="token operator">|</span> GPIO_CRH_CNF11_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_0 <span class="token operator">|</span> GPIO_CRH_CNF11_0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="mo-ren-shu-chu-gao-dian-ping">默认输出高电平</h3>
<blockquote>
<p>When the bus is free, both lines are HIGH.</p>
</blockquote>
<p>根据I2C协议规范，SDA和SCL应该在总线为空闲状态时保持高电平，因此我们可以将其初始化为高电平：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>

SCL_HIGH<span class="token punctuation">;</span>
SDA_HIGH<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="wan-zheng-chu-shi-hua-dai-ma">完整初始化代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. GPIO时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    
    <span class="token comment">// 2. 配置GPIO工作模式为通用开漏输出 mode=11 cnf=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_1 <span class="token operator">|</span> GPIO_CRH_CNF11_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_0 <span class="token operator">|</span> GPIO_CRH_CNF11_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 总线空闲状态时，默认高电平</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="scl-shi-zhong-pin-lu-amp-yan-shi-han-shu">SCL时钟频率&amp;延时函数</h2>
<p>以I2C标准模式为例，需要考虑如下三个参数（<mark>下文以标准模式为例进行说明</mark>）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201155642567.png" alt="image-20241201155642567"></p>
<h3 id="scl-shi-zhong-pin-lu">SCL时钟频率</h3>
<img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20241201155834783.png" alt="image-20241201155834783" style="zoom:50%;">
<p>f<sub>SCL</sub>限制我们控制SCL输出高低电平产生方波脉冲时，频率<mark>最大</mark>为100kHz，即一个时钟周期（高电平时间+低电平时间）<mark>最短</mark>为<code>1/100kHz = 10us</code></p>
<h3 id="gao-dian-ping-zhou-qi-amp-di-dian-ping-zhou-qi">高电平周期&amp;低电平周期</h3>
<p>t<sub>LOW</sub>和t<sub>HIGH</sub>则要求我们SCL拉高时间至少持续4.7us，拉低时间至少持续4us</p>
<h3 id="yan-shi-han-shu">延时函数</h3>
<p>如下我们可以准备一个5us的延时函数（以STM32F103主频72M为例，通过逻辑分析仪调整其延时时间比5us略长即可），作为维持SCL高电平周期、低电平周期的时序控制；并且两者相加后为10us，也符合时钟周期要大于10us的规范</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>[!NOTE]</p>
<p>这里使用 <code>volatile</code>关键字来禁用编译器优化（例如将 <code>i</code>的值加载到寄存器后在寄存器中自减到0再回写内存），使得每次读写 <code>i</code>都强制访问内存，避免不同优化级别下该函数的延时表现不一致。</p>
</blockquote>
<blockquote>
<p>[!NOTE]</p>
<p>如果期望更短的延时，则可以针对4.7us和4us各自实现一个更精准地延时函数。</p>
<p>但对于一般场景来说，没必要优化那一点时间效率，I2C本就是低速通信协议，标准模式下的速度瓶颈为100kHz，这是由设备的电气特性决定的，因此<mark>不用太纠结常数级别的性能优化</mark>（例如将函数延时优化到再靠近 <code>Min</code>值一点）。</p>
</blockquote>
<p>由于后续时序控制很多地方会用到延时，为了程序有更好的移植性，我们可以将其定义成宏：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STANDARD_MODE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FAST_MODE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_MODE</span> <span class="token expression">STANDARD_MODE</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> STANDARD_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> FAST_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="qi-shi-xin-hao-start-condition">起始信号（Start Condition）</h2>
<blockquote>
<p>A HIGH to LOW transition on the SDA line while SCL is HIGH defines a START condition</p>
</blockquote>
<p><mark>起始信号的定义：在SCL高电平时，SDA由高到低的跳变。</mark></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201164737043.png" alt="image-20241201164737043" style="zoom:50%;">
<p>这里需要关注两个时延参数，起始信号建立时间（SU，set-up）和保持时间（HD，hold）：</p>
<ul>
<li>起始信号建立时间（先要将SDA准备为高电平状态，随后才能由高拉低）：SCL为高时，将SDA准备为高电平状态，并至少保持<mark>4.7us</mark></li>
<li>起始信号保持时间（在SCL为高时，将SDA拉低后，需要将SDA低电平状态保持一端时间）：至少为<mark>4us</mark></li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201165047337.png" alt="image-20241201165047337"></p>
<p>虽然t<sub>SU;STA</sub>被描述为发送重复起始信号时所需的时序要求，但这里为了封装成统一的接口，让调用方发送起始信号时无需关心该细节，我们统一增加该延时。</p>
<h3 id="shi-xu-kong-zhi">时序控制</h3>
<ul>
<li>拉高SCL，拉高SDA，维持一个SCL高电平周期（间接满足了SDA的建立时间）</li>
<li>SDA拉低，维持一个Start保持时间4us（可以复用5us的延时函数）</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL, SDA拉高，并维持start建立时间</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SDA拉低，并维持start保持时间</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>[!NOTE]</p>
<p>关于重复起始信号的定义，可以考虑下EEPROM的随机读时序：</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201170301458.png" alt="image-20241201170301458"></p>
<p>为了能够从指定地址读数据，因此需要先发送一个假写（dummy write），设置EEPROM内部地址的地址寄存器（类比理解调整磁头到指定的位置、翻书到指定的页面），然后重复发送起始信号，进入读模式，读取指定地址的数据。</p>
<h2 id="fa-song-zi-jie-shu-ju">发送字节数据</h2>
<h3 id="zi-jie-ge-shi">字节格式</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201170805761.png" alt="image-20241201170805761"></p>
<p>这里有几个细节需要注意：</p>
<ul>
<li>通过SDA传输的每个字节（数据）<mark>长度必须为8个bit</mark></li>
<li>在单次传输中，可被发送的字节数没有限制</li>
<li>发送方每发送一个字节，需要等待接收方响应一个ack确认信号</li>
<li>数据传输遵循<mark>高位优先</mark>的模式</li>
<li><mark>时钟拉伸/延展</mark>：如果一个目标（接收方/发送方）因为需要执行一些其他的操作（例如处理内部中断）无法接收/传输数据的下一个字节，它可以通过拉低SCL来强制控制器（主设备）进入等待模式（<mark>主设备尝试拉高SCL后需要轮询等待SCL真的为高电平状态</mark>），直到它准备好处理下个字节的传输了。</li>
</ul>
<h3 id="sda-shi-xu-can-shu">SDA时序参数</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201172812277.png" alt="image-20241201172812277"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201173649085.png" alt="image-20241201173649085"></p>
<ul>
<li>数据建立时间（SU;DAT data set-up time）：在SCL低电平时，我们可以修改SDA为下一个要发送的比特位。该参数要求我们修改在SCL为低时，SDA跳变稳定后需要后维持一段时间（再将SCL拉高让接收方采样），至少为<mark>250ns</mark></li>
<li>数据保持时间（HD;DAT data hold time）：tHD;DAT is the data hold time that is measured from the falling edge of SCL, applies to data in transmission and the acknowledge。该参数是指SDA在SCL下降沿之后需要保持的时间，表格中的 <code>Conditions</code>列标识了个该参数用于CBUS兼容控制器，对于I2C设备不做限制。<mark>这意味着，在SCL下降沿发生后，我们可以立即操作SDA的跳变。</mark></li>
<li>数据有效（稳定）时间（VD;DAT，data valid time）：tVD;DAT = time for data signal from SCL LOW to SDA output。该参数是指<mark>从设备发送数据时</mark>，从SCL下降沿到SDA跳变并稳定之间的时间，最大值为<mark>3.45us</mark>（<mark>这意味着我们应该延时3.45us来确保从设备建立了SDA并读取数据</mark>）</li>
</ul>
<h3 id="zong-jie">总结</h3>
<ul>
<li>data hold time：我们不用关心，只需要遵循SDA在SCL高电平周期保持不变即可</li>
<li>data valid time：我们只需要在SCL下降沿后立即修改SDA为下一个待发送bit即可（满足<code>&lt;3.45us</code>）</li>
<li>data set-up time：由于我们在SCL拉低并修改SDA后，需要保持一个SCL低电平周期（如前文所述5us），SDA建立时间也间接变成了5us（满足<code>&gt;250ns</code>）</li>
</ul>
<h3 id="shi-xu-kong-zhi-1">时序控制</h3>
<p>高位优先，依次发送数据字节的比特位：</p>
<ul>
<li>每次循环所做的操作：拉低SCL（拉低后才能修改SDA），修改SDA，等待SCL低电平周期过去，拉高SCL（让接收方采样），等待SCL高电平周期过去。</li>
<li>每个循环产生一个时钟周期（SCL低电平、SCL高电平），因此该操作产生了8个时钟周期（从起始信号后开始计算）。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SDA_HIGH<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            SDA_LOW<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="du-qu-ack-9-sub-th-sub-clock-cycle">读取ACK（9<sub>th</sub> Clock Cycle）</h2>
<h3 id="sheng-cheng-di-jiu-ge-shi-zhong-zhou-qi-bing-du-qu-sda">生成第九个时钟周期并读取SDA</h3>
<p>之前是接收方读取SDA（接收数据），现在轮到发送方读取SDA（接收响应）了，因此我们无需关心SDA的时序控制了，我们<mark>控制SCL产生第九个时钟周期</mark>即可：</p>
<ul>
<li>拉低SCL（因为要拉高SDA释放总线，操作SDA前必须拉低SCL），拉高SDA（释放总线，交出控制权），维持一个SCL低电平周期（从设备可以在此期间修改SDA）</li>
<li>拉高SCL（告知从设备主设备要采样了，让它在SCL高电平期间维持SDA），维持一个SCL高电平周期，读取SDA（低电平为ACK，高电平为NACK）</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">SCL_LOW<span class="token punctuation">;</span>
SDA_HIGH<span class="token punctuation">;</span> <span class="token comment">// release bus</span>
I2C_DELAY<span class="token punctuation">;</span>

SCL_HIGH<span class="token punctuation">;</span>
I2C_DELAY<span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> READ_SDA<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shou-hui-sda-kong-zhi-quan">收回SDA控制权</h3>
<blockquote>
<p>[!NOTE]</p>
<p>值得注意的是，与之前发送字节时不同（SDA控制权在主设备），而这里我们读取SDA后，从设备仍然处于保持SDA的状态（因为只要SCL高电平，从设备就认为主设备采样没有结束），因此为了确保后续的操作能够正确控制SDA，主设备应该在读取ACK后拉低SCL（从设备释放SDA，SDA恢复高电平）收回SDA控制权</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span> <span class="token comment">// release bus</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> READ_SDA<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ack<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ting-zhi-xin-hao">停止信号</h2>
<blockquote>
<p>A LOW to HIGH transition on the SDA line while SCL is HIGH defines a STOP condition</p>
</blockquote>
<p><mark>停止信号的定义：在SCL高电平时，SDA由低到高的跳变。</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201181729885.png" alt="image-20241201181729885"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201181710622.png" alt="image-20241201181710622" style="zoom:33%;">
<p>如图，停止信号的时序参数有两个：</p>
<ul>
<li>建立时间：需要在SCL高电平时，将SDA准备为低电平状态，并保持至少4us</li>
<li>总线释放时间：在两次连续的传输之间，前一个的停止信号和后一个的起始信号之间的间隔至少为4.7us（SCL和SDA保持为高电平的时间）</li>
</ul>
<blockquote>
<p>[!NOTE]</p>
<p>由于此前实现的 <code>I2C_Start</code>中已经强制加入了起始信号建立时间（SU;STA，SCL为高时将SDA拉高并保持）5us，因此这里的t<sub>BUF</sub>可以省略</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201191223209.png" alt="image-20241201191223209"></p>
<h3 id="shi-xu-kong-zhi-2">时序控制</h3>
<ul>
<li>拉低SCL（修改SDA前需拉低SCL），将SDA准备为低电平，维持一个SCL低电平周期</li>
<li>拉高SDA</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="xie-eeprom-ce-shi">写EEPROM测试</h2>
<ul>
<li>写模式发送设备地址 <code>0xA0</code></li>
<li>设置读写地址寄存器为 <code>0x00</code>（类比磁盘设置磁头）</li>
<li>向 <code>0x00</code>地址写入数据 <code>‘a’</code></li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201191555496.png" alt="image-20241201191555496"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c_soft.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SDA</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR11<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STANDARD_MODE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FAST_MODE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_MODE</span> <span class="token expression">STANDARD_MODE</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> STANDARD_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> FAST_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. GPIO时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    
    <span class="token comment">// 2. 配置GPIO工作模式为通用开漏输出 mode=11 cnf=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_1 <span class="token operator">|</span> GPIO_CRH_CNF11_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_0 <span class="token operator">|</span> GPIO_CRH_CNF11_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 总线空闲状态时，默认高电平</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL, SDA拉高，并维持start建立时间（for repeated start and bus free time）</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SDA拉低，并维持start保持时间</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span> <span class="token comment">// release bus</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> READ_SDA<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SDA_HIGH<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            SDA_LOW<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jie-shou-shu-ju">接收数据</h2>
<ul>
<li>接收数据时，主设备只需控制SCL产生8个时钟周期，SDA控制权交给从设备</li>
<li>低电平周期，从设备会建立（准备）SDA（<mark>前提是主设备对SDA总线是释放状态</mark>），并在高电平周期保持稳定（主设备可以在此期间读取SDA）</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        SDA_HIGH<span class="token punctuation">;</span> <span class="token comment">// 释放SDA总线</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>READ_SDA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fa-song-ack-nack-9-sub-th-sub-clock-cycle">发送ACK/NACK（9<sub>th</sub> Clock Cycle）</h2>
<p>在第九个时钟周期，主设备需要给从设备响应ACK/NACK，ACK表示需要从设备继续发送数据，NACK则指示从设备停止发送数据（主设备随后发送停止信号结束此次传输）：</p>
<ol>
<li>拉低SCL（因为马上要修改SDA），根据响应ACK还是NACK来拉低/拉高SDA，维持一个SCL低电平周期</li>
<li>拉高SCL（让从设备采样），维持一个SCL高电平周期（让从设备采样）</li>
<li><mark>特别注意</mark>：如果是发送ACK，还需要将SDA拉高（当然别忘了修改SDA前先拉低SCL），以释放SDA总线，否则</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_SendAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="du-eeprom-ce-shi">读EEPROM测试</h2>
<ol>
<li>假写（dummy write）
<ol>
<li>写模式发送设备地址 <code>0xA0</code></li>
<li>设置读写地址寄存器为 <code>0x00</code></li>
</ol>
</li>
<li>真读
<ol>
<li>读模式发送设备地址 <code>0xA1</code></li>
<li>接收一个数据字节</li>
<li>响应NACK</li>
</ol>
</li>
</ol>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201195027305.png" alt="image-20241201195027305"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c_soft.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SDA</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR11<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STANDARD_MODE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FAST_MODE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_MODE</span> <span class="token expression">STANDARD_MODE</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> STANDARD_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> FAST_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. GPIO时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    
    <span class="token comment">// 2. 配置GPIO工作模式为通用开漏输出 mode=11 cnf=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_1 <span class="token operator">|</span> GPIO_CRH_CNF11_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_0 <span class="token operator">|</span> GPIO_CRH_CNF11_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 总线空闲状态时，默认高电平</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL, SDA拉高，并维持start建立时间（for repeated start and bus free time）</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SDA拉低，并维持start保持时间</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span> <span class="token comment">// release bus</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> READ_SDA<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SDA_HIGH<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            SDA_LOW<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>READ_SDA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="zong-jie-1">总结🌟</h2>
<h3 id="fan-shi">范式</h3>
<blockquote>
<p>[!IMPORTANT]</p>
<p>简而言之，在I2C通信过程中，根据不同阶段状态（接收数据、发送数据），要严格遵循相应的SCL/SDA时序：</p>
<ul>
<li>发送数据时（字节比特位或ACK）：先拉低SCL，建立SDA，并维持SDA建立时间，然后拉高SCL让接收方采样。</li>
<li>接收数据时（字节比特位或ACK）：先拉低SCL，主设备释放SDA，而后从设备应该在t<sub>VD;DAT</sub>/t<sub>VD;ACK</sub>时间内建立SDA（字节比特位或ACK），然后主设备延时至少t<sub>VD;DAT</sub>/t<sub>VD;ACK</sub>后拉高SCL读取SDA</li>
</ul>
</blockquote>
<h3 id="xing-neng-ce-shi">性能测试</h3>
<p>标准模式</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241202111727091.png" alt="标准模式"></p>
<p>快速模式</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241202111845187.png" alt="image-20241202111845187"></p>
<h2 id="tuo-zhan-shang-sheng-xia-jiang-shi-jian">拓展：上升/下降时间</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201195756988.png" alt="image-20241201195756988" style="zoom: 33%;">
<p>该参数描述的是引脚高低电平跳变（或者说转变/过度，transition）时间，需要查看MCU数据手册中关于IO口电气特性相关的描述：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201200403108.png" alt="STM32F103数据手册"></p>
<p>回看前文GPIO初始化：</p>
<pre class="line-numbers language-none"><code class="language-none">GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11);
GPIOB-&gt;CRH &amp;= ~(GPIO_CRH_CNF10_1 | GPIO_CRH_CNF11_1);
GPIOB-&gt;CRH |= (GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201200530058.png" alt="image-20241201200530058"></p>
<p>我们配置的的是最大输出模式，因此满足I2C的条件</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201195656068.png" alt="image-20241201195656068"></p>
<h2 id="wan-zheng-dai-ma">完整代码</h2>
<h3 id="i-2-c-soft-h">i2c_soft.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="i-2-c-soft-c">i2c_soft.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c_soft.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SDA</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR11<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STANDARD_MODE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FAST_MODE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_MODE</span> <span class="token expression">FAST_MODE</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> STANDARD_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>I2C_MODE <span class="token operator">==</span> FAST_MODE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. GPIO时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    
    <span class="token comment">// 2. 配置GPIO工作模式为通用开漏输出 mode=11 cnf=01</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_1 <span class="token operator">|</span> GPIO_CRH_CNF11_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_0 <span class="token operator">|</span> GPIO_CRH_CNF11_0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 总线空闲状态时，默认高电平</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL, SDA拉高，并维持start建立时间（for repeated start and bus free time）</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SDA拉低，并维持start保持时间</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span> <span class="token comment">// release bus</span>
    I2C_DELAY<span class="token punctuation">;</span>

    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> READ_SDA<span class="token punctuation">;</span>

    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SDA_HIGH<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            SDA_LOW<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SCL_LOW<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>READ_SDA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0xA0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_5us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_delay_2us</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="eerom-mc-24-c-02">EEROM(MC24C02)</h1>
<h2 id="te-xing">特性</h2>
<ul>
<li>支持I2C标准模式和快速模式</li>
<li>MC24C01容量128字节，C02容量256字节</li>
<li>每16个字节组织成一个页，可以推断：
<ul>
<li>有16个页</li>
<li>一个字节可以满足寻址（0x0~0xFF，共256个地址），高四位用于页寻址，第四位用于页内字节寻址</li>
</ul>
</li>
<li>写周期
<ul>
<li>单字节写操作、页内连续写操作，最大写周期为5ms</li>
<li>写操作后（单次I2C传输后）的5ms内，不应该再开启I2C传输（芯片内部需要时间持久化数据）</li>
</ul>
</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130155340046.png" alt="image-20241130155340046"></p>
<h2 id="nei-cun-jie-gou">内存结构</h2>
<ul>
<li>WC，write control，写使能</li>
<li>E2，E1，E0：设备地址中的低3位</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201201711873.png" alt="image-20241201201711873"></p>
<h2 id="she-bei-xun-zhi">设备寻址</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130155754947.png" alt="image-20241130155754947"></p>
<h2 id="du-xie-cao-zuo">读/写操作</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201201953699.png" alt="image-20241201201953699"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201202011850.png" alt="image-20241201202011850"></p>
<h3 id="zhu-yi">注意</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241202114206166.png" alt="image-20241202114206166"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241202114116570.png" alt="image-20241202114116570"></p>
<blockquote>
<p>[!NOTE]</p>
<p>连续写时，页内16字节相当于一个环形结构，写到页内最后一个字节时，下次写入将从页头重新开始。</p>
<p>而连续读时，则是将整个256字节作为一个环形结构，读到0xFF时，下次读将从0x00重新开始。</p>
</blockquote>
<h2 id="mo-kuai-feng-zhuang">模块封装</h2>
<h3 id="m-24-c-02-h">m24c02.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__M24C02_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__M24C02_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c_soft.h"</span></span>

<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __M24C02_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="m-24-c-02-c">m24c02.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"m24c02.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_ADDR_W</span> <span class="token expression"><span class="token number">0xA0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_ADDR_R</span> <span class="token expression"><span class="token number">0xA1</span></span></span>

<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>DEV_ADDR_W<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wait for write cycle</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> byte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>DEV_ADDR_W<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>DEV_ADDR_R<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">I2C_SendNAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">I2C_SendAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token char">'b'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b1 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b2 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b3 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"b1 = %d, b2 = %d, b3 = %d"</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>
    
    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"56789"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buffer = %s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"1234567890abcdefghijk"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buffer = %s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="yi-liu-wen-ti">遗留问题</h1>
<h2 id="di-ta-ding-shi-qi-yan-shi-chao-chang-wen-ti">嘀嗒定时器延时超长问题</h2>
<blockquote>
<p>[!IMPORTANT]</p>
<p>值得注意的是，建议使用简单的循环或定时器中断来比较精准地实现延时，而不要使用复杂的延时函数，例如我最初使用如下嘀嗒定时器时，<code>SysTick-&gt;CTRL &amp; SysTick_CTRL_ENABLE</code>会导致延时有时比预期超出很多（例如预期5us，会出现偶尔延时了15us的情况），但是去掉该代码后就正常了，原因暂时还没找到</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> us<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// AHB 72M</span>
    SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> <span class="token number">72</span> <span class="token operator">*</span> us<span class="token punctuation">;</span>
    <span class="token comment">//101: clock source, tick interrupt, enable</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> <span class="token number">0x05</span><span class="token punctuation">;</span>
    <span class="token comment">// wait for count flag</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;</span> SysTick_CTRL_COUNTFLAG<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> 
           <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;</span> SysTick_CTRL_ENABLE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>SysTick_CTRL_ENABLE<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在使用逻辑分析仪观察上述代码延时产生的时钟脉冲时，总是会出现有脉冲延时超长的情况（例如15us）</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201161816608.png" alt="image-20241201161816608" style="zoom:33%;">
<p>去掉 <code>SysTick-&gt;CTRL &amp; SysTick_CTRL_ENABLE</code>后则延时正常了：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> us<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// AHB 72M</span>
    SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> <span class="token number">72</span> <span class="token operator">*</span> us<span class="token punctuation">;</span>
    <span class="token comment">//101: clock source, tick interrupt, enable</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">|=</span> <span class="token number">0x05</span><span class="token punctuation">;</span>
    <span class="token comment">// wait for count flag</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;</span> SysTick_CTRL_COUNTFLAG<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>SysTick_CTRL_ENABLE<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201161925160.png" alt="image-20241201161925160" style="zoom:33%;">
<p>并且前者直接导致I2C通信无法走通（只有 <code>start</code>），而后者可以：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201162331212.png" alt="image-20241201162331212"></p>
<h1 id="ruan-i-2-c-cu-yan-shi-ban-ben-can-kao-dai-ma">软I2C粗延时版本参考代码</h1>
<blockquote>
<p>[!NOTE]</p>
<p>该版本代码在每个SCL/SDA状态变更节点都进行足够长的延时来稳定信号，并增加冗余延时来确保时序的正确性，例如每个节点都延时10us、冗余拉低SCL等。这样做的好处就是不用精细分析/把控I2C规范中各个阶段对SCL/SDA的时序限制（例如建立时间最少为xxx，维持时间至少为xxx，等等），大大简化了开发流程，但会消耗一定性能。</p>
<p>由于I2C本身就是一种低速通信协议，协议本身规范了传输速度瓶颈（例如标准模式100kHz），即使更精细一点控制延时，也只能带来常数级别的性能提升，所以如果不是有特定的需求，建议优先考虑粗延时版本的实现（开发流程简单，功能更加稳定，容易排查错误）。</p>
<p>以下是精准延时和粗延时的性能对比</p>
</blockquote>
<h2 id="biao-zhun-mo-shi-jing-zhun-yan-shi">标准模式-精准延时</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201224438177.png" alt="image-20241201224438177"></p>
<h2 id="biao-zhun-mo-shi-cu-yan-shi">标准模式-粗延时</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241201224556682.png" alt="image-20241201224556682"></p>
<h2 id="i-2-c-h">i2c.h</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__I2C_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__I2C_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ACK</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NACK</span> <span class="token expression"><span class="token number">1</span></span></span>

<span class="token comment">// 控制SCL、SDA的输出高低电平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCL_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDA_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR11<span class="token punctuation">)</span></span></span>

<span class="token comment">// 读取操作</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SDA</span> <span class="token expression"><span class="token punctuation">(</span>GPIOB<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR11<span class="token punctuation">)</span></span></span>

<span class="token comment">// 定义操作的基本延迟</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DELAY</span> <span class="token expression"><span class="token function">Delay_us</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span>

<span class="token comment">// 初始化</span>
<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发出起始信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发出停止信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主机发出应答信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主机发出非应答信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Nack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主机等待从设备发来应答信号</span>
<span class="token class-name">uint8_t</span> <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主机发送一个字节的数据（写入）</span>
<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主机从EEPROM接收一个字节的数据（读取）</span>
<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="i-2-c-c">i2c.c</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c.h"</span></span>

<span class="token comment">// 初始化</span>
<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 配置时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>

    <span class="token comment">// 2. GPIO工作模式配置：通用开漏输出 CNF-01，MODE-11</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_MODE11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>GPIO_CRH_CNF10_1 <span class="token operator">|</span> GPIO_CRH_CNF11_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_CNF10_0 <span class="token operator">|</span> GPIO_CRH_CNF11_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发出起始信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL拉高，SDA拉高</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SCL保持不变，SDA拉低</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发出停止信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL拉高，SDA拉低</span>
    SCL_HIGH<span class="token punctuation">;</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SCL保持不变，SDA拉高</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主机发出应答信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL拉低，SDA拉高，准备发出信号</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SCL保持不变，SDA拉低，输出应答</span>
    SDA_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 3. SDA保持不变，SCL拉高，开始数据线上信号采样</span>
    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 4. SDA保持不变，SCL拉低，结束数据线上信号采样</span>
    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 5. SDA拉高，释放数据总线</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主机发出非应答信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Nack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL拉低，SDA拉高，准备发出信号</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SDA保持不变，SCL拉高，开始数据线上信号采样</span>
    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 3. SDA保持不变，SCL拉低，结束数据线上信号采样</span>
    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主机等待从设备发来应答信号</span>
<span class="token class-name">uint8_t</span> <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. SCL拉低，SDA拉高，释放数据总线</span>
    SCL_LOW<span class="token punctuation">;</span>
    SDA_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 2. SCL拉高，开始数据采样</span>
    SCL_HIGH<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token comment">// 3. 读取SDA数据线上的电平</span>
    <span class="token class-name">uint16_t</span> ack <span class="token operator">=</span> READ_SDA<span class="token punctuation">;</span>

    <span class="token comment">// 4. SCL拉低，结束数据采样</span>
    SCL_LOW<span class="token punctuation">;</span>
    I2C_DELAY<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ack <span class="token operator">?</span> NACK <span class="token operator">:</span> ACK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主机发送一个字节的数据（写入）</span>
<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 1. SCL、SDA都拉低，等待数据翻转</span>
        SCL_LOW<span class="token punctuation">;</span>
        SDA_LOW<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        <span class="token comment">// 2. 取字节的最高位，向SDA写入数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            SDA_HIGH<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            SDA_LOW<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        I2C_DELAY<span class="token punctuation">;</span>

        <span class="token comment">// 3. SCL拉高，数据采样</span>
        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        <span class="token comment">// 4. SCL拉低，采样结束</span>
        SCL_LOW<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        <span class="token comment">// 5. 左移1位</span>
        byte <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>

<span class="token comment">// 主机从EEPROM接收一个字节的数据（读取）</span>
<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义一个变量，用来保存接收的数据</span>
    <span class="token class-name">uint8_t</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 循环处理每一位</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 1. SCL拉低，等待数据翻转</span>
        SCL_LOW<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        <span class="token comment">// 2. SCL拉高，开始采样</span>
        SCL_HIGH<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>

        <span class="token comment">// 3. 数据采样，读取SDA</span>
        data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 先做左移，新存入的位永远在最低位</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>READ_SDA<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            data <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>   <span class="token comment">// 先存入最低位，然后每次都左移1位</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 4. SCL拉低，结束采样</span>
        SCL_LOW<span class="token punctuation">;</span>
        I2C_DELAY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="m-24-c-02-h-1">m24c02.h</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__M24C02_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__M24C02_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c.h"</span></span>

<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">W_ADDR</span> <span class="token expression"><span class="token number">0xA0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R_ADDR</span> <span class="token expression"><span class="token number">0xA1</span></span></span>

<span class="token comment">// 初始化</span>
<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向EEPROM写入一个字节</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取EEPROM的一个字节</span>
<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连续写入多个字节（页写）</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span> bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连续读取多个字节</span>
<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="m-24-c-02-c-1">m24c02.c</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * @Author: wushengran
 * @Date: 2024-05-31 11:48:48
 * @Description:
 *
 * Copyright (c) 2024 by atguigu, All Rights Reserved.
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"m24c02.h"</span></span>

<span class="token comment">// 初始化</span>
<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 向EEPROM写入一个字节</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 发出开始信号</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 发送写地址</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>W_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 等待EEPROM应答</span>
    <span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ack <span class="token operator">==</span> ACK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 4. 发送内部地址</span>
        <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>innerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 5. 等待应答</span>
        <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 6. 发送具体数据</span>
        <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 7. 等待应答</span>
        <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 8. 发出一个停止信号</span>
        <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 延迟等待写入周期结束</span>
    <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 读取EEPROM的一个字节</span>
<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 发出开始信号</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 发送写地址（假写）</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>W_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 等待EEPROM应答</span>
    <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 发送内部地址</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>innerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 等待应答</span>
    <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 6. 发出开始信号</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 7. 发送读地址（真读）</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>R_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 8. 等待EEPROM应答</span>
    <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 9. 读取一个字节</span>
    <span class="token class-name">uint8_t</span> byte <span class="token operator">=</span> <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 10. 发送一个非应答</span>
    <span class="token function">I2C_Nack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 11. 发出一个停止信号</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 连续写入多个字节（页写）</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 发出开始信号</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 发送写地址</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>W_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 等待EEPROM应答</span>
    <span class="token class-name">uint8_t</span> ack <span class="token operator">=</span> <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ack <span class="token operator">==</span> ACK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 4. 发送内部地址</span>
        <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>innerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 5. 等待应答</span>
        <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 利用循环不停发送数据</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 6. 发送具体数据</span>
            <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 7. 等待应答</span>
            <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 8. 发出一个停止信号</span>
        <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 延迟等待写入周期结束</span>
    <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 连续读取多个字节</span>
<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 发出开始信号</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 发送写地址（假写）</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>W_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 等待EEPROM应答</span>
    <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 发送内部地址</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>innerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 等待应答</span>
    <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 6. 发出开始信号</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 7. 发送读地址（真读）</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>R_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 8. 等待EEPROM应答</span>
    <span class="token function">I2C_Wait4Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 利用循环连续读取多个字节</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 9. 读取一个字节</span>
        buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 10. 发送一个应答或非应答</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">I2C_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">I2C_Nack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 11. 发出一个停止信号</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="main-c">main.c</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 1. 初始化</span>
<span class="token function">USART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 向EEPROM依次写入单个字符</span>
<span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 读取字符</span>
<span class="token class-name">uint8_t</span> byte1 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> byte2 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> byte3 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. 串口输出打印</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"byte1 = %c\t byte2 = %c\t byte3 = %c\n"</span><span class="token punctuation">,</span> byte1<span class="token punctuation">,</span> byte2<span class="token punctuation">,</span> byte3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5. 写入多个字符</span>
<span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 6. 读取多个字符</span>
<span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 7. 串口打印</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buffer = %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 8. 测试超出16个字节的写入</span>
<span class="token comment">// 清零缓冲区</span>
<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"1234567890abcdefghijk"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buffer = %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="shen-ru-li-jie-stm-32-i-2-c-wai-she">深入理解STM32 I²C外设</h1>
<h2 id="i-2-c-wai-she-kuang-tu-gai-lan">I2C外设框图概览</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203131201258.png" alt="image-20241203131201258"></p>
<h3 id="sda-shu-ju-zong-xian-xiang-guan">SDA数据总线相关</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203131730495.png" alt="image-20241203131730495"></p>
<ul>
<li>Data register：数据寄存器DR，我们可以通过读/写DR来实现接收/发送数据</li>
<li>Data shift register
<ul>
<li>发送模式下，写到DR的数据，最终会通过底层硬件电路移位寄存器来逐位发送（I2C协议规定MSB，即高位优先）</li>
<li>接收模式下，从SDA接收到的逻辑高低电平会逐位进入移位寄存器保存，并最终递交给DR</li>
<li>如果DR、移位寄存器都为空，那么写DR会直接递交给移位寄存器</li>
</ul>
</li>
<li>Comparator：在从设备模式下（当前MCU作为从设备），用于将接收到的数据和自己的设备地址比较，如果匹配，那么需要向主设备回复ACK
<ul>
<li>Own address register：I2C通信中自己的设备地址</li>
<li>Dual address register：该寄存器支持配置第二个设备地址</li>
</ul>
</li>
<li>PEC：Packet Error Check，帧错误检查相关
<ul>
<li>STM32内置了数据帧校验机制来提升通信的可靠性</li>
</ul>
</li>
</ul>
<h3 id="scl-shi-zhong-zong-xian-xiang-guan">SCL时钟总线相关</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203133135507.png" alt="image-20241203133135507"></p>
<ul>
<li>
<p>CCR：时钟控制寄存器，用于配置SCL的频率以遵循I2C协议标准</p>
</li>
<li>
<p>CR1&amp;CR2：外设控制寄存器，用于控制外设发出I2C通信各个阶段对应的信号，例如起始信号、停止信号、响应ACK等</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203133634503.png" alt="image-20241203133634503"></p>
</li>
<li>
<p>SR1&amp;SR2：外设状态寄存器，外设硬件在完成某个I2C通信节点时会置位相应的标志位，软件可以通过轮询这些标志位的状态来控制通信过程。例如SB（Start Bit）置1表示起始信号已发送，ADDR置1表示发送了从设备地址并收到了从设备的ACK响应等</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203133750393.png" alt="image-20241203133750393"></p>
</li>
</ul>
<h2 id="i-2-c-wai-she-chu-shi-hua">I2C外设初始化</h2>
<p>下面我们就以当前MCU的I2C外设作为I2C主设备来实现收发数据、读写EEPROM的功能，在此过程中分析相关寄存器的作用及底层原理。</p>
<blockquote>
<p>[!NOTE]</p>
<p><a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></p>
<p>主设备模式通信流程参考 26.3.3 I2C master mode</p>
<p>I2C外设寄存器描述参考 26.6 I2C registers</p>
</blockquote>
<h3 id="gpio-pei-zhi">GPIO配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203140210631.png" alt="image-20241203140210631"></p>
<p>关于引脚的复用功能映射可以在MCU数据手册的引脚描述相关章节找到：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203142124640.png" alt="STM32F103ZE数据手册"></p>
<p>GPIO配置为外设的复用功能</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203142343120.png" alt="参考手册 GPIO configurations for device peripherals  "></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 1. GPIO时钟配置</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_I2C2EN<span class="token punctuation">;</span>

<span class="token comment">// 2. 配置GPIO工作模式为复用开漏输出 mode=11 cnf=11</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE11 <span class="token operator">|</span> GPIO_CRH_CNF11<span class="token punctuation">)</span><span class="token punctuation">;</span>
GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_CNF10<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 特别注意，如下操作无法得到预期结果，GPIO工作不正常</span>
<span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</span>
<span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11);</span>
<span class="token comment">// 如下则是可以的</span>
<span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_MODE11 | GPIO_CRH_CNF11 | GPIO_CRH_MODE10 | GPIO_CRH_CNF10);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>[!IMPORTANT]</p>
<p>这里需要特别注意的是：</p>
<p>如下配置（同时配置PB10/11的CNF、同时配置PB10/11的MODE会导致GPIO工作不正常，暂时还未找到原因）</p>
<p>GPIOB-&gt;CRH |= (GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</p>
<p>GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11);</p>
<p>但如下一次性配置是可以的</p>
<p>GPIOB-&gt;CRH |= (GPIO_CRH_MODE11 | GPIO_CRH_CNF11 | GPIO_CRH_MODE10 | GPIO_CRH_CNF10);</p>
</blockquote>
<h3 id="zhu-she-bei-mo-shi-suo-xu-pei-zhi">主设备模式所需配置</h3>
<blockquote>
<p>In Master mode, the I2C interface initiates a data transfer and generates the clock signal. A serial data transfer always begins with a Start condition and ends with a Stop condition.</p>
<p>Master mode is selected as soon as the Start condition is generated on the bus with a START bit.</p>
</blockquote>
<p>在主模式下，由I2C外设发起数据传输请求并控制SCL生成时钟信号。一次连续的数据传输总是开始于一个起始信号，终止于一个停止信号。</p>
<p>一旦通过总线产生了一个起始信号，当前I2C外设就会进入主设备模式。</p>
<blockquote>
<p>The following is the required sequence in master mode.<br>
 Program the peripheral input clock in I2C_CR2 register in order to generate correct<br>
timings<br>
 Configure the clock control registers<br>
 Configure the rise time register<br>
 Program the I2C_CR1 register to enable the peripheral<br>
 Set the START bit in the I2C_CR1 register to generate a Start condition</p>
</blockquote>
<p>在使用主设备模式之前，需要先操作如下软件序列</p>
<ol>
<li>为了产生正确的时序，需要配置I2C_CR2寄存器以设置外设输入时钟</li>
<li>配置时钟控制寄存器（SCL时钟频率）</li>
<li>配置上升时间寄存器</li>
<li>设置I2C_CR1寄存器使能外设</li>
<li>设置I2C_CR1寄存器中的START位来产生起始信号</li>
</ol>
<p>下面我们查阅寄存器描述章节来分析以上这几个操作所蕴含的细节。</p>
<h4 id="wai-she-shu-ru-shi-zhong-i-2-c-cr-2">外设输入时钟（I2C_CR2）</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203150802143.png" alt="image-20241203150802143"></p>
<blockquote>
<p>The FREQ bits must be configured with the APB clock frequency value (I2C peripheral connected to APB). The FREQ field is used by the peripheral to generate data setup and hold times compliant with the I2C specifications. The minimum allowed frequency is 2 MHz, the maximum frequency is limited by the maximum APB frequency and cannot exceed 50 MHz (peripheral intrinsic maximum limit).</p>
</blockquote>
<p><code>FREQ</code>比特位用来配置I2C外设的输入时钟频率，且必须参考APB时钟频率来配置（因为I2C外设挂载在APB总线上）。在STM32F103中，I2C挂载在APB1总线上，APB1最大频率为<mark>36MHz</mark>。</p>
<p>外设依赖该时钟源来遵循I2C协议规范产生数据建立和维持时间。</p>
<p>该字段最小可以配置为2MHz，最大不能超过APB总线时钟频率的限制，也不能超过50MHz（外设本身的物理特性限制）。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203151357832.png" alt="image-20241203151357832"></p>
<p>如下，我们可以配置为APB1最大频率36MHz来发挥外设最大性能：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">I2C2<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment">// 必须小于等于APB1的最大时钟36MHz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="scl-shi-zhong-pin-lu-ccr">SCL时钟频率(CCR)</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203152828329.png" alt="image-20241203152828329"></p>
<blockquote>
<p>[!NOTE]</p>
<p>f<sub>PCLK1</sub> must be at least 2 MHz to achieve Sm mode I²C frequencies. It must be at least 4 MHz to achieve Fm mode I²C frequencies. It must be a multiple of 10MHz to reach the 400 kHz maximum I²C Fm mode clock. The CCR register must be configured only when the I2C is disabled (PE = 0)</p>
</blockquote>
<p>这里再次提到了I2C对外设输入时钟（I2C_CR2中的FREQ）的要求：</p>
<ul>
<li>I2C标准模式：外设时钟至少为2MHz</li>
<li>I2C快速模式：外设时钟至少为4MHz</li>
<li>达到I2C快速模式最大速率400MHz：外设时钟必须为10MHz的倍数</li>
</ul>
<p>需要注意的是，CCR寄存器必须在PE=0（使能外设之前）时进行配置。</p>
<p>下面<mark>标准模式</mark>为例，配置SCL总线时钟频率：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203153643894.png" alt="image-20241203153643894"></p>
<p>标准模式下，I2C外设的SCL高电平和低电平周期均为 CCR * T<sub>PCLK1</sub>（外设时钟周期），要想计算CCR，我们需要知道高电平周期t<sub>high</sub>和低电平周期t<sub>low</sub>，<code>Note</code>中提到需要查看数据手册中t<sub>r(SCL)</sub>和t<sub>w(SCLH)</sub>等参数的定义</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203154217552.png" alt="image-20241203154217552" style="zoom: 50%;">
<p>可以发现数据手册对于SCL高电平周期、低电平周期、SDA/SCL上升时间和下降时间等参数的范围限制和I2C协议手册是一致的。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203154644942.png" alt="image-20241203154644942">那么如果想实现标准模式下100kHz的最大频率，我们可以计算出对应的周期为10us。如果观察t<sub>w(SCLL)</sub>+t<sub>f(SCL)</sub>即SCL低电平最小宽度4.7us和下降时间最大值0.3us（300ns)，发现两者之和正好为5us，同样的SCL高电平最小宽度4us与上升时间最大宽度1us（1000ns)之和也正好为5us。这也解释了为什么标准模式下将T<sub>high</sub>和T<sub>low</sub>都设置为CCR * T<sub>PCLK1</sub>，<mark>相当于50%占空比</mark></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203155632578.png" alt="image-20241203155632578"></p>
<p>既然知道了目标频率100kHz（对应周期10us），以及目标高低电平周期为5us，那么可以推出CCR为 5us / T<sub>PCLK1</sub>，即 5us / (1 / 36MHz)，即CCR = 180。</p>
<p>至此我们可以配置外设的速度模式和SCL的时钟频率了：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 5. 配置外设模式：标准模式（100kb/s）、SCL时钟频率（100kHz）</span>
I2C2<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CCR_FS<span class="token punctuation">;</span>
I2C2<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> <span class="token number">180</span><span class="token punctuation">;</span> <span class="token comment">// 5us/T(PCLK)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="scl-sda-zui-da-shang-sheng-shi-jian-trise">SCL/SDA最大上升时间（TRISE）</h4>
<blockquote>
<p>[!NOTE]</p>
<p>上升时间是指释放总线后，总线电压上升到逻辑高电平所需的时间</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203170939359.png" alt="image-20241203170939359"></p>
<p>寄存器描述：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203160222421.png" alt="image-20241203160222421"></p>
<p>为什么要配置一个SCL最大上升时间TRISE呢？从上一节的分析中我们知道T<sub>high</sub>是包括上升时间和逻辑高电平时间的。从软件操作SCL拉高之后到物理层面SCL真正变为逻辑高电平是由一定的延时的，该延时由电路上拉电阻以及电容的电气特性决定。外设为了确保能够根据CCR的配置产生T<sub>high</sub>长度的高电平，会在拉高SCL后通过反馈回路（例如IDR寄存器）检测SCL的电压状态，当其达到逻辑高电平时，外设内部的高电平计数器就会开始计数（逻辑高电平每持续一个PCLK，就自增），直到计数值为我们配置的CCR，这样就实现了我们预期的5us高电平周期。</p>
<p>但是这样就有一个问题，根据I2C规范，真正的逻辑高电平持续4us就够了，上升时间可以最大容许1us（1000ns）；对于频率100kHz，周期为10us，占空比为5us的标准模式最大速率，<mark>I2C将5us高电平时间划分为了上升时间1us和逻辑高电平时间4us。</mark></p>
<p>而如果按照上述高电平计数器的工作机制，如果上升时间为0.5us，再加上计数器对应的逻辑高电平时间5us，</p>
<p>整体高电平周期就变成了0.5+5=5.5us，导致拉长了SCL的时钟周期（预期高电平周期只持续5us），<mark>降低了SCL的预期频率</mark>，从而降低了传输速率。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203161544044.png" alt="image-20241203161544044"></p>
<p>因此，TRISE其实是让我们告诉I2C外设的高电平周期计数器，不用从逻辑高电平才开始计数，从开始拉高SCL那一刻就可以开始计数（即使电压还没有到达逻辑高电平），并当计数值等于TRISE时（例如36，36 * T<sub>PCLK</sub> = 1us，<mark>该值用于提醒计数器到了最大上升的临界值，剩下的计数必须等到SCL逻辑高电平才能继续</mark>），才通过反馈回路检测SCL电压状态，如果SCL为逻辑高电平则继续计数直到CCR（这样确保了逻辑高电平<code>&gt;= 4us</code>），如果SCL没有达到逻辑高电平（例如上拉电阻、电容、滤波导致的时延，从设备拉低SCL导致的时钟拉伸等），那么计数器就会暂停计数，直到检测到SCL达到逻辑高电平才继续剩余的CCR-TRISE计数周期。</p>
<blockquote>
<p>[!NOTE]</p>
<p>简而言之，将TRISE配置为I2C规范的最大上升时间对应的计数值（最大上升时间 / 外设工作频率）之后，无论在该时间内的哪个时刻电压达到逻辑高电平，SCL高电平周期都为CCR对应的5us。而如果不配置TRISE，就会存在这种情况：0.8us后电压达到逻辑高电平，计数器开始计数CCR个周期（5us），SCL高电平为5.8us，SCL周期为10.8us，这样就降低了SCL的频率（预期为10us）</p>
</blockquote>
<p>现在我们来计算下TRISE的配置值</p>
<ul>
<li>36MHz外设频率，周期为1/36us</li>
<li>I2C规范标准模式下上升时间最大为1000ns，即1us</li>
<li>因此TRISE = 上升时间1us / 外设时钟周期 + 1 = <code>1 / (1 / 36) + 1 = 37</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">I2C2<span class="token operator">-&gt;</span>TRISE <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_TRISE_TRISE<span class="token punctuation">;</span>
I2C2<span class="token operator">-&gt;</span>TRISE <span class="token operator">|=</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token comment">// 36 clock cycle + 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="wai-she-shi-neng">外设使能</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203171424466.png" alt="image-20241203171424466"></p>
<blockquote>
<p>[!NOTE]</p>
<p>需要注意，该配置应该在所有I2C配置完成之后</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_PE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="shi-li-dai-ma">示例代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. GPIO时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_I2C2EN<span class="token punctuation">;</span>

    <span class="token comment">// 2. 配置GPIO工作模式为复用开漏输出 mode=11 cnf=11</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE11 <span class="token operator">|</span> GPIO_CRH_CNF11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_CNF10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 特别注意，如下操作无法得到预期结果，GPIO工作不正常</span>
    <span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</span>
    <span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11);</span>
    <span class="token comment">// 如下则是可以的</span>
    <span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_MODE11 | GPIO_CRH_CNF11 | GPIO_CRH_MODE10 | GPIO_CRH_CNF10);</span>

    <span class="token comment">// 3. 配置外设为I2C模式（默认就是I2C模式，1-SMBUS模式）</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CR1_SMBUS<span class="token punctuation">;</span>

    <span class="token comment">// 4. 配置外设时钟</span>
    I2C2<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment">// 必须小于等于APB1的最大时钟频率36MHz</span>

    <span class="token comment">// 5. 配置外设模式：I2C标准模式（100kHz）、SCL时钟频率（100kHz）</span>
    I2C2<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CCR_FS<span class="token punctuation">;</span> <span class="token comment">// 标准模式</span>
    I2C2<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> <span class="token number">180</span><span class="token punctuation">;</span> <span class="token comment">// SCL高低电平周期5us / 外设时钟周期(1/36us) = 5 * 36</span>

    <span class="token comment">// 6. 配置TRISE-SCL最大上升时间</span>
    I2C2<span class="token operator">-&gt;</span>TRISE <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_TRISE_TRISE<span class="token punctuation">;</span> <span class="token comment">// 清零</span>
    I2C2<span class="token operator">-&gt;</span>TRISE <span class="token operator">|=</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token comment">// I2C标准模式最大上升时间1us / 外设时钟周期(1/36us) + 1 = 36 + 1</span>

    <span class="token comment">// 7. 使能外设</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_PE<span class="token punctuation">;</span> <span class="token comment">// Peripheral(I2C) Enable</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fa-song-qi-shi-xin-hao">发送起始信号</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203171713561.png" alt="image-20241203171713561"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203171644654.png" alt="image-20241203171644654"></p>
<p>设置 <code>START</code>位后，外设会在BUSY位被清除后产生一个起始信号并切换到主设备模式。</p>
<p><mark>起始信号的产生有个前提：总线是空闲状态</mark></p>
<ul>
<li>BUSY复位值为清除状态</li>
<li>当SDA或SCL被拉低时，BUSY会被硬件置位，表示总线正在用于通信</li>
<li>当停止条件产生后，BUSY会被硬件清除<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203172040017.png" alt="image-20241203172040017" style="zoom: 33%;"></li>
</ul>
<p>在主设备模式下，再次置位START会使外设在当前字节传输完成（如果移位寄存器正在传输字节数据）时产生ReStart重复起始信号。</p>
<p>一旦产生了起始信号，SB会被硬件置位，并且产生中断（如果设置了ITEVTEN位）。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203173333175.png" alt="image-20241203173333175"></p>
<p>因此主设备可以在设置START之后，轮询SR1中的SB，并在SB被置位后将从设备地址写入DR发送缓冲区。</p>
<h3 id="shi-li-dai-ma-1">示例代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 产生起始信号（当BUSY=1时不会立即产生）</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_START<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 起始信号产生后，由硬件置位SB</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_SB<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_Start timeout, timeout = %d"</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 紧接着发送设备地址会写DR，读SR1写DR序列会清除SB，因此这里不需要手动清除SB</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fa-song-cong-she-bei-di-zhi">发送从设备地址</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203174842914.png" alt="image-20241203174842914"></p>
<p>轮询SR1等待起始信号发出后，主设备可以将从设备地址写入DR，然后从设备地址就会通过内部的移位寄存器发送到SDA总线上。</p>
<p>一旦从设备地址字节发送完成后，SR1中的ADDR会被硬件置位，并产生中断（如果配置了CR2中的ITEVFEN）。</p>
<p>因此，主设备可以轮询SR1中的ADDR，当其被置位后跟随一个读SR2操作，就可以清除ADDR标志位。</p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203175416218.png" alt="image-20241203175416218" style="zoom: 50%;">
<blockquote>
<p>[!NOTE]</p>
<p>注意：当地址数据发送到SDA总线之后，并且收到了从设备的ACK，ADDR才会被置位。因此，与软件模拟I2C相比，我们不需要手动读取SDA并判断ACK/NACK了，硬件帮我们完成了这一步。</p>
</blockquote>
<h3 id="shi-li-dai-ma-2">示例代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 产生起始信号后，DR肯定为空，可以将从设备地址直接写入DR</span>
    I2C2<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> addr<span class="token punctuation">;</span>
    <span class="token comment">// 等待硬件置位ADDR（表明从设备地址以发出并收到了相应从设备的ACK）</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_ADDR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendAddr timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 清除ADDR标志位操作序列：读SR1后跟随一个读SR2</span>
    I2C2<span class="token operator">-&gt;</span>SR2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="zui-di-you-xiao-wei-biao-shi-du-xie">最低有效位表示读/写</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203180555453.png" alt="image-20241203180555453"></p>
<p>发送从设备地址时，主设备可以通过其中的最低有效为（LSB）来决定后续通信过程中，当前外设充当发送方还是接收方。</p>
<h2 id="zhu-she-bei-fa-song-shu-ju">主设备发送数据</h2>
<blockquote>
<p>Following the address transmission and after clearing ADDR, the master sends bytes from the DR register to the SDA line via the internal shift register.</p>
</blockquote>
<p>在发送完从设备地址并清除ADDR之后，接下来主设备可以经由内部的移位寄存器将写入DR的字节数据发送到SDA总线上。</p>
<blockquote>
<p>The master waits until the first data byte is written into I2C_DR (see Figure 273 Transfer sequencing EV8_1).</p>
</blockquote>
<p>主设备可以轮询SR1中的TXE，开始将第一个数据字节写入DR发送缓冲区：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203181334652.png" alt="image-20241203181334652"></p>
<p>按照手册所述（see Figure 273 Transfer sequencing EV8_1），当前我们所处的阶段对应EV8_1，移位寄存器和DR缓冲区都为空，轮询TXE会立即通过，可以将第一个数据字节Data1写入DR。由于移位寄存器为空，写入DR的字节会被直接递交给移位寄存器并传输到SDA总线上。因为DR仍然是空的，第二次轮询TXE也会立即通过，会将第二个数据字节Data2写入DR。后续字节写入DR时则会出现移位寄存器正在发送Data1、DR缓冲区数据Data2等待递交移位寄存器的情况，因此轮询TXE可能会耗费一些时间。</p>
<blockquote>
<p>When the acknowledge pulse is received, the TxE bit is set by hardware and an interrupt is generated if the ITEVFEN and ITBUFEN bits are set</p>
</blockquote>
<p>当移位寄存器发送完一个字节（例如Data1）并且收到了从设备的ACK时，DR缓冲区中的数据会被递交给移位寄存器并且TXE会被硬件置位（指示我们可以向DR写入下一个要发送的数据了）。这时发送Data3前的轮询会通过，并将Data3写入DR。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203184111734.png" alt="image-20241203184111734"></p>
<p>如上，我们可以从TxE的描述中获取更多细节。</p>
<ul>
<li>发送过程中，当DR寄存器为空时，DR会被硬件置位，但发送地址阶段除外</li>
<li>写DR可以清除该标志位；在起始信号、停止信号、外设使能后会由硬件清除。</li>
<li>如果收到了从设备的NACK，或者下个要发送的字节是帧错误检查字节，则TXE不会被置位。</li>
</ul>
<blockquote>
<p>[!NOTE]</p>
<p>以下两种情况TXE不会被清除：</p>
<ul>
<li>发送第一个数据字节时（因为直接写入了移位寄存器中，DR仍然是空的）。</li>
<li>当BTF被置位时向DR写入数据（该标志在TXE=1并且移位寄存器没有正在发送的数据时被置位），数据会被直接递交给移位寄存器。</li>
</ul>
</blockquote>
<blockquote>
<p>If TxE is set and a data byte was not written in the DR register before the end of the last data transmission, BTF is set and the interface waits until BTF is cleared by a read from I2C_SR1 followed by a write to I2C_DR, stretching SCL low.</p>
</blockquote>
<p>如果TXE被置位了，并且在上一个数据发送结束之前都没有数据字节被写入DR，BTF被置位。此时，外设会通过延伸（延展）SCL低电平，直到BTF被清除（读SR1后跟随一个写DR）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203185842734.png" alt="image-20241203185842734"></p>
<p>想一想，正常情况下，为了更好的连贯性和发送速率，主设备应该不论轮询TXE并向DR写入待发送的字节，尽管移位寄存器可能还正在传输上个字节，但这并不影响将下个要传输的字节写入DR。</p>
<p>当TXE被置位（发送缓冲区为空），并且移位寄存器中的传输也结束了，还没写DR操作，会有如下几种情况：</p>
<ul>
<li>此次通信所有数据都一次写入DR了，此时可能移位寄存器正在传输倒数第二个字节，DR还暂存着最后一个要发送的字节，因此主设备在发送停止信号前需要轮询BTF确认DR为空了（TXE=1），移位寄存器也结束传输状态了并且最后一个字节的ACK也收到了（TXE=1），这时可以发出停止信号，随后TXE和BTF都会被清除。</li>
<li>主设备对该传输任务设置的优先级不高，不能及时检测到TXE并写DR，可以使用轮询BTF的方式来代替轮询TXE，但传输速率会下降，因为BTF被置位期间，SCL会处于低电平拉伸状态（stretch）</li>
<li><mark>主设备期望知道每个字节是否收到了ACK</mark>，因此每次向DR写入字节后，都轮询BTF，确认该字节发送完成并收到了从设备的ACK时才继续向DR写入下一个字节，这样能在某个字节收到不期望的NACK时做一些异常处理。</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203192337639.png" alt="image-20241203192337639"></p>
<p>手册中发送时序图也提到了这一点（参考EV_8），如果采用轮询TXE的方式连续发送多个字节，那么必须在DR为空，移位寄存器（非空）时，将下个字节写入DR以清除TXE。如果无法实现该操作序列，则建议轮询BTF来代替TXE以避免降低通信效率。</p>
<h4 id="shi-li-dai-ma-bu-deng-dai-mei-ge-zi-jie-de-ack-jie-guo">示例代码-不等待每个字节的ACK结果</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 等待发送缓冲区非空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendByte wait TXE timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将数据传输到发送缓冲区，同时读SR1跟随一个写DR将清除TXE标志</span>
    I2C2<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="shi-li-dai-ma-deng-dai-mei-ge-zi-jie-de-ack-jie-guo">示例代码-等待每个字节的ACK结果</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 等待发送缓冲区非空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendByte wait TXE timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将数据传输到发送缓冲区，同时读SR1跟随一个写DR将清除TXE标志</span>
    I2C2<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> data<span class="token punctuation">;</span>

    <span class="token comment">// 等待当前字节传输完成且收到ACK（可选，可以在超时时针对当前字节的NACK做异常处理）</span>
    timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_BTF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendByte wait BTF timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里不需要手动清除BTF，下一个字节的写DR会清除BTF，停止信号也会清除BTF</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fa-song-ting-zhi-xin-hao-fa-song-mo-shi-xia">发送停止信号（发送模式下）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203194648097.png" alt="image-20241203194648097"></p>
<p>在向DR写入最后一个数据字节后，软件可以产生一个停止信号，外设会自动返回从设备模式。</p>
<blockquote>
<p>[!NOTE]</p>
<p>产生停止信号的时机应该在检查到TXE或BTF被置位之后。</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203194909773.png" alt="image-20241203194909773"></p>
<p>设置该位后，在当前字节传输完成之后或当前起始信号发送之后将会产生停止信号。</p>
<h4 id="shi-li-dai-ma-3">示例代码</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Stop4Send</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 等待条件: 发送缓冲区为空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_STOP<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="zhu-she-bei-jie-shou-shu-ju">主设备接收数据</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203195407265.png" alt="image-20241203195407265"></p>
<p>在以写模式发送从设备地址，并清除ADDR标志后，I2C外设会进入主设备接收模式。</p>
<p>在该模式下，外设通过内部移位寄存器从SDA总线接收字节到DR中。在接收到每个字节后，外设会产生如下操作序列：</p>
<ol>
<li>如果设置了CR1中的ACK=1，外设会自动响应ACK脉冲</li>
<li>SR1中的RXNE会被硬件置位，并产生中断（如果使能了中断）</li>
</ol>
<p>如果RXNE被置位，并且DR中的数据在最近一次接收数据完成之前还没有被读取，此时接收到的数据无法存入DR，那么BTF会被硬件置位。外设会延伸SCL低电平（总线挂起），直到BTF被清除（一个读SR1操作后跟随一个读DR操作）</p>
<h4 id="shi-li-dai-ma-4">示例代码</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_ReceiveByte timeout, timeout = %d"</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> I2C2<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="xiang-ying-ack-nack">响应ACK/NACK</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203201826539.png" alt="image-20241203201826539"></p>
<p>将ACK设置为1后，外设会对每个接收到的字节响应ACK。如果设置为0，则对每个接收到的字节响应NACK。</p>
<h4 id="shi-li-dai-ma-5">示例代码：</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_EnableAutoAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_ACK<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_DisableAutoAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CR1_ACK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="fa-song-ting-zhi-xin-hao-jie-shou-mo-shi-xia">发送停止信号（接收模式下）</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_EnableStop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_STOP<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="zhu-she-bei-jie-shou-liu-cheng">主设备接收流程</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241203202947534.png" alt="image-20241203202947534"></p>
<p>如果该任务有最高优先级可以使用该方式一。</p>
<p>主设备需要针对从设备接收的最后一个字节发送NACK。从设备在收到该NACK后，会释放对SCL和SDA总线的控制。接着主设备就可以发送停止信号或重新开始信号。</p>
<ol>
<li>为了在接收到最后一个字节后产生NACK脉冲，必须恰好在读倒数第二个数据字节时（在倒数第二个RXNE事件发生时）将ACK清零。否则最后一个字节传输结束时，ACK如果没有清零，外设就会自动响应ACK。</li>
<li>为了产生停止/重新开始信号，软件必须恰好在读倒数第二个数据字节时（在倒数第二个RXNE事件发生时）将STOP/START置位。</li>
<li>如果只需要接收一个字节，那么应该在紧跟着发送设备地址并清除ADDR之后将ACK清零并置位STOP。</li>
</ol>
<p>在停止信号产生之后，外设将自动回到从设备模式（SCL/SDA为释放状态）。</p>
<h3 id="shi-li-dai-ma-6">示例代码</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop4Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_EnableAutoAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token number">0xA0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_DisableAutoAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_EnableStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wan-zheng-dai-ma-1">完整代码</h2>
<h3 id="i-2-c-hard-h">i2c_hard.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_EnableAutoAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">I2C_DisableAutoAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">I2C_Stop4Send</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">I2C_EnableStop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="i-2-c-hard-c">i2c_hard.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c_hard.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIMEOUT_COUNT</span> <span class="token expression"><span class="token number">0xFFFF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OK</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FAIL</span> <span class="token expression"><span class="token number">1</span></span></span>

<span class="token keyword">void</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. GPIO时钟配置</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPBEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB1ENR <span class="token operator">|=</span> RCC_APB1ENR_I2C2EN<span class="token punctuation">;</span>

    <span class="token comment">// 2. 配置GPIO工作模式为复用开漏输出 mode=11 cnf=11</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE11 <span class="token operator">|</span> GPIO_CRH_CNF11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIOB<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> <span class="token punctuation">(</span>GPIO_CRH_MODE10 <span class="token operator">|</span> GPIO_CRH_CNF10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 特别注意，如下操作无法得到预期结果，GPIO工作不正常</span>
    <span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</span>
    <span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11);</span>
    <span class="token comment">// 如下则是可以的</span>
    <span class="token comment">// GPIOB-&gt;CRH |= (GPIO_CRH_MODE11 | GPIO_CRH_CNF11 | GPIO_CRH_MODE10 |</span>
    <span class="token comment">// GPIO_CRH_CNF10);</span>

    <span class="token comment">// 3. 配置外设为I2C模式（默认就是I2C模式，1-SMBUS模式）</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CR1_SMBUS<span class="token punctuation">;</span>

    <span class="token comment">// 4. 配置外设时钟</span>
    I2C2<span class="token operator">-&gt;</span>CR2 <span class="token operator">|=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment">// 必须小于等于APB1的最大时钟频率36MHz</span>

    <span class="token comment">// 5. 配置外设模式：I2C标准模式（100kHz）、SCL时钟频率（100kHz）</span>
    I2C2<span class="token operator">-&gt;</span>CCR <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CCR_FS<span class="token punctuation">;</span> <span class="token comment">// 标准模式</span>
    I2C2<span class="token operator">-&gt;</span>CCR <span class="token operator">|=</span> <span class="token number">180</span><span class="token punctuation">;</span> <span class="token comment">// SCL高低电平周期5us / 外设时钟周期(1/36us) = 5 * 36</span>

    <span class="token comment">// 6. 配置TRISE-SCL最大上升时间</span>
    I2C2<span class="token operator">-&gt;</span>TRISE <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_TRISE_TRISE<span class="token punctuation">;</span> <span class="token comment">// 清零</span>
    I2C2<span class="token operator">-&gt;</span>TRISE <span class="token operator">|=</span>
        <span class="token number">37</span><span class="token punctuation">;</span> <span class="token comment">// I2C标准模式最大上升时间1us / 外设时钟周期(1/36us) + 1 = 36 + 1</span>

    <span class="token comment">// 7. 使能外设</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_PE<span class="token punctuation">;</span> <span class="token comment">// Peripheral(I2C) Enable</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 产生起始信号（当BUSY=1时不会立即产生）</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_START<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 起始信号产生后，由硬件置位SB</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_SB<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_Start timeout, timeout = %d"</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 紧接着发送设备地址会写DR，读SR1写DR序列会清除SB，因此这里不需要手动清除SB</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 产生起始信号后，DR肯定为空，可以将从设备地址直接写入DR</span>
    I2C2<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> addr<span class="token punctuation">;</span>
    <span class="token comment">// 等待硬件置位ADDR（表明从设备地址以发出并收到了相应从设备的ACK）</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_ADDR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendAddr timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 清除ADDR标志位操作序列：读SR1后跟随一个读SR2</span>
    I2C2<span class="token operator">-&gt;</span>SR2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 等待发送缓冲区非空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendByte wait TXE timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将数据传输到发送缓冲区，同时读SR1跟随一个写DR将清除TXE标志</span>
    I2C2<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> data<span class="token punctuation">;</span>

    <span class="token comment">// 等待当前字节传输完成且收到ACK（可选，可以在超时时针对当前字节的NACK做异常处理）</span>
    timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_BTF<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_SendByte wait BTF timeout"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里不需要手动清除BTF，下一个字节的写DR会清除BTF，停止信号也会清除BTF</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Stop4Send</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token comment">// 等待条件: 发送缓冲区为空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_STOP<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_EnableStop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_STOP<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> timeout <span class="token operator">=</span> TIMEOUT_COUNT<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>I2C2<span class="token operator">-&gt;</span>SR1 <span class="token operator">&amp;</span> I2C_SR1_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"I2C_ReceiveByte timeout, timeout = %d"</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> I2C2<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_EnableAutoAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> I2C_CR1_ACK<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_DisableAutoAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> I2C2<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>I2C_CR1_ACK<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">I2C_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop4Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_EnableAutoAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span><span class="token number">0xA0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_DisableAutoAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_EnableStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="eeprom">EEPROM</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__M24C02_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__M24C02_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c_hard.h"</span></span>

<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __M24C02_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"m24c02.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_ADDR_W</span> <span class="token expression"><span class="token number">0xA0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_ADDR_R</span> <span class="token expression"><span class="token number">0xA1</span></span></span>

<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span>DEV_ADDR_W<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">I2C_Stop4Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wait for write cycle</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> byte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span>DEV_ADDR_W<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_SendAddr</span><span class="token punctuation">(</span>DEV_ADDR_R<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_EnableAutoAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">I2C_DisableAutoAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">I2C_EnableStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I2C_ReceiveByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token char">'b'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b1 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b2 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b3 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"b1 = %d, b2 = %d, b3 = %d"</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>

    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"56789"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buffer = %s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buffer = %s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="kuo-zhan-btf-biao-zhi-wei-de-zuo-yong">扩展：BTF标志位的作用</h2>
<p><code>BTF</code> (Byte Transfer Finished) 标志位的作用是指示当前<strong>字节传输完成</strong>，包括发送和接收场景。具体来说，它是一个硬件状态位，反映了数据寄存器（<code>DR</code>）和移位寄存器之间的数据传输状态。</p>
<h3 id="strong-btf-de-ding-yi-yu-zuo-yong-strong"><strong>BTF 的定义与作用</strong></h3>
<ol>
<li><strong>定义</strong>：
<ul>
<li>当移位寄存器中当前数据字节的传输完成（无论是发送还是接收），并且数据寄存器（<code>DR</code>）为空时，硬件会设置 <code>BTF</code> 标志位。</li>
<li>如果在接收模式中，<code>DR</code> 中的数据未被读取，或者在发送模式中新的数据未被写入，I2C 外设会拉低时钟线（SCL），即 <strong>“总线挂起”</strong>，以等待软件处理。</li>
</ul>
</li>
<li><strong>作用</strong>：
<ul>
<li>用于协调主机（MCU）和外设之间的数据流，避免数据丢失或错误。</li>
<li>指示是否需要读取 <code>DR</code>（在接收模式）或写入 <code>DR</code>（在发送模式）。</li>
</ul>
</li>
</ol>
<h1 id="stm-32-cube-mx-shi-xian-eeprom-du-xie">STM32CubeMX实现EEPROM读写</h1>
<h2 id="cube-pei-zhi">Cube配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094331841.png" alt="image-20241204094331841"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094511416.png" alt="image-20241204094511416"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094540825.png" alt="image-20241204094540825"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094637054.png" alt="image-20241204094637054"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094700542.png" alt="image-20241204094700542"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094733818.png" alt="image-20241204094733818"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094745141.png" alt="image-20241204094745141"></p>
<h2 id="mdk-pei-zhi">MDK配置</h2>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204094958368.png" alt="image-20241204094958368" style="zoom:50%;">
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204095038798.png" alt="image-20241204095038798"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204095126110.png" alt="image-20241204095126110"></p>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241204095213099.png" alt="image-20241204095213099" style="zoom:50%;">
<h2 id="shi-li-dai-ma-7">示例代码</h2>
<h3 id="m-24-c-02-h-2">m24c02.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__M24C02_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__M24C02_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c.h"</span></span>

<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __M24C02_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="m-24-c-02-c-2">m24c02.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"m24c02.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_ADDR_W</span> <span class="token expression"><span class="token number">0xA0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_ADDR_R</span> <span class="token expression"><span class="token number">0xA1</span></span></span>

<span class="token keyword">void</span> <span class="token function">M24C02_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_I2C_Mem_Write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hi2c2<span class="token punctuation">,</span> DEV_ADDR_W<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> I2C_MEMADD_SIZE_8BIT<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span>
                      size<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 等待EEPROM写周期结束</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> byte<span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_I2C_Mem_Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hi2c2<span class="token punctuation">,</span> DEV_ADDR_W<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> I2C_MEMADD_SIZE_8BIT<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span>
                     size<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token char">'b'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b1 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b2 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b3 <span class="token operator">=</span> <span class="token function">M24C02_ReadByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b1 = %d, b2 = %d, b3 = %d\n"</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"56789"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buffer = %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_WriteBytes</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">M24C02_ReadBytes</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buffer = %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="printf-zhong-ding-xiang">printf重定向</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN Includes */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"m24c02.h"</span></span>
<span class="token comment">/* USER CODE END Includes */</span>  

<span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_I2C2_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>
    <span class="token function">M24C02_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>协议</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>I2C</tag>
        <tag>I²C</tag>
      </tags>
  </entry>
  <entry>
    <title>简易版裸机多任务调度框架</title>
    <url>/2024/11/26/21297.html</url>
    <content><![CDATA[<h1 id="kuang-jia-jian-mo">框架建模</h1>
<h2 id="kuang-jia-chou-xiang">框架抽象</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126093047180.png" alt="image-20241126093047180"></p>
<h2 id="mo-kuai-hua-fen">模块划分</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241126094329449.png" alt="image-20241126094329449"></p>
<h1 id="scheduler">Scheduler</h1>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/25.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SCHEDULER_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SCHEDULER_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"gd32f4xx.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdbool.h"</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">task_function_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    TASK_READY<span class="token punctuation">,</span>
    TASK_RUNNING<span class="token punctuation">,</span>
    TASK_WAITING
<span class="token punctuation">}</span> <span class="token class-name">task_state_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">task_state_t</span>  task_state<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> task_interval_ms<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> task_time_waiting_ms<span class="token punctuation">;</span>
    <span class="token class-name">task_function_t</span> task_function<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">task_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">task_update</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">task_execute</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">//__SCHEDULER_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/25.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"scheduler.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"app.h"</span></span>

<span class="token keyword">static</span> <span class="token class-name">task_t</span> tasks<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        TASK_READY<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> app_ui_led_flow<span class="token punctuation">,</span>
        TASK_READY<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> app_debug_key_scan<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> TASK_SIZE <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tasks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">task_update</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TASK_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_time_waiting_ms<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_time_waiting_ms <span class="token operator">&gt;=</span> tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_interval_ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_state <span class="token operator">=</span> TASK_READY<span class="token punctuation">;</span>
            tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_time_waiting_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">task_execute</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TASK_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_state <span class="token operator">==</span> TASK_READY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span>
            tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">task_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>task_state <span class="token operator">=</span> TASK_WAITING<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="app">App</h1>
<h2 id="ren-wu-jie-kou-guan-li">任务接口管理</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/25.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">APP_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">APP_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">app_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">app_ui_led_flow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">app_debug_key_scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">//APP_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ying-yong-chu-shi-hua">应用初始化</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/25.</span>
<span class="token comment">//</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"app.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"int_led.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"int_key.h"</span></span>

<span class="token keyword">void</span> <span class="token function">app_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">int_led_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">int_key_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"app_init done"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="liu-shui-deng-ren-wu-shi-xian">流水灯任务实现</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/25.</span>
<span class="token comment">//</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"app.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"int_led.h"</span></span>

<span class="token keyword">void</span> <span class="token function">app_ui_led_flow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    LOG_DEBUG("app_ui_led_flow invoke")</span>
    <span class="token keyword">static</span> <span class="token class-name">uint8_t</span> led_index <span class="token operator">=</span> LED1<span class="token punctuation">;</span>
    <span class="token function">int_led_on</span><span class="token punctuation">(</span>led_index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    led_index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>led_index <span class="token operator">==</span> LED_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">int_led_off_all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        led_index <span class="token operator">=</span> LED1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="an-jian-sao-miao-ren-wu-shi-xian">按键扫描任务实现</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span>
<span class="token comment">// Created by 86157 on 2024/11/25.</span>
<span class="token comment">//</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"app.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"int_key.h"</span></span>

<span class="token keyword">void</span> <span class="token function">app_debug_key_scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">int_key_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">key_up_callback</span><span class="token punctuation">(</span>KEY_NO key_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"key up"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">key_down_callback</span><span class="token punctuation">(</span>KEY_NO key_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"key down"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="ding-shi-qi-geng-xin-ren-wu-zhuang-tai">定时器更新任务状态</h1>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">hal_timer5_update_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">task_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>多任务</tag>
        <tag>调度</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解UART串口通信（基于STM32F103）</title>
    <url>/2024/11/28/38060.html</url>
    <content><![CDATA[<h1 id="can-kao-shou-ce">参考手册</h1>
<ul>
<li><a href="https://www.st.com.cn/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">STM32F101xx, STM32F102xx, STM32F103xx, STM32F105xx and STM32F107xx advanced Arm®-based 32-bit MCUs</a></li>
<li><a href="https://www.zanwen.icu/2024/11/27/59863.html">从按键控制LED开始深入理解外部中断（基于STM32F103ZE）</a></li>
</ul>
<h1 id="usart-kuang-tu-fen-xi">USART框图分析</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128192635013.png" alt="image-20241128192635013"></p>
<blockquote>
<p><a href="https://www.st.com.cn/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">STM32F101xx, STM32F102xx, STM32F103xx, STM32F105xx and STM32F107xx advanced Arm®-based 32-bit MCUs</a> P789</p>
</blockquote>
<h2 id="fa-song-jie-shou-yin-jiao">发送/接收引脚</h2>
<h3 id="fa-song-jie-shou-yin-jiao-shuo-ming">发送/接收引脚说明</h3>
<blockquote>
<p>RX: Receive Data Input is the serial data input. Oversampling techniques are used for data recovery by discriminating between valid incoming data and noise.</p>
<p>TX: Transmit Data Output. When the transmitter is disabled, the output pin returns to its IO port configuration. When the transmitter is enabled and nothing is to be transmitted, the TX pin is at high level. In single-wire and smartcard modes, this IO is used to transmit and receive the data (at USART level, data are then received on SW_RX)</p>
</blockquote>
<ul>
<li>RX：串行数据输入引脚。</li>
<li>TX：发送数据输出引脚。当发送器没有启用时，这个输出引脚充当通用的GPIO引脚；当启用发送器并且没有内容被发送是什时，该引脚保持高电平。在单线核智能卡模式下，该引脚被用来发送和接收数据（虽然物理上是用的一个引脚，但在USART内部，数据接收是通过SW_RX逻辑通道来完成的）。</li>
</ul>
<h3 id="gpio-fu-yong">GPIO复用</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128195845755.png" alt="image-20241128195845755"></p>
<blockquote>
<p>[!NOTE]</p>
<p>值得注意的是：RX复用IO引脚时，IO口的读通道仍然是连通的；但是TX复用IO引脚时，IO口的写通道是断开的，这意味着该IO引脚完全由对应的复用外设（例如USART）来操控了。</p>
</blockquote>
<p>那么我要怎么知道USART复用哪个引脚呢？这个在GPIO复用功能章节（9.3.8 USART alternate function remapping）能够找到相应的说明：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128200513629.png" alt="image-20241128200513629"></p>
<p>默认使用PA9/10作为USART1的TX/RX，如果需要还可以通过AFIO重映射将其配置为PB6/7：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128200656325.png" alt="image-20241128200656325"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128200735197.png" alt="image-20241128200735197"></p>
<h3 id="gpio-mo-shi-pei-zhi">GPIO模式配置</h3>
<p>现在USART使用引脚我们知道了，那么引脚该配置什么工作模式呢，在GPIO外设配置章节（9.1.11 GPIO configurations for device peripherals）也有说明：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128200958021.png" alt="image-20241128200958021"></p>
<p>TX需要配置为复用推挽，RX需要配置为浮动输入或上拉输入</p>
<h2 id="rts-cts-yin-jiao">RTS/CTS引脚</h2>
<blockquote>
<p>The following pins are required in Hardware flow control mode:<br>
 CTS: Clear To Send blocks the data transmission at the end of the current transfer<br>
when high<br>
 RTS: Request to send indicates that the USART is ready to receive a data (when low)</p>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128201344123.png" alt="image-20241128201344123"></p>
<p>这两个引脚在硬件流控模式中需要被用到（通信双方通过这两个引脚来互相协调数据的发送，避免一个发送太快，另一个接收不过来）：</p>
<ul>
<li>RTS（请求发送）：箭头方向是从内向外的，和接收控制器相连。当前串口可以通过拉低该引脚来告知对方可以发送数据了（当前MCU准备好接收数据了）。</li>
<li>CTS（清除发送，允许发送的条件已经清除）：箭头方向是由外向内的，和发送控制器相连。对方可以通过拉高该引脚来告知当前串口在完成当前传输后停止数据的发送（对方接收不过来了）</li>
</ul>
<h3 id="ying-jian-liu-kong-zhi-liu-cheng">硬件流控制流程：</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128204540542.png" alt="image-20241128204540542"></p>
<p>下面以串口A要给串口B发送数据为例：</p>
<ul>
<li>串口A要给B发送数据时，首先会通过A的CTS读取B的RTS状态，如果B可以接收数据，那么B会拉低RTS（请求发送），该低电平状态在A需要发送数据时可以通过CTS读取到：
<ul>
<li>读到CTS为高，那么说明B拉高了RTS（对方忙碌）；如果读到CTS为低，那么说明B拉低了RTS（对方空闲）</li>
</ul>
</li>
<li>A通过CTS读到低电平后，就开始向B发送数据了，如果某一时刻发现CTS被拉高了，说明B处理不过来了，因此会在当前帧传输完后停止后续数据的发送，当B重新将RTS置为低电平时继续传输剩余帧，重复这一个过程直到所有帧传输完成。</li>
</ul>
<h2 id="ck-yin-jiao">CK引脚</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128204932608.png" alt="image-20241128204932608"></p>
<p>该引脚在同步传输模式下用于时钟信号的传输。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128205127278.png" alt="image-20241128205127278"></p>
<p>其中UART4和UART5是不支持同步模式的。</p>
<h1 id="usart-shu-ju-zheng-fen-xi">USART数据帧分析</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128205612552.png" alt="image-20241128205612552"></p>
<h2 id="shu-ju-wei-zi-chang">数据位字长</h2>
<blockquote>
<p>Word length may be selected as being either 8 or 9 bits by programming the M bit in the USART_CR1 register (see Figure 280).</p>
</blockquote>
<p>字长可以选择8bit或9bit，可以通过USART_CR1寄存器中的M位来设置：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128205946525.png" alt="image-20241128205946525"></p>
<h2 id="qi-shi-wei-he-ting-zhi-wei">起始位和停止位</h2>
<blockquote>
<p>The TX pin is in low state during the start bit. It is in high state during the stop bit</p>
</blockquote>
<p>发送引脚在起始位保持低电平，在停止位保持高电平</p>
<h2 id="kong-xian-zheng">空闲帧</h2>
<blockquote>
<p>An Idle character is interpreted as an entire frame of “1”s followed by the start bit of the next frame which contains data (The number of “1” ‘s will include the number of stop bits).</p>
</blockquote>
<p>空闲帧是指比特位全为1的帧，帧的长度包括起始比特位、字长、停止位（对应比特位数量不固定）</p>
<h2 id="bo-te-lu-he-shi-zhong">波特率和时钟</h2>
<blockquote>
<p>Transmission and reception are driven by a common baud rate generator, the clock for each is generated when the enable bit is set respectively for the transmitter and receiver.</p>
</blockquote>
<p>发送和接收是由一个通用的波特率发生器来驱动的，</p>
<h1 id="fa-song-qi">发送器</h1>
<h2 id="di-wei-you-xian-amp-di-ceng-fa-song-liu-cheng">低位优先&amp;底层发送流程</h2>
<blockquote>
<p>[!IMPORTANT]</p>
<p>During a USART transmission, data shifts out least significant bit first on the TX pin.</p>
<p>In thismode, the USART_DR register consists of a buffer (TDR) between the internal bus and the transmit shift register (see Figure 279)</p>
</blockquote>
<p>在一次USART传输中，数据通过TX引脚低位优先移位发送出去的。在这个场景下，USART_DR表现为一个位于内部总线和移位寄存器之间的发送缓冲区（TDR），写入USART_DR的数据会先被写入TDR，然后在硬件的支持下通过移位寄存器逐位发送出去。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128212821427.png" alt="image-20241128212821427"></p>
<h2 id="ke-pei-zhi-de-ting-zhi-wei-kuan-du">可配置的停止位宽度</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128213716372.png" alt="image-20241128213716372"></p>
<p>停止位默认占一个bit，可以通过USART_CR2寄存器配置为其他的比特位宽，以支持不同的串口通信模式（例如单线、调制解调器、智能卡等）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128213822036.png" alt="image-20241128213822036"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128214412870.png" alt="image-20241128214412870"></p>
<h2 id="txe-biao-zhi-chuan-shu-huan-chong-qu-wei-kong">TXE标志（传输缓冲区为空）</h2>
<blockquote>
<p>The TXE bit is always cleared by a write to the data register.The TXE bit is set by hardware and it indicates:<br>
 The data has been moved from TDR to the shift register and the data transmission has<br>
started.<br>
 The TDR register is empty.<br>
 The next data can be written in the USART_DR register without overwriting the<br>
previous data.</p>
<p>This flag generates an interrupt if the TXEIE bit is set.</p>
</blockquote>
<p>USART_SR寄存器中TXE标志（Tranmist Buffer Empty）总是由一个写USART_DR 寄存器的操作来清除的。TXE由硬件置位，用于指示：</p>
<ul>
<li>数据已经从TDR传送到了移位寄存器并且该数据的发送已经开始</li>
<li>TDR寄存器为空</li>
<li>可以将写一个数据写入USART_DR寄存器，并且先前写入的数据不会被覆盖（可能正在通过移位寄存器逐位发送，也可能已经发送完毕）</li>
</ul>
<p>该标志被置位时会产生一个TXEIE中断（如果使能了该中断）。</p>
<blockquote>
<p>When a transmission is taking place, a write instruction to the USART_DR register stores the data in the TDR register and which is copied in the shift register at the end of the current transmission</p>
</blockquote>
<p>当正在进行一个数据的发送时，向USART_DR写入数据会将数据存储到TDR寄存器中，并在当前传输结束后将其拷贝到移位寄存器中。</p>
<blockquote>
<p>When no transmission is taking place, a write instruction to the USART_DR register places the data directly in the shift register, the data transmission starts, and the TXE bit is immediately set.</p>
</blockquote>
<p>如果当前没有发送数据，向USART_DR写入数据会直接将数据放到移位寄存器中，并且开始该数据的传输，同时TXE会被置位。</p>
<h2 id="tc-biao-zhi-ying-jian-chuan-shu-wan-cheng-amp-chuan-shu-huan-chong-qu-wei-kong">TC标志（硬件传输完成&amp;传输缓冲区为空）</h2>
<blockquote>
<p>If a frame is transmitted (after the stop bit) and the TXE bit is set, the TC bit goes high. An interrupt is generated if the TCIE bit is set in the USART_CR1 register.</p>
</blockquote>
<p>如果一个数据帧传输完成（包括停止位）并且TXE被置位，此时表明了两点：</p>
<ul>
<li>硬件没有正在通过移位寄存器传输数据</li>
<li>TDR缓冲区也没有带发送的数据</li>
</ul>
<p>此时，TC标志会被置位，同时产生一个TCIE中断（如果使能了该中断）。这通常标志着一连串数据发送的完成。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128221900956.png" alt="image-20241128221900956"></p>
<blockquote>
<p>[!WARNING]</p>
<p>After writing the last data into the USART_DR register, it is mandatory to wait for TC=1 before disabling the USART or causing the microcontroller to enter the low-power mode</p>
</blockquote>
<p>在写入最后一个数据到DR寄存器后，如果要禁用USART或使MCU进入低功耗模式之前，应该要等TC被置位，这样才能确保底层的硬件真的将所有递交到DR的数据发送出去了。</p>
<blockquote>
<p>The TC bit is cleared by the following software sequence:</p>
<ol>
<li>A read from the USART_SR register</li>
<li>A write to the USART_DR register</li>
</ol>
</blockquote>
<p>TC标志会被如下的软件操作序列清除：</p>
<ol>
<li>读USART_SR寄存器</li>
<li>写USART_DR 寄存器</li>
</ol>
<p>例如我们需要一次性发送多个数据帧，会使用如下轮询的方式：</p>
<ol>
<li>等待USART_SR中的TXE被置位（需要轮询读取USART_SR中的TXE位并判断）</li>
<li>TXE被置位后，向DR递交下一个待发送的数据</li>
</ol>
<h2 id="kong-xian-zheng-1">空闲帧</h2>
<blockquote>
<p>Setting the TE bit drives the USART to send an idle frame before the first data frame.</p>
</blockquote>
<p><strong>TE bit</strong> 是 <strong>USART_CR1</strong>（USART控制寄存器1）中的一个控制位，全称为 <strong>Transmitter Enable</strong>，其作用是启用 USART 的发送功能。具体来说，设置 <strong>TE bit</strong> 会使 USART 进入发送模式，并且在开始传输第一个数据帧之前，它会先发送一个空闲帧（idle frame）。</p>
<h3 id="strong-shi-yao-shi-kong-xian-zheng-idle-frame-strong"><strong>什么是空闲帧（Idle Frame）？</strong></h3>
<p>空闲帧指的是一种 <strong>没有有效数据</strong> 的帧，通常它是由逻辑 <strong>“1”</strong> 组成的。在 USART 中，这个空闲帧起到 <strong>信号稳定</strong> 和 <strong>传输准备</strong> 的作用。空闲帧的存在确保了接收端能够正确同步到即将开始的有效数据传输。</p>
<h3 id="strong-ju-ti-gong-zuo-yuan-li-strong"><strong>具体工作原理</strong></h3>
<ol>
<li><strong>设置 TE 位</strong>：当你通过软件设置 <strong>TE bit</strong>（即 <strong>Transmitter Enable</strong> 位）时，USART 将被启用为 <strong>发送模式</strong>，并准备开始传输数据。</li>
<li><strong>发送空闲帧</strong>：在开始传输数据之前，USART 会首先发送一个 <strong>空闲帧</strong>（一个全为“1”的逻辑帧），这个空闲帧可以被视为“开始”信号，告诉接收方接下来会有数据传输。</li>
<li><strong>发送数据帧</strong>：一旦空闲帧发送完成，USART 就开始传输第一个有效的数据帧。</li>
</ol>
<h3 id="strong-wei-shi-yao-yao-fa-song-kong-xian-zheng-strong"><strong>为什么要发送空闲帧？</strong></h3>
<ul>
<li><strong>同步作用</strong>：在某些情况下，接收设备需要一定的时间来同步到发送设备的时钟。空闲帧为接收端提供了同步的信号，确保接收设备能够准备好接收即将传输的数据。</li>
<li><strong>信号稳定</strong>：在数据传输开始之前，空闲帧有助于确保信号线处于稳定状态，以便接收设备能够准确地捕获数据。</li>
<li><strong>时序准备</strong>：通过发送空闲帧，发送器给接收器一个明确的指示，表明接下来的数据是有效的，而不是噪声或无效数据。</li>
</ul>
<h1 id="jie-shou-qi">接收器</h1>
<blockquote>
<p>The USART can receive data words of either 8 or 9 bits depending on the M bit in the USART_CR1 register.</p>
</blockquote>
<p>USRAT可以接收8或9个bit字长的数据，这取决于USART_CR1中M位的配置。</p>
<h2 id="qi-shi-wei-jian-ce">起始位检测</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129091530313.png" alt="image-20241129091530313"></p>
<blockquote>
<p>In the USART, the start bit is detected when a specific sequence of samples is recognized. This sequence is: 1 1 1 0 X 0 X 0 X 0 0 0 0.</p>
<p>If the sequence is not complete, the start bit detection aborts and the receiver returns to the<br>
idle state (no flag is set) where it waits for a falling edge.</p>
</blockquote>
<p>在USART中，如果识别到 <code>1 1 1 0 X 0 X 0 X 0 0 0 0</code>模式的特定采样序列（X表示不关心是0还是1），则表明检测到一个有效起始位。（<code>1 1 1 0</code>表明产生了一个下降沿，其中 <code>0</code>可能是一个数据帧的起始位）</p>
<p>如果发生下降沿时得到的采样序列和上述模式相比不完整，那么该起始位会被丢弃，并且接收器返回到空闲状态继续等待下降沿。</p>
<blockquote>
<p>The start bit is confirmed (RXNE flag set, interrupt generated if RXNEIE=1) if the 3 sampled bits are at 0 (first sampling on the 3rd, 5th and 7th bits finds the 3 bits at 0 and second sampling on the 8th, 9th and 10th bits also finds the 3 bits at 0).</p>
</blockquote>
<p>如图，USART通过过采样（波特率的16倍）在一个bit时间内进行了16次采样，如果将下降沿序列（ <code>1 1 1 0</code>）中的 <code>0</code>作为一个起始位中的第一个样本点，那么如果随后的第3、5、7样本点为0，且第8、9、10样本点为0，那么该起始位被确认为有效起始位，RXNE标志（接收缓冲区不为空，RDR有数据可读）会被置位，并且产生RXNEIE中断（如果使能了该中断）</p>
<blockquote>
<p>[!IMPORTANT]</p>
<p>这里值得注意的是：实际上RXNE置位应该是在硬件完成数据的传输之后（数据通过硬件传入移位寄存器并递交到RDR寄存器）</p>
</blockquote>
<blockquote>
<p>The start bit is validated (RXNE flag set, interrupt generated if RXNEIE=1) but the NE noise flag is set if, for both samplings, at least 2 out of the 3 sampled bits are at 0 (sampling on the 3rd, 5th and 7th bits and sampling on the 8th, 9th and 10th bits). If this condition is not met, the start detection aborts and the receiver returns to the idle state (no flag is set).</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129093604361.png" alt="image-20241129093604361" style="zoom:50%;">
<h2 id="shu-ju-zheng-de-jie-shou">数据帧的接收</h2>
<blockquote>
<p>During a USART reception, data shifts in least significant bit first through the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) between the internal bus and the<br>
received shift register.</p>
</blockquote>
<p>在一个USART数据帧接收过程中，数据以LSB低位优先模式传输到RX引脚。在这个场景下，USART_DR寄存器表现为位于内部总线和移位寄存器之间的接收缓冲区（RDR，Receive Data Register）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129094459395.png" alt="image-20241129094459395"></p>
<blockquote>
<p>Procedure:</p>
<ol>
<li>Enable the USART by writing the UE bit in USART_CR1 register to 1.</li>
<li>Program the M bit in USART_CR1 to define the word length.</li>
<li>Program the number of stop bits in USART_CR2.</li>
<li>Select DMA enable (DMAR) in USART_CR3 if multibuffer communication is to take<br>
place. Configure the DMA register as explained in multibuffer communication. STEP 3</li>
<li>Select the desired baud rate using the baud rate register USART_BRR</li>
<li>Set the RE bit USART_CR1. This enables the receiver which begins searching for a<br>
start bit.</li>
</ol>
</blockquote>
<p>接收程序如下：</p>
<ol>
<li>启用USART：设置USART_CR1中的UE为1</li>
<li>通过USART_CR1中的M设置字长</li>
<li>通过USART_CR2设置停止位占用的bit数量</li>
<li>多缓冲DMA相关</li>
<li>通过USART_BRR选择期望的波特率</li>
<li>通过USART_CR1的RE启用接收器</li>
</ol>
<blockquote>
<p>When a character is received<br>
 The RXNE bit is set. It indicates that the content of the shift register is transferred to the<br>
RDR. In other words, data has been received and can be read (as well as its<br>
associated error flags).<br>
 An interrupt is generated if the RXNEIE bit is set.<br>
 The error flags can be set if a frame error, noise or an overrun error has been detected<br>
during reception.<br>
 In multibuffer, RXNE is set after every byte received and is cleared by the DMA read to<br>
the Data register.<br>
 In single buffer mode, clearing the RXNE bit is performed by a software read to the<br>
USART_DR register. The RXNE flag can also be cleared by writing a zero to it. The<br>
RXNE bit must be cleared before the end of the reception of the next character to avoid<br>
an overrun error.</p>
</blockquote>
<p>当收到了一个数据帧后：</p>
<ul>
<li>RXNE会被置位：有数据被传输到了RDR中，可以通过DR来读取它</li>
<li>产生RXNEIE中断（如果使能了该中断）</li>
<li>如果接收过程中发生了帧错误、噪声错误、缓冲区溢出错误，状态寄存器USART_SR中的相关错误标志位会被设置</li>
<li>在多缓冲DMA中，RXNE在每个字节接收完成后由DMA的读DR操作来清除</li>
<li>单缓冲模式下，RXNE的清除可由软件的读DR操作来清除，也可以通过向RXNE写0来清除。<mark>RXNE必须要在下一个数据帧接收完成之前被清除，以避免产生缓冲区溢出错误</mark></li>
</ul>
<blockquote>
<p>[!IMPORTANT]</p>
<p>这里值得注意的是：如何确保在下一个数据帧之前清除RXNE？</p>
</blockquote>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129100957026.png" alt="image-20241129100957026" style="zoom:50%;">
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129101031527.png" alt="image-20241129101031527" style="zoom:50%;">
<h2 id="kong-xian-zheng-2">空闲帧</h2>
<blockquote>
<p>When an idle frame is detected, there is the same procedure as a data received character plus an interrupt if the IDLEIE bit is set.</p>
</blockquote>
<p>当检测到空闲帧（<mark>注意这里是指跟在数据帧后的第一个空闲帧</mark>）时，硬件会执行与接收到一个数据帧类似的流程（参考上一节）：</p>
<ol>
<li>设置USART_SR 寄存器的 <strong>IDLE（空闲帧检测）</strong> 标志位（接收到数据帧则是设置RXNE标志位）。</li>
<li>如果 <strong>IDLEIE 位=1</strong>（空闲帧中断使能），会触发中断。</li>
</ol>
<p>但是，<strong>空闲帧</strong>不会影响接收数据缓冲区的内容，因此不会产生 RXNE 标志，也不会修改接收数据寄存器（RDR）。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129193651750.png" alt="image-20241129193651750"></p>
<blockquote>
<p>It is cleared by a software sequence (an read to the USART_SR register followed by a read to the USART_DR register).</p>
</blockquote>
<p>这里值得注意的是，IDLE标志位可以通过如下软件操作序列来清除：</p>
<ol>
<li>读USART_SR寄存器（例如轮询IDLE标志位）</li>
<li>读USART_DR（例如轮询到IDLE被置后，执行一个USART_DR读到的空操作）</li>
</ol>
<blockquote>
<p>[!NOTE]</p>
<p>Note: The IDLE bit will not be set again until the RXNE bit has been set itself (i.e. a new idle<br>
line occurs).</p>
<p>这里需要注意的是，在RXNE被置位后（接收到了数据）如果检测到了空闲帧才会将IDLE置位，并且如果有多个空闲帧不会多次将IDLE置位，即每次接收数据后的第一个空闲帧（指示一次不定长数据传输已经完成）才会置位IDLE</p>
</blockquote>
<h1 id="bo-te-lu-she-zhi">波特率设置</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129105108831.png" alt="image-20241129105108831"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129102353746.png" alt="image-20241129102353746"></p>
<p>接收器和发送器的波特率由外设时钟f<sub>CK</sub>和可编程的USART分频参数USARTDIV来计算。</p>
<p>其中USARTDIV又可以通过波特率配置寄存器USART_BRR中的DIV_Mantissa（配置USARTDIV的整数部分）和DIV_Fraction  （配置USARTDIV的小数部分，通过DIV_Fraction/16来计算对应的小数）</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129102223806.png" alt="image-20241129102223806"></p>
<h1 id="xiao-yan-kong-zhi">校验控制</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128210319460.png" alt="image-20241128210319460"></p>
<blockquote>
<p>[!NOTE]</p>
<p>校验位是包含在字长里面的，作为字长的最后一个bit</p>
</blockquote>
<p>可以通过如下寄存器配置是否开启校验位，以及选择奇偶校验模式</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128210525491.png" alt="image-20241128210525491"></p>
<h1 id="lun-xun-fang-shi-shou-fa-dan-zi-jie-shi-jian">轮询方式收发单字节实践</h1>
<h2 id="yuan-li-tu">原理图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129103540732.png" alt="image-20241129103540732"></p>
<h2 id="shi-neng-shi-zhong">使能时钟</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129111334989.png" alt="image-20241129111334989"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129111749460.png" alt="image-20241129111749460"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// enable clock</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span>
RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_USART1EN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="gpio-pei-zhi">GPIO配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129104039053.png" alt="image-20241129104039053"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// GPIO CONFIG</span>
    <span class="token comment">// PA9 TX  alternate pp output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>   <span class="token comment">// output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>   <span class="token comment">// alternate pp</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    <span class="token comment">// PA10 RX alternate float input</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_0<span class="token punctuation">;</span>   <span class="token comment">// float input</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="afio-pei-zhi">AFIO配置</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129104211418.png" alt="image-20241129104211418"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129104116889.png" alt="image-20241129104116889"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129114655724.png" alt="image-20241129114655724"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// AFIO CONFIG</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_USART1_REMAP<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="usart-pei-zhi">USART配置</h2>
<h3 id="bo-te-lu-pei-zhi">波特率配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129104313401.png" alt="image-20241129104313401"></p>
<p>如果我们想得到115200的波特率，以72M外设时钟为例计算USARTDIV：<code>72000000/(16 * 115200) = 39.0625</code></p>
<p>因此整数部分可以配置为 <code>0x27</code>（39），小数部分可以配置为 <code>0x1</code>（1/16=0.625）</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// baud rate</span>
 USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Mantissa<span class="token punctuation">;</span>
 USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Fraction<span class="token punctuation">;</span>
 USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0x27</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进一步可以优化为：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">=</span> <span class="token number">0x271</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="usart-kong-zhi-qi-pei-zhi">USART控制器配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129105601999.png" alt="image-20241129105601999"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129110700834.png" alt="image-20241129110700834"></p>
<h3 id="shu-ju-zheng-xiang-guan">数据帧相关</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129110611145.png" alt="image-20241129110611145"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// data frame</span>
   USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_M<span class="token punctuation">;</span>   <span class="token comment">// 8 bit word length</span>
   USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_PCE<span class="token punctuation">;</span> <span class="token comment">// diable parity</span>
   USART1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR2_STOP<span class="token punctuation">;</span> <span class="token comment">// 1 stop bit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shi-neng-xiang-guan">使能相关</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129110403540.png" alt="image-20241129110403540"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// enable</span>
USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> <span class="token punctuation">(</span>USART_CR1_UE <span class="token operator">|</span> USART_CR1_RE <span class="token operator">|</span> USART_CR1_TE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="lun-xun-shou-fa">轮询收发</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until transmit buffer is empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until receive buffer is not empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wan-zheng-dai-ma">完整代码</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__UART_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__UART_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __UART_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// enable clock</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_USART1EN<span class="token punctuation">;</span>

    <span class="token comment">// GPIO CONFIG</span>
    <span class="token comment">// PA9 TX  alternate pp output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>   <span class="token comment">// output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>   <span class="token comment">// alternate pp</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    <span class="token comment">// PA10 RX alternate float input</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_0<span class="token punctuation">;</span>   <span class="token comment">// float input</span>

    <span class="token comment">// AFIO CONFIG</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_USART1_REMAP<span class="token punctuation">;</span>

    <span class="token comment">// USART CONFIG</span>
    <span class="token comment">// baud rate</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Mantissa<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Fraction<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0x27</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//USART1-&gt;BRR = 0x271;</span>
    <span class="token comment">// data frame</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_M<span class="token punctuation">;</span>   <span class="token comment">// 8 bit word length</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_PCE<span class="token punctuation">;</span> <span class="token comment">// diable parity</span>
    USART1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR2_STOP<span class="token punctuation">;</span> <span class="token comment">// 1 stop bit</span>
    <span class="token comment">// enable</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> <span class="token punctuation">(</span>USART_CR1_UE <span class="token operator">|</span> USART_CR1_RE <span class="token operator">|</span> USART_CR1_TE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until transmit buffer is empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until receive buffer is not empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="lun-xun-fang-shi-shou-fa-duo-zi-jie-shi-jian">轮询方式收发多字节实践</h1>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes<span class="token punctuation">,</span> u16 size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>u16 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">uart_send_byte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_receive_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes_buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token operator">*</span> sizebuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
                <span class="token operator">*</span>sizebuf <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        bytes_buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里既要通过轮询来检测RXNE从而实现多字节的读取，又要轮询IDLE来实现在检测到空闲帧后（发送方发送完了最后一个字节）终止轮询读取的逻辑。</p>
<blockquote>
<p>[!NOTE]</p>
<p>这里在检测到IDLE标志位（通过读USART1-&gt;SR）后，追加了一个USART1-&gt;DR读操作，这是为了遵循手册对于IDLE标志位描述中的规范：</p>
<p>It is cleared by a software sequence (an read to theUSART_SR register followed by a read to the USART_DR register).</p>
</blockquote>
<p>值得注意的是，<mark>轮询RXNE和IDLE应该配合使用</mark>，如下代码试图通过在每次从DR读取到一个字节后检测一次IDLE，如果IDLE刚好在这个 <code>if (USART1-&gt;SR &amp; USART_SR_IDLE) </code>执行后被置位，那么程序就会卡在第4行</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart_receive_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes_buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token operator">*</span> sizebuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        bytes_buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
            <span class="token operator">*</span>sizebuf <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>[!WARNING]</p>
<p>可以发现，对于硬件置位的标志位（例如RXNE、IDLE），应该不断轮询去检测，而不要期望在某个时机检测仅仅一次。</p>
<p>例如上述程序期望在收到最后一个字节后通过一次 <code>if</code>判断来检测IDLE，虽然对于接收最后一个字节而言，IDLE置位确实发生在 <code>bytes_buf[i++] = USART1-&gt;DR</code>之后，但是程序的执行速度是很快的，而空闲帧的检测需要硬件检测到一个帧长的所有bit全为1时才会将IDLE置1。因此上述程序中的 <code>if (USART1-&gt;SR &amp; USART_SR_IDLE)</code> 并不能在接收完最后一个字节后如期检测到IDLE被置位，接着又回到了 <code>while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0)</code>空转无法跳出。</p>
</blockquote>
<p>因此如下代码将RXNE和IDLE的轮询结合到了一起，在RXNE被置位时执行数据的读取 <code>bytes_buf[i++] = USART1-&gt;DR</code>，在IDLE被置位时执行函数的返回</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart_receive_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes_buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token operator">*</span> sizebuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
                <span class="token operator">*</span>sizebuf <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        bytes_buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="you-hua">优化</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until receive buffer is not empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 如果检测到了空闲帧则停止接收数据</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_receive_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes_buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token operator">*</span> sizebuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*     uint16_t i = 0;
    while (1) {
        while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0) {
            if (USART1-&gt;SR &amp; USART_SR_IDLE) {
                USART1-&gt;DR;
                *sizebuf = i;
                return;
            }
        }
        bytes_buf[i++] = USART1-&gt;DR;
    } */</span>
    <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果没有检测到空闲帧，则轮询接收数据</span>
        bytes_buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span> <span class="token comment">// 通过USART_SR读操作之后跟随一个USART_DR读来清除IDLE标志</span>
    <span class="token operator">*</span>sizebuf <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span> <span class="token comment">// uart_receive_byte返回的最后一个字节是因为空闲帧返回的无效数据</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="zai-kan-txe-tc-rxne-idel-qing-chu-luo-ji">再看TXE/TC、RXNE、IDEL清除逻辑</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129220628220.png" alt="image-20241129220628220"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129220926870.png" alt="image-20241129220926870"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129221419149.png" alt="image-20241129221419149"></p>
<blockquote>
<p>[!NOTE]</p>
<p>这里需要注意的是，在RXNE被置位后（接收到了数据）如果检测到了空闲帧才会将IDLE置位，并且如果有多个空闲帧不会多次将IDLE置位，即每次接收数据后的第一个空闲帧（指示一次不定长数据传输已经完成）才会置位IDLE</p>
</blockquote>
<h2 id="wan-zheng-dai-ma-1">完整代码</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// enable clock</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_USART1EN<span class="token punctuation">;</span>

    <span class="token comment">// GPIO CONFIG</span>
    <span class="token comment">// PA9 TX  alternate pp output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>   <span class="token comment">// output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>   <span class="token comment">// alternate pp</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    <span class="token comment">// PA10 RX alternate float input</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_0<span class="token punctuation">;</span>   <span class="token comment">// float input</span>

    <span class="token comment">// AFIO CONFIG</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_USART1_REMAP<span class="token punctuation">;</span>

    <span class="token comment">// USART CONFIG</span>
    <span class="token comment">// baud rate</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Mantissa<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Fraction<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0x27</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//USART1-&gt;BRR = 0x271;</span>
    <span class="token comment">// data frame</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_M<span class="token punctuation">;</span>   <span class="token comment">// 8 bit word length</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_PCE<span class="token punctuation">;</span>   <span class="token comment">// diable parity</span>
    USART1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR2_STOP<span class="token punctuation">;</span>   <span class="token comment">// 1 stop bit</span>
    <span class="token comment">// enable</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> <span class="token punctuation">(</span>USART_CR1_UE <span class="token operator">|</span> USART_CR1_RE <span class="token operator">|</span> USART_CR1_TE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until transmit buffer is empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until receive buffer is not empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 如果检测到了空闲帧则停止接收数据</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes<span class="token punctuation">,</span> u16 size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>u16 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">uart_send_byte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_receive_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes_buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token operator">*</span> sizebuf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*     uint16_t i = 0;
    while (1) {
        while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0) {
            if (USART1-&gt;SR &amp; USART_SR_IDLE) {
                USART1-&gt;DR;
                *sizebuf = i;
                return;
            }
        }
        bytes_buf[i++] = USART1-&gt;DR;
    } */</span>
    <span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果没有检测到空闲帧，则轮询接收数据</span>
        bytes_buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uart_receive_byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span> <span class="token comment">// 通过USART_SR读操作之后跟随一个USART_DR读来清除IDLE标志</span>
    <span class="token operator">*</span>sizebuf <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span> <span class="token comment">// uart_receive_byte返回的最后一个字节是因为空闲帧返回的无效数据</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="zhong-duan-fang-shi-jie-shou-dan-zi-jie-he-bian-chang-shu-ju">中断方式接收单字节和变长数据</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129223248999.png" alt="image-20241129223248999"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129223318399.png" alt="image-20241129223318399"></p>
<h2 id="shi-neng-zhong-duan">使能中断</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241129223405148.png" alt="image-20241129223405148"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// interrupt config</span>
   USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> USART_CR1_RXNEIE<span class="token punctuation">;</span>
   USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> USART_CR1_IDLEIE<span class="token punctuation">;</span>
   <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// only group priority</span>
   <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ding-yi-zhong-duan-chu-li-han-shu">定义中断处理函数</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

__weak <span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buffer<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span> <span class="token comment">// dummy read for clearing IDLE flag</span>
        <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="shi-yong-fang-zhong-xie-hui-diao-han-shu">使用方重写回调函数</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//uart_send_byte('a');</span>
    <span class="token class-name">uint8_t</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"hello world!\n"</span><span class="token punctuation">;</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wan-zheng-dai-ma-2">完整代码</h2>
<p><code>uart.h</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__UART_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__UART_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> u16 size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __UART_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>uart.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// enable clock</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_USART1EN<span class="token punctuation">;</span>

    <span class="token comment">// GPIO CONFIG</span>
    <span class="token comment">// PA9 TX  alternate pp output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>   <span class="token comment">// output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>   <span class="token comment">// alternate pp</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    <span class="token comment">// PA10 RX alternate float input</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_0<span class="token punctuation">;</span>   <span class="token comment">// float input</span>

    <span class="token comment">// AFIO CONFIG</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_USART1_REMAP<span class="token punctuation">;</span>

    <span class="token comment">// USART CONFIG</span>
    <span class="token comment">// baud rate</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Mantissa<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Fraction<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0x27</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//USART1-&gt;BRR = 0x271;</span>
    <span class="token comment">// data frame</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_M<span class="token punctuation">;</span>   <span class="token comment">// 8 bit word length</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_PCE<span class="token punctuation">;</span>   <span class="token comment">// diable parity</span>
    USART1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR2_STOP<span class="token punctuation">;</span>   <span class="token comment">// 1 stop bit</span>
    <span class="token comment">// enable</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> <span class="token punctuation">(</span>USART_CR1_UE <span class="token operator">|</span> USART_CR1_RE <span class="token operator">|</span> USART_CR1_TE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// interrupt config</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> USART_CR1_RXNEIE<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> USART_CR1_IDLEIE<span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// only group priority</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buffer<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span> <span class="token comment">// dummy read for clearing IDLE flag</span>
        <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until transmit buffer is empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes<span class="token punctuation">,</span> u16 size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>u16 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">uart_send_byte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//uart_send_byte('a');</span>
    <span class="token class-name">uint8_t</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"hello world!\n"</span><span class="token punctuation">;</span>
    <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="stm-32-cube-mx-hal-ku-shi-jian">STM32CubeMX/HAL库实践</h1>
<h2 id="lun-xun-fang-shi-shou-fa-ding-chang-shu-ju">轮询方式收发定长数据</h2>
<h3 id="cube-pei-zhi-qi-yong-usart-xiang-guan-de-gpio-hui-bei-zi-dong-pei-zhi">Cube配置启用USART，相关的GPIO会被自动配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130085637544.png" alt="image-20241130085637544"></p>
<h3 id="afio-zhong-ying-she-wen-ti">AFIO重映射问题</h3>
<p>需要注意的是，如果希望PB6/7作为TX/RX，可以直接点击图中的可视化引脚视图中的PB6选择USART1_TX，那么PA9/10就会被切换为PB6/7，并且自动在生成的代码中做好AFIO的remap配置</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130085714543.png" alt="image-20241130085714543"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130090020406.png" alt="image-20241130090020406"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130090037660.png" alt="image-20241130090037660"></p>
<p>同样的，再次点击PA9引脚选择USART1_TX则可以切换回PA9/10</p>
<h3 id="lun-xun-shou-fa-ding-chang-han-shu-diao-yong">轮询收发定长函数调用</h3>
<p><code>stm32f1xx_hal_uart.c</code></p>
<pre class="line-numbers language-none"><code class="language-none">*** Polling mode IO operation ***
=================================
[..]
  (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
  (+) Receive an amount of data in blocking mode using HAL_UART_Receive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>HAL_UART_Transmit</code>：轮询发送指定数量数据，需要指定超时时间（ms）</li>
<li><code>HAL_UART_Receive</code>：轮询接收指定数量的数据，需要指定超时时间（ms）</li>
<li><code>HAL_StatusTypeDef</code>：上述两个函数的返回值，如果成功则返回 <code>HAL_OK</code>，如果超时则返回 <code>HAL_TIMEOUT</code></li>
</ul>
<p>如下示例实现了不断接收8个数据并原样发送8个数据</p>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">int main(void) {
    ...

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_USART1_UART_Init();
    /* USER CODE BEGIN 2 */
    uint8_t* str = "hello world\n";
    HAL_UART_Transmit(&amp;huart1, str, strlen((char*)str), 10);

    uint8_t buffer[100] = { 0 };
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        if (HAL_UART_Receive(&amp;huart1, buffer, 8, 10) == HAL_OK) {
            HAL_UART_Transmit(&amp;huart1, buffer, 8, 10);
            /* code */
        }
        /* USER CODE END WHILE */
        
        if (HAL_UART_Receive(&amp;huart1, buffer, 8, 10) == HAL_OK) {
            HAL_UART_Transmit(&amp;huart1, buffer, 8, 10);
            /* code */
        }

        /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lun-xun-fang-shi-jie-shou-bian-chang-shu-ju">轮询方式接收变长数据</h2>
<p><code>stm32f1xx_hal_uart.c</code></p>
<pre class="line-numbers language-none"><code class="language-none">(+) Blocking mode: The reception is performed in polling mode, until either expected number of data is received,
   or till IDLE event occurs. Reception is handled only during function execution.
   When function exits, no data reception could occur. HAL status and number of actually received data elements,
   are returned by function after finishing transfer.
   
(#) Blocking mode API:
    (+) HAL_UARTEx_ReceiveToIdle()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>HAL_UARTEx_ReceiveToIdle</code>：轮询接收数据直到检测到空闲帧</p>
<ul>
<li><code>uint8_t *pData</code>：指定缓冲区的地址</li>
<li><code>uint16_t Size</code>：指定需要接收多少数量数据到缓冲区，通常可以设置为缓冲区的大小</li>
<li><code>uint16_t *RxLen</code>：检测到空闲帧时实际接收到的数据数量，调用方需要准备一个 <code>uint16_t</code>变量并将其地址通过该参数传入，函数会根据实际情况来设置该变量的值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint16_t</span> received_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_UARTEx_ReceiveToIdle</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>received_size<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> received_size<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* code */</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="zhong-duan-fang-shi-jie-shou-ding-chang-shu-ju">中断方式接收定长数据</h2>
<p><code>stm32f1xx_hal_uart.c</code></p>
<pre class="line-numbers language-none"><code class="language-none">*** Interrupt mode IO operation ***
    ===================================
    [..]
      (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
      (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
           add his own code by customization of function pointer HAL_UART_TxCpltCallback
      (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
      (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
           add his own code by customization of function pointer HAL_UART_RxCpltCallback
      (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer HAL_UART_ErrorCallback<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><code>HAL_UART_Receive_IT</code>：以中断方式接收指定数量的数据到接收缓冲区中（由用户定义），调用该函数不会阻塞当前程序</p>
</li>
<li>
<p><code>HAL_UART_RxCpltCallback</code>：接收完成回调，在接收了指定数量（底层通过RXNE中断逐个接收）数据并放到接收缓冲区中（由用户定义）后，该函数会被调用，我们可以通过重写改函数来处理接收到的数据</p>
</li>
</ul>
<blockquote>
<p>[!TIP]</p>
<p><code>stm32f1xx_hal_uart.c</code>提供了 <code>HAL_UART_RxCpltCallback</code>函数的弱定义形式（相当于提供了一个接口），用户可以重写该函数（去掉 <code>__weak</code>关键字）以实现自定义逻辑。</p>
<p>该设计和钩子函数是一脉相承的。</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  Rx Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</span>
__weak <span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* Prevent unused argument(s) compilation warning */</span>
  <span class="token function">UNUSED</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 0 */</span>
<span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint16_t</span> fixed_data_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> is_over <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>huart <span class="token operator">==</span> <span class="token operator">&amp;</span>huart1<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    is_over <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 0 */</span>

<span class="token comment">/**
 * @brief  The application entry point.
 * @retval int
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token comment">/* USER CODE BEGIN 1 */</span>

  <span class="token comment">/* USER CODE END 1 */</span>

  <span class="token comment">/* MCU Configuration--------------------------------------------------------*/</span>

  <span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN Init */</span>

  <span class="token comment">/* USER CODE END Init */</span>

  <span class="token comment">/* Configure the system clock */</span>
  <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN SysInit */</span>

  <span class="token comment">/* USER CODE END SysInit */</span>

  <span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>

  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> fixed_data_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_over<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> fixed_data_size<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      is_over <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>[!NOTE]</p>
<p>由于是接收定长数据，如果发送方发送的数据不等于既定的<code>fixed_data_size</code>，那么该程序的echo回传逻辑会有问题</p>
</blockquote>
<h2 id="zhong-duan-fang-shi-jie-shou-bian-chang-shu-ju">中断方式接收变长数据</h2>
<p><code>stm32f1xx_hal_uart.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> Non<span class="token operator">-</span>Blocking mode<span class="token operator">:</span> The reception is performed using Interrupts or DMA<span class="token punctuation">.</span>
       These API's <span class="token keyword">return</span> the HAL status<span class="token punctuation">.</span>
       The end of the data processing will be indicated through the
       dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode<span class="token punctuation">.</span>
       The <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> user callback will be executed during Receive process
       The <span class="token function">HAL_UART_ErrorCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>user callback will be executed when a reception error is detected<span class="token punctuation">.</span>

<span class="token punctuation">(</span>#<span class="token punctuation">)</span> Non<span class="token operator">-</span>Blocking mode API with Interrupt<span class="token operator">:</span>
    <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>HAL_UARTEx_ReceiveToIdle_IT</code>：以中断方式接收变长数据，接收数据到缓冲区（由用户定义）直到检测到空闲帧，，该函数不会阻塞当前程序</p>
<ul>
<li><code>uint8_t *pData</code>：接收缓冲区</li>
<li><code>uint16_t Size</code>：需要接收的字结束，通常可以给定为缓冲区的大小</li>
</ul>
<p><code>HAL_UARTEx_RxEventCallback</code>：接收变长数据完成回调，可以通过入参 <code>Size</code>获取实际接收到的数据数量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  Reception Event Callback (Rx event notification called after use of advanced reception service).
  * @param  huart UART handle
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */</span>
__weak <span class="token keyword">void</span> <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* Prevent unused argument(s) compilation warning */</span>
  <span class="token function">UNUSED</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">UNUSED</span><span class="token punctuation">(</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN 0 */</span>
<span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> is_over <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> received_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>huart <span class="token operator">==</span> <span class="token operator">&amp;</span>huart1<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    is_over <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    received_size <span class="token operator">=</span> Size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 0 */</span>

<span class="token comment">/**
 * @brief  The application entry point.
 * @retval int
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token comment">/* USER CODE BEGIN 1 */</span>

  <span class="token comment">/* USER CODE END 1 */</span>

  <span class="token comment">/* MCU Configuration--------------------------------------------------------*/</span>

  <span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN Init */</span>

  <span class="token comment">/* USER CODE END Init */</span>

  <span class="token comment">/* Configure the system clock */</span>
  <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN SysInit */</span>

  <span class="token comment">/* USER CODE END SysInit */</span>

  <span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>

  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">HAL_UARTEx_ReceiveToIdle_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_over<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> received_size<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      is_over <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="cube-sheng-cheng-dai-ma-zi-dong-pei-zhi-fen-xi">Cube生成代码自动配置分析</h2>
<p><code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>MX_GPIO_Init</code>开启了GPIO时钟</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token comment">/* GPIO Ports Clock Enable */</span>
  <span class="token function">__HAL_RCC_GPIOC_CLK_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__HAL_RCC_GPIOA_CLK_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>MX_USART1_UART_Init</code>将UART相关参数保存到了 <code>huart1</code>结构体中</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">UART_HandleTypeDef huart1<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token comment">/* USER CODE BEGIN USART1_Init 0 */</span>

  <span class="token comment">/* USER CODE END USART1_Init 0 */</span>

  <span class="token comment">/* USER CODE BEGIN USART1_Init 1 */</span>

  <span class="token comment">/* USER CODE END USART1_Init 1 */</span>
  huart1<span class="token punctuation">.</span>Instance <span class="token operator">=</span> USART1<span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>BaudRate <span class="token operator">=</span> <span class="token number">115200</span><span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>WordLength <span class="token operator">=</span> UART_WORDLENGTH_8B<span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>StopBits <span class="token operator">=</span> UART_STOPBITS_1<span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>Parity <span class="token operator">=</span> UART_PARITY_NONE<span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>Mode <span class="token operator">=</span> UART_MODE_TX_RX<span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>HwFlowCtl <span class="token operator">=</span> UART_HWCONTROL_NONE<span class="token punctuation">;</span>
  huart1<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>OverSampling <span class="token operator">=</span> UART_OVERSAMPLING_16<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_UART_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">)</span> <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE BEGIN USART1_Init 2 */</span>

  <span class="token comment">/* USER CODE END USART1_Init 2 */</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>HAL_UART_Init</code>主要关注一下两个函数的调用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">HAL_StatusTypeDef <span class="token function">HAL_UART_Init</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">HAL_UART_MspInit</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UART_SetConfig</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>usart.c</code>重写了 <code>HAL_UART_MspInit</code>函数</p>
<ul>
<li>对USART1依赖的GPIO进行配置</li>
<li>使能USART1中断</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_UART_MspInit</span><span class="token punctuation">(</span>UART_HandleTypeDef<span class="token operator">*</span> uartHandle<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>uartHandle<span class="token operator">-&gt;</span>Instance<span class="token operator">==</span>USART1<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN USART1_MspInit 0 */</span>

  <span class="token comment">/* USER CODE END USART1_MspInit 0 */</span>
    <span class="token comment">/* USART1 clock enable */</span>
    <span class="token function">__HAL_RCC_USART1_CLK_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">__HAL_RCC_GPIOA_CLK_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**USART1 GPIO Configuration
    PA9     ------&gt; USART1_TX
    PA10     ------&gt; USART1_RX
    */</span>
    GPIO_InitStruct<span class="token punctuation">.</span>Pin <span class="token operator">=</span> GPIO_PIN_9<span class="token punctuation">;</span>
    GPIO_InitStruct<span class="token punctuation">.</span>Mode <span class="token operator">=</span> GPIO_MODE_AF_PP<span class="token punctuation">;</span>
    GPIO_InitStruct<span class="token punctuation">.</span>Speed <span class="token operator">=</span> GPIO_SPEED_FREQ_HIGH<span class="token punctuation">;</span>
    <span class="token function">HAL_GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIO_InitStruct<span class="token punctuation">.</span>Pin <span class="token operator">=</span> GPIO_PIN_10<span class="token punctuation">;</span>
    GPIO_InitStruct<span class="token punctuation">.</span>Mode <span class="token operator">=</span> GPIO_MODE_INPUT<span class="token punctuation">;</span>
    GPIO_InitStruct<span class="token punctuation">.</span>Pull <span class="token operator">=</span> GPIO_NOPULL<span class="token punctuation">;</span>
    <span class="token function">HAL_GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* USART1 interrupt Init */</span>
    <span class="token function">HAL_NVIC_SetPriority</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_NVIC_EnableIRQ</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN USART1_MspInit 1 */</span>

  <span class="token comment">/* USER CODE END USART1_MspInit 1 */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="printf-zhong-ding-xiang">printf重定向</h1>
<h2 id="zhong-xie-fputc">重写fputc</h2>
<p><code>printf</code>是 <code>D:\Keil_v5\ARM\ARMCC\include\stdio.h</code>中定义的函数，底层会循环调用 <code>fputc</code>将要发送的字符串逐个字符地写入指定的文件流：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> _ARMABI <span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token comment">/*c*/</span><span class="token punctuation">,</span> FILE <span class="token operator">*</span> <span class="token comment">/*stream*/</span><span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__nonnull__</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">/*
    * writes the character specified by c (converted to an unsigned char) to
    * the output stream pointed to by stream, at the position indicated by the
    * asociated file position indicator (if defined), and advances the
    * indicator appropriately. If the file position indicator is not defined,
    * the character is appended to the output stream.
    * Returns: the character written. If a write error occurs, the error
    *          indicator is set and fputc returns EOF.
    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以重写该函数以实现将字符通过UART发送的逻辑，这样串口调式工具就能显示 <code>printf</code>输出的调试信息了。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token comment">// printf retarget</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lian-jie-printf">链接printf</h2>
<p>需要注意的是，嵌入式要有平台的概念，基于Linux/Windows的C程序中的 <code>printf</code>需要链接GCC/MinGW中的<code>glibc</code>库；而在MDK嵌入式开发场景，下我们可以链接MDK提供的 <code>Micro LIB</code>，这样在链接阶段才能找到 <code>printf</code>所在的目标文件。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241130121901654.png" alt="image-20241130121901654"></p>
<h2 id="wan-zheng-dai-ma-3">完整代码</h2>
<p><code>uart.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// enable clock</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_AFIOEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_USART1EN<span class="token punctuation">;</span>

    <span class="token comment">// GPIO CONFIG</span>
    <span class="token comment">// PA9 TX  alternate pp output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE9<span class="token punctuation">;</span>   <span class="token comment">// output</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF9_1<span class="token punctuation">;</span>   <span class="token comment">// alternate pp</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF9_0<span class="token punctuation">;</span>
    <span class="token comment">// PA10 RX alternate float input</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_MODE10<span class="token punctuation">;</span>   <span class="token comment">// input mode</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF10_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_CNF10_0<span class="token punctuation">;</span>   <span class="token comment">// float input</span>

    <span class="token comment">// AFIO CONFIG</span>
    AFIO<span class="token operator">-&gt;</span>MAPR <span class="token operator">&amp;=</span> <span class="token operator">~</span>AFIO_MAPR_USART1_REMAP<span class="token punctuation">;</span>

    <span class="token comment">// USART CONFIG</span>
    <span class="token comment">// baud rate</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Mantissa<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_BRR_DIV_Fraction<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>BRR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0x27</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//USART1-&gt;BRR = 0x271;</span>
    <span class="token comment">// data frame</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_M<span class="token punctuation">;</span>   <span class="token comment">// 8 bit word length</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR1_PCE<span class="token punctuation">;</span>   <span class="token comment">// diable parity</span>
    USART1<span class="token operator">-&gt;</span>CR2 <span class="token operator">&amp;=</span> <span class="token operator">~</span>USART_CR2_STOP<span class="token punctuation">;</span>   <span class="token comment">// 1 stop bit</span>
    <span class="token comment">// enable</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> <span class="token punctuation">(</span>USART_CR1_UE <span class="token operator">|</span> USART_CR1_RE <span class="token operator">|</span> USART_CR1_TE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// interrupt config</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> USART_CR1_RXNEIE<span class="token punctuation">;</span>
    USART1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> USART_CR1_IDLEIE<span class="token punctuation">;</span>
    <span class="token function">NVIC_SetPriorityGrouping</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// only group priority</span>
    <span class="token function">NVIC_SetPriority</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_EnableIRQ</span><span class="token punctuation">(</span>USART1_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_RXNE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buffer<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        USART1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span> <span class="token comment">// dummy read for clearing IDLE flag</span>
        <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// waits until transmit buffer is empty</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> USART_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    USART1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> byte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart_send_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes<span class="token punctuation">,</span> u16 size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>u16 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">uart_send_byte</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// printf retarget</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"this is a debug info. num = %d"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ri-zhi-da-yin-gong-ju-ge-shi-hua-gao-liang-xing-hao">日志打印工具（格式化/高亮/行号）</h2>
<h3 id="logger-c">logger.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>

<span class="token keyword">void</span> <span class="token function">log_dump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> ch<span class="token punctuation">,</span> cl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
        cl <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> ch <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            ch <span class="token operator">+=</span> <span class="token char">'A'</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> cl <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            cl <span class="token operator">+=</span> <span class="token char">'A'</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token comment">//    printf("\r\n");</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="logger-h">logger.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LOGGER_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOGGER_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USE_LOG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_LOG</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USE_DUMP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_DUMP</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USE_BLOCK</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_BLOCK</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ONLY_FILENAME</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">strrchr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> </span><span class="token char">'\\'</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> </span><span class="token char">'\\'</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> x<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_BLOCK <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCK</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                              </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">do</span>                                             </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">{</span>                                              </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n[BLOCK %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span>               </span><span class="token punctuation">\</span>
			   <span class="token expression"><span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                  </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">",按任意键继续"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                   </span><span class="token punctuation">\</span>
		<span class="token expression">block_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token keyword">while</span> <span class="token punctuation">(</span>block_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    </span><span class="token punctuation">\</span>
			<span class="token expression"><span class="token punctuation">;</span>                                      </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                            </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCK</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_LOG <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                          </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">do</span>                                             </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">{</span>                                              </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[1;36m\r\n[DEBUG %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span>     </span><span class="token punctuation">\</span>
			   <span class="token expression"><span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                  </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                      </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_INFO</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                 </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">do</span>                                   </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">{</span>                                    </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[0;32m\r\n[INFO] "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>            </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                          </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">do</span>                                             </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">{</span>                                              </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[0;31m\r\n[ERROR %s:%d] "</span><span class="token expression"><span class="token punctuation">,</span>     </span><span class="token punctuation">\</span>
			   <span class="token expression"><span class="token function">ONLY_FILENAME</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                  </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                      </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ASSERT</span><span class="token expression"><span class="token punctuation">(</span>cond<span class="token punctuation">)</span>                                                                                                         </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">do</span>                                                                                                                           </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">{</span>                                                                                                                            </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                                                             </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token punctuation">{</span>                                                                                                                        </span><span class="token punctuation">\</span>
			<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n[ASSERT] File=[%s],Line=[%ld] Failed to vertify thc condition [\"%s\"]\r\n"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> #cond<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token punctuation">}</span>                                                                                                                        </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_INFO</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR3</span><span class="token expression"><span class="token punctuation">(</span>cond<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR4</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ASSERT</span><span class="token expression"><span class="token punctuation">(</span>cond<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_DUMP <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DUMP</span><span class="token expression"><span class="token punctuation">(</span>info<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">do</span>                                   </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">{</span>                                    </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\033[1;36m\r\n[DUMP] "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>     </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>              </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">log_dump</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>             </span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\33[0m\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>            </span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

	<span class="token keyword">void</span> <span class="token function">log_dump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DUMP</span><span class="token expression"><span class="token punctuation">(</span>info<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* LOGGER_H */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>UART</tag>
        <tag>串口</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之美</title>
    <url>/2024/11/26/23674.html</url>
    <content><![CDATA[<h1 id="chun-bian-cheng-ti">纯编程题</h1>
<h1 id="zhao-gui-lu-ti">找规律题</h1>
<h1 id="lian-biao">链表</h1>
<h1 id="zhan-he-dui-lie">栈和队列</h1>
<h1 id="di-gui-he-fen-zhi">递归和分治</h1>
<h1 id="pai-xu">排序</h1>
<h1 id="er-fen-cha-zhao">二分查找</h1>
<h1 id="ha-xi">哈希</h1>
<h1 id="er-cha-shu">二叉树</h1>
<h2 id="qian-zhong-hou-xu-bian-li-dfs">前中后序遍历（DFS）</h2>
<h3 id="di-gui-shi-xian">递归实现</h3>
<h3 id="fei-di-gui-shi-xian">※非递归实现</h3>
<h4 id="a-href-https-leetcode-cn-problems-binary-tree-preorder-traversal-144-er-cha-shu-de-qian-xu-bian-li-a"><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">/**
 * Note: The returned array must be malloced, assume caller calls free().
 */</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_STACK_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">,</span>
    RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">,</span>
    SUBTREE_PROCESSED
<span class="token punctuation">}</span> TraverseState<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node<span class="token punctuation">;</span>
    TraverseState state<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Frame<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Frame<span class="token operator">*</span> frames<span class="token punctuation">[</span>MAX_STACK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Stack<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">,</span> Frame<span class="token operator">*</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> MAX_STACK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token operator">-&gt;</span>frames<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> MAX_STACK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">--</span>stack<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isEmpty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

Frame<span class="token operator">*</span> <span class="token function">peek</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>frames<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221194944322.png" alt="image-20241221194944322" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pushNode</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Frame<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Frame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">;</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_STACK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Stack<span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Frame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>state <span class="token operator">==</span> LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            frame<span class="token operator">-&gt;</span>state <span class="token operator">=</span> RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>state <span class="token operator">==</span> RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            frame<span class="token operator">-&gt;</span>state <span class="token operator">=</span> SUBTREE_PROCESSED<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="a-href-https-leetcode-cn-problems-binary-tree-inorder-traversal-94-er-cha-shu-de-zhong-xu-bian-li-a"><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h4>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221195037215.png" alt="image-20241221195037215" style="zoom: 50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pushNode</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Frame<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Frame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">;</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_STACK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Stack<span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Frame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>state <span class="token operator">==</span> LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            frame<span class="token operator">-&gt;</span>state <span class="token operator">=</span> RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>state <span class="token operator">==</span> RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            frame<span class="token operator">-&gt;</span>state <span class="token operator">=</span> SUBTREE_PROCESSED<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="a-href-https-leetcode-cn-problems-binary-tree-postorder-traversal-145-er-cha-shu-de-hou-xu-bian-li-a"><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h4>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221195106482.png" alt="image-20241221195106482" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pushNode</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Frame<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Frame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">;</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_STACK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Stack<span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Frame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>state <span class="token operator">==</span> LEFT_SUBTREE_UNPROCESSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            frame<span class="token operator">-&gt;</span>state <span class="token operator">=</span> RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>state <span class="token operator">==</span> RIGHT_SUBTREE_UNPROCESSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pushNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            frame<span class="token operator">-&gt;</span>state <span class="token operator">=</span> SUBTREE_PROCESSED<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="a-href-https-leetcode-cn-problems-n-ary-tree-preorder-traversal-589-n-cha-shu-de-qian-xu-bian-li-a"><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/">589. N 叉树的前序遍历</a></h4>
<h4 id="a-href-https-leetcode-cn-problems-n-ary-tree-postorder-traversal-590-n-cha-shu-de-hou-xu-bian-li-a"><a href="https://leetcode.cn/problems/n-ary-tree-postorder-traversal/">590. N 叉树的后序遍历</a></h4>
<h2 id="an-ceng-bian-li-bfs">按层遍历（BFS）</h2>
<h4 id="a-href-https-leetcode-cn-problems-binary-tree-level-order-traversal-102-er-cha-shu-de-ceng-xu-bian-li-a"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241128141110383.png" alt="image-20241128141110383"></p>
<h5 id="fang-fa-yi-you-size-lai-zuo-mei-yi-ceng-de-fen-ge">🌟方法一：由size来做每一层的分隔</h5>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221195128656.png" alt="image-20241221195128656"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> queue<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// enqueue root</span>

    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>levelSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>tail <span class="token operator">-</span> head <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        levelSizes<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> tail <span class="token operator">-</span> head<span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> levelSizes<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> levelSizes<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> queue<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// dequeue</span>
            ans<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        level<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span>returnSize <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> levelSizes<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="fang-fa-er-ji-lu-ceng-hao">方法二：记录层号</h5>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdbool.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../tree.h"</span></span>
<span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> TreeNode_t<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">_ListNode</span> <span class="token punctuation">{</span>
    TreeNode_t <span class="token operator">*</span>treeNode<span class="token punctuation">;</span>
    <span class="token keyword">int</span> level<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_ListNode</span> ListNode_t<span class="token punctuation">;</span>


<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ListNode_t<span class="token operator">*</span> head<span class="token punctuation">;</span>
    ListNode_t<span class="token operator">*</span> tail<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>

Queue<span class="token operator">*</span> <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ListNode_t<span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>treeNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>level <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    Queue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>head <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> queue<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">offer</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">,</span> TreeNode_t<span class="token operator">*</span> treeNode<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ListNode_t<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>treeNode <span class="token operator">=</span> treeNode<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    queue<span class="token operator">-&gt;</span>tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ListNode_t<span class="token operator">*</span> <span class="token function">poll</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ListNode_t <span class="token operator">*</span>node <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221195207127.png" alt="image-20241221195207127"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>levelSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> levelSizes<span class="token punctuation">;</span>

    Queue<span class="token operator">*</span> queue <span class="token operator">=</span> <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">offer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>level <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 出队元素</span>
        ListNode_t <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果元素所在层级不等于当前要收集的层级，将之前已收集的层级保存到结果中</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>level <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> level<span class="token punctuation">;</span>
            levelSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 记录这一层的节点数量</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 开始下一层级的收集</span>
            level <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        TreeNode_t <span class="token operator">*</span>treeNode <span class="token operator">=</span> node<span class="token operator">-&gt;</span>treeNode<span class="token punctuation">;</span>
        <span class="token comment">// 收集数值</span>
        level<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> treeNode<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token comment">// 将子节点入队</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>treeNode<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">offer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> treeNode<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>treeNode<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">offer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> treeNode<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> level<span class="token punctuation">;</span>
    levelSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 记录这一层的节点数量</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="fang-fa-san-you-null-lai-zuo-mei-ceng-de-fen-ge">方法三：由null来做每层的分隔</h5>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>levelSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> queue<span class="token punctuation">[</span><span class="token number">4000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// enqueue root</span>
    queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// enqueue level separator</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>levelVals <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tail <span class="token operator">-</span> head <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> queue<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            levelVals<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            levelSizes<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>  <span class="token comment">// record level size</span>
            ans<span class="token punctuation">[</span>level<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> levelVals<span class="token punctuation">;</span>   <span class="token comment">// record level values</span>
            levelVals <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>tail <span class="token operator">-</span> head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// store next level</span>
            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// index of next level</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tail <span class="token operator">&gt;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// separator for next level</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span>returnSize <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> levelSizes<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="di-gui-jie-fa">递归解法</h5>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221164200272.png" alt="image-20241221164200272"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 标准DFS遍历二叉树</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token comment">// 前序遍历</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> level<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化收集当前层节点的集合</span>
        ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-com-problems-cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof-jian-zhi-offer-32-iii-cong-shang-dao-xia-da-yin-er-cha-shu-iii-a-zhi-zi-xing"><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a>（之字形）</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">decorateRecord</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token operator">*</span>q1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token operator">*</span>q2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top1<span class="token punctuation">,</span> top2<span class="token punctuation">;</span>
    top1 <span class="token operator">=</span> top2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>levelSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bool reverse <span class="token operator">=</span> false<span class="token punctuation">;</span>

    q1<span class="token punctuation">[</span>top1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>top1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token operator">*</span>arr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> top1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> q1<span class="token punctuation">[</span><span class="token operator">--</span>top1<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> q2<span class="token punctuation">[</span>top2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> q2<span class="token punctuation">[</span>top2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> q2<span class="token punctuation">[</span>top2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> q2<span class="token punctuation">[</span>top2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        reverse <span class="token operator">=</span> <span class="token operator">!</span>reverse<span class="token punctuation">;</span>
        levelSizes<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>
        level<span class="token operator">++</span><span class="token punctuation">;</span>
        
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> q1<span class="token punctuation">;</span>
        q1 <span class="token operator">=</span> q2<span class="token punctuation">;</span>
        q2 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmp2 <span class="token operator">=</span> top1<span class="token punctuation">;</span>
        top1 <span class="token operator">=</span> top2<span class="token punctuation">;</span>
        top2 <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">free</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> levelSizes<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-com-problems-find-bottom-left-tree-value-513-zhao-shu-zuo-xia-jiao-de-zhi-a"><a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></h3>
<p>找出该二叉树的 <strong>最底层 最左边</strong> 节点的值</p>
<ul>
<li>从上到下按层遍历</li>
<li>扩展左右子树时，先右后左</li>
<li>如此，遍历到的最后一个一个节点就是“最底层、最左边”</li>
</ul>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221164135012.png" alt="image-20241221164135012" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>queue<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">[</span><span class="token operator">++</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token operator">++</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token operator">++</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="er-cha-shu-shang-de-di-gui">二叉树上的递归</h2>
<h3 id="a-href-https-leetcode-cn-problems-maximum-depth-of-binary-tree-104-er-cha-shu-de-zui-da-shen-du-a"><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221162533674.png" alt="image-20241221162533674" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">fmax</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-maximum-depth-of-n-ary-tree-559-n-cha-shu-de-zui-da-shen-du-a"><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221162554205.png" alt="image-20241221162554205" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     int numChildren;
 *     struct Node** children;
 * };
 */</span>

<span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> maxChildDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>numChildren<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> childDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxChildDepth <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>childDepth<span class="token punctuation">,</span> maxChildDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxChildDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-balanced-binary-tree-110-ping-heng-er-cha-shu-a"><a href="https://leetcode.cn/problems/balanced-binary-tree/">110. 平衡二叉树</a></h3>
<blockquote>
<p>在《递归求解树的高度》算法基础上</p>
<ul>
<li>通过左右子树高度计算每个节点高度时，可顺便判断每个节点的左右子树高度是否超过1</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221202149543.png" alt="image-20241221202149543"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node<span class="token punctuation">,</span> bool <span class="token operator">*</span>balanced<span class="token punctuation">)</span><span class="token punctuation">;</span>

bool <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bool balanced <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>balanced<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> balanced<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 平衡二叉树：所有节点的左右子树的高度相差不超过1</span>
<span class="token comment">// 如果左右子树分别都是平衡二叉树，无法推出根节点是平衡二叉树，因为左右子树高度差不确定</span>
<span class="token comment">// 将问题转换为递归求解树高度，求每个节点的树高度时需要知道左右子树的高度，这时可以顺便判断该节点是否平衡</span>
<span class="token comment">// 先写出递归求解树高度的模板，再添加判断平衡的逻辑</span>
<span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node<span class="token punctuation">,</span> bool <span class="token operator">*</span>balanced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> lh <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> balanced<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>balanced <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
    <span class="token keyword">int</span> rh <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> balanced<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token comment">// 知道左右子树高度后，顺便判断一下平衡</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>lh <span class="token operator">-</span> rh<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span>balanced <span class="token operator">=</span> false<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>lh<span class="token punctuation">,</span> rh<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-merge-two-binary-trees-617-he-bing-er-cha-shu-a"><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221164107805.png" alt="image-20241221164107805"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 4. 递归终止条件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> root2 <span class="token operator">:</span> root1<span class="token punctuation">;</span>
    <span class="token comment">// 1. 假设左子树已经合并</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> root2<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 假设右子树已经合并</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root2<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 合并根节点</span>
    root1<span class="token operator">-&gt;</span>val <span class="token operator">=</span> root1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> root2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    root1<span class="token operator">-&gt;</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
    root1<span class="token operator">-&gt;</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token keyword">return</span> root1<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-invert-binary-tree-226-fan-zhuan-er-cha-shu-a"><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221164551015.png" alt="image-20241221164551015" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 4. 递归终止条件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 假设左子树已经被翻转</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 假设右子树已经被翻转</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 翻转当前节点的左右子树</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-symmetric-tree-101-dui-cheng-er-cha-shu-a">※<a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></h3>
<blockquote>
<p>判断一个二叉树是否镜像对称 =&gt; 判断两个二叉树否镜像对称（去掉根节点，考虑其左右子树A、B）</p>
<ul>
<li>A.left 与 B.right 是否对称</li>
<li>A.right 与 B.left 是否对称</li>
</ul>
<p>递归理解：</p>
<ul>
<li>遍历A：左中右</li>
<li>遍历B：右中左</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221171214602.png" alt="image-20241221171214602"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3. 两个树镜像的前提条件 根节点相同</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> p<span class="token operator">-&gt;</span>val <span class="token operator">!=</span> q<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> 
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token comment">// 1. 假设已经知道p的左子树和q的右子树是否为镜像</span>
    <span class="token comment">// 2. 假设已经知道p的右子树和q的左子树是否为镜像</span>
    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断左右子树是否镜像</span>
    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-validate-binary-search-tree-98-yan-zheng-er-cha-sou-suo-shu-a">※<a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h3>
<h4 id="fang-fa-yi-dfs-guo-cheng-zhong-shou-ji-zi-shu-de-zui-zhi">方法一：DFS过程中收集子树的最值</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221213916549.png" alt="image-20241221213916549"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Info<span class="token punctuation">;</span>

Info NULL_INFO <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

bool result<span class="token punctuation">;</span>

Info <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Info info <span class="token operator">=</span> <span class="token punctuation">{</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 当前树的min,max默认为root.val</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 左子树不为空才遍历，不然返回的Info没有意义</span>
        Info left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token keyword">return</span> NULL_INFO<span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>max <span class="token operator">&gt;=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token keyword">return</span> NULL_INFO<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>min <span class="token operator">&lt;</span> info<span class="token punctuation">.</span>min<span class="token punctuation">)</span> info<span class="token punctuation">.</span>min <span class="token operator">=</span> left<span class="token punctuation">.</span>min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Info right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token keyword">return</span> NULL_INFO<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>min <span class="token operator">&lt;=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token keyword">return</span> NULL_INFO<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>max <span class="token operator">&gt;</span> info<span class="token punctuation">.</span>max<span class="token punctuation">)</span> info<span class="token punctuation">.</span>max <span class="token operator">=</span> right<span class="token punctuation">.</span>max<span class="token punctuation">;</span>
        <span class="token keyword">return</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> info<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    result <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="fang-fa-er-dfs-guo-cheng-zhong-pan-duan-zi-shu-jie-dian-zhi-shi-fou-man-zu-kai-qu-jian">方法二：DFS过程中判断子树节点值是否满足开区间</h4>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221210731008.png" alt="image-20241221210731008"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">long</span> min<span class="token punctuation">,</span> <span class="token keyword">long</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token comment">// 检查根节点是否在(min, max)中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">&lt;=</span> min <span class="token operator">||</span> root<span class="token operator">-&gt;</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token comment">// 检查左子树是否满足(min, root-&gt;val)、右子树是否满足(root-&gt;val, max)</span>
    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果知道左子树、右子树是BST，也无法推到当前根节点是否为BST</span>
    <span class="token comment">// 因此在遍历树的过程中要顺带验证左子树节点是否都小于根节点、右子树节点是否都大于根节点</span>
    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="fang-fa-san-yan-zheng-zhong-xu-bian-li-jie-guo-shi-fou-sheng-xu">方法三：验证中序遍历结果是否升序</h4>
<p>中序遍历为有序序列 &lt;=&gt; 二叉树为有效BST</p>
<h2 id="er-cha-cha-zhao-shu">二叉查找树</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221182459445.png" alt="image-20241221182459445"></p>
<h3 id="a-href-https-leetcode-cn-problems-kth-smallest-element-in-a-bst-230-er-cha-sou-suo-shu-zhong-di-k-xiao-de-yuan-su-a"><a href="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/">230. 二叉搜索树中第 K 小的元素</a></h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221201329530.png" alt="image-20241221201329530"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">// BST的前序遍历序列为递增的有序序列，在遍历过程中，每访问一个节点就更新计数值便可找到第N小的节点</span>
<span class="token comment">// 举一反三：找第K大的节点，按照右、中、左的顺序遍历即可</span>
<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> k<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>target <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> k<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof-lcr-174-xun-zhao-er-cha-sou-suo-shu-zhong-de-mu-biao-jie-dian-a"><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">LCR 174. 寻找二叉搜索树中的目标节点</a></h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221201444364.png" alt="image-20241221201444364" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>

<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>cnt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>cnt<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>target <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
    <span class="token punctuation">}</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">findTargetNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> target<span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cnt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-convert-bst-to-greater-tree-538-ba-er-cha-sou-suo-shu-zhuan-huan-wei-lei-jia-shu-a"><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538. 把二叉搜索树转换为累加树</a></h3>
<img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221191917650.png" alt="image-20241221191917650" style="zoom:50%;">
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>sum <span class="token operator">+=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token operator">*</span>sum<span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">convertBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-problems-successor-lcci-mian-shi-ti-04-06-hou-ji-zhe-a"><a href="https://leetcode.cn/problems/successor-lcci/">面试题 04.06. 后继者</a></h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241221201807862.png" alt="image-20241221201807862"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>

<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>target <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>target <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> p<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>target <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝</span>
    <span class="token punctuation">}</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">inorderSuccessor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> target <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lca-zui-jin-gong-gong-zu-xian">LCA最近公共祖先</h2>
<h3 id="a-href-https-leetcode-cn-com-problems-lowest-common-ancestor-of-a-binary-tree-236-er-cha-shu-de-zui-jin-gong-gong-zu-xian-a"><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h3>
<blockquote>
<p>节点p和q最近公共祖先x节点的特征：</p>
<ol>
<li>p和q不是互为祖孙关系时：p、q分别分布在x的不同子树上</li>
<li>p和q互为祖孙关系时：x为p和q中的祖先节点</li>
</ol>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241222213439554.png" alt="image-20241222213439554"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> target<span class="token punctuation">;</span>
<span class="token comment">// dfs过程中记录树中包含p/q的数量, 返回值：树中包含p/q的数量</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//剪枝</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 左右子树分别有一个p/q =&gt; 命中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 根节点为p/q，只有一个子树有一个p/q =&gt; 命中</span>
    bool rootHit <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rootHit <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 没有命中，计算当前树中包含的p/q数量</span>
    <span class="token keyword">return</span> left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token punctuation">(</span>rootHit <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 问题转化：在递归过程中找最近祖先节点 =&gt; 在递归过程中记录树中包含p/q的数量</span>
   <span class="token comment">//   1. 左右子树分别包含一个p/q，根节点为最近祖先节点</span>
   <span class="token comment">//   2. 只有一个子树包含了一个p/q，根节点为p/q，根节点为最近祖先节点</span>
   target <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
   <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-com-problems-er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof-jian-zhi-offer-68-i-er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-a"><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</a></h3>
<h2 id="er-cha-shu-zhuan-dan-shuang-xun-huan-lian-biao">二叉树转单、双、循环链表</h2>
<h3 id="a-href-https-leetcode-cn-com-problems-flatten-binary-tree-to-linked-list-114-er-cha-shu-zhan-kai-wei-lian-biao-a"><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">114. 二叉树展开为链表</a></h3>
<blockquote>
<ul>
<li>构建链表技巧：dummyHead+append</li>
<li>在遍历过程中，将节点从树中剥离出来插入链表中；由于剥离会改变节点的left/right指针，因此需要事先保存相关引用</li>
</ul>
</blockquote>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241222214956380.png" alt="image-20241222214956380"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> dummyHead<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> tail<span class="token punctuation">;</span> <span class="token comment">// tail insertion </span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// save left/right subtree</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    <span class="token comment">// insert node into linkedlist</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tail<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>
    tail <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dummyHead <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummyHead<span class="token operator">-&gt;</span>left <span class="token operator">=</span> dummyHead<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tail <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>dummyHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-com-problems-binode-lcci-mian-shi-ti-17-12-bi-node-a"><a href="https://leetcode-cn.com/problems/binode-lcci/">面试题 17.12. BiNode</a></h3>
<h3 id="a-href-https-leetcode-cn-com-problems-er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof-jian-zhi-offer-36-er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-a"><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">剑指 Offer 36. 二叉搜索树与双向链表</a></h3>
<h3 id="a-href-https-leetcode-cn-com-problems-list-of-depth-lcci-mian-shi-ti-04-03-te-ding-shen-du-jie-dian-lian-biao-a"><a href="https://leetcode-cn.com/problems/list-of-depth-lcci/">面试题 04.03. 特定深度节点链表</a></h3>
<h2 id="an-zhao-bian-li-jie-guo-fan-xiang-gou-jian-er-cha-shu">按照遍历结果反向构建二叉树</h2>
<h3 id="a-href-https-leetcode-cn-com-problems-construct-binary-tree-from-preorder-and-inorder-traversal-105-cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-er-cha-shu-a"><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241222221356286.png" alt="image-20241222221356286"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">// 前序区间[i,j] 中序区间[m,n]</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token comment">// 4. 递归终止条件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 构建左右子树，需要确定前序/中序遍历序列中左右子树的区间</span>
    <span class="token comment">// 前序遍历的第一个节点就是根节点，找到该节点在中序遍历中的位置后可确认左右子树的区间</span>
    root<span class="token operator">-&gt;</span>val <span class="token operator">=</span> preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftSize <span class="token operator">=</span> p <span class="token operator">-</span> m<span class="token punctuation">;</span>
    <span class="token comment">// [i, j] =&gt; [i,i] [i+1, i+leftSize] [i+leftSize+1, j]</span>
    <span class="token comment">// [m, n] =&gt; [m, p-1] [p,p] [p+1, n]</span>
    <span class="token comment">// 1. 假设左子树构建好了</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> leftSize<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 假设右子树构建好了</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> i <span class="token operator">+</span> leftSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preorderSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inorderSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorderSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorderSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-com-problems-construct-binary-tree-from-preorder-and-postorder-traversal-889-gen-ju-qian-xu-he-hou-xu-bian-li-gou-zao-er-cha-shu-a"><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. 根据前序和后序遍历构造二叉树</a></h3>
<h3 id="a-href-https-leetcode-cn-com-problems-construct-binary-tree-from-inorder-and-postorder-traversal-106-cong-zhong-xu-yu-hou-xu-bian-li-xu-lie-gou-zao-er-cha-shu-a"><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></h3>
<h3 id="a-href-https-leetcode-cn-com-problems-er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof-jian-zhi-offer-33-er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-a"><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">剑指 Offer 33. 二叉搜索树的后序遍历序列</a></h3>
<h2 id="er-cha-shu-shang-de-zui-chang-lu-jing-he">二叉树上的最长路径和</h2>
<h3 id="a-href-https-leetcode-cn-com-problems-diameter-of-binary-tree-543-er-cha-shu-de-zhi-jing-a"><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></h3>
<h3 id="a-href-https-leetcode-cn-com-problems-er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof-jian-zhi-offer-34-er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-a"><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路径</a></h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241222224520696.png" alt="image-20241222224520696"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */</span>
<span class="token comment">/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */</span>
<span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">[</span><span class="token number">2500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> resultCnt<span class="token punctuation">;</span>
<span class="token keyword">int</span> resultColSize<span class="token punctuation">[</span><span class="token number">2500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> pathSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>pathSize<span class="token punctuation">,</span> <span class="token keyword">int</span> pathSum<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 第一次来到该节点，将节点添加到路径中</span>
    pathSum <span class="token operator">+=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    path<span class="token punctuation">[</span><span class="token operator">*</span>pathSize<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果该节点为叶子节点，判断路径和是否命中target</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pathSum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>resultCnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">takeSnapshot</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultColSize<span class="token punctuation">[</span>resultCnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>pathSize<span class="token punctuation">;</span>
        resultCnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> target<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pathSize<span class="token punctuation">,</span> pathSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第二次来到该节点</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> target<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pathSize<span class="token punctuation">,</span> pathSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第三次来到该节点，在出栈该节点前将其从路径中移除</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">pathTarget</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resultCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pathSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> target<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pathSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> resultCnt<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> resultColSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="a-href-https-leetcode-cn-com-problems-binary-tree-maximum-path-sum-124-er-cha-shu-zhong-de-zui-da-lu-jing-he-a"><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a></h3>
<h1 id="the-end">THE END</h1>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>论时序要求的重要性（移位寄存器控制数码管）</title>
    <url>/2024/11/15/31801.html</url>
    <content><![CDATA[<h1 id="1-wen-ti-bei-jing">1. 问题背景</h1>
<h2 id="ying-jian-bei-jing">硬件背景</h2>
<ul>
<li>移位寄存器：<a href="https://item.szlcsc.com/79848.html?fromZone=s_s__%2274HC595N%22">SN74HC595N</a></li>
<li>两个4位共阳数码管</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/20241115163627.png" alt=""></p>
<h2 id="yi-wei-suo-cun-luo-ji-set-reset">移位/锁存逻辑——set/reset</h2>
<p>在学习GD32F407VET时，将学习STC8实现的数码管模块移植过来，发现了一个很奇怪的问题。其中移位操作的实现如下（封装了对两个串联移位寄存器的移位操作，控制8个数码管中显示哪一个，以及控制数码管显示内容）：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shift</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_DI_PORT<span class="token punctuation">,</span> NIX_DI_PIN<span class="token punctuation">,</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> SET <span class="token operator">:</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>NIX_SCK_PORT<span class="token punctuation">,</span> NIX_SCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>NIX_SCK_PORT<span class="token punctuation">,</span> NIX_SCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rck_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>NIX_RCK_PORT<span class="token punctuation">,</span> NIX_RCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>NIX_RCK_PORT<span class="token punctuation">,</span> NIX_RCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现单独指定某个数码管显示某个数是没有问题的：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 要显示1~8对应的码表</span>
<span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">Int_NixieTube_DisplaySingle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>但是想使用 <code>for</code>控制数码管轮流显示1~8时，就发现显示的内容并不符合预期：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Int_NixieTube_DisplaySingle</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="yi-wei-suo-cun-luo-ji-write">移位/锁存逻辑——write</h2>
<p>但是将其中 <code>gpio_bit</code> 的 <code>set/reset</code>换成 <code>write</code>之后，发现数码管能够按照预期显示了：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shift</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_DI_PORT<span class="token punctuation">,</span> NIX_DI_PIN<span class="token punctuation">,</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> SET <span class="token operator">:</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_SCK_PORT<span class="token punctuation">,</span> NIX_SCK_PIN<span class="token punctuation">,</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_SCK_PORT<span class="token punctuation">,</span> NIX_SCK_PIN<span class="token punctuation">,</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rck_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_RCK_PORT<span class="token punctuation">,</span> NIX_RCK_PIN<span class="token punctuation">,</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_RCK_PORT<span class="token punctuation">,</span> NIX_RCK_PIN<span class="token punctuation">,</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__NOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看这些函数的实现：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> gpio_periph<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> pin<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">GPIO_BOP</span><span class="token punctuation">(</span>gpio_periph<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>pin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> gpio_periph<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> pin<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">GPIO_BC</span><span class="token punctuation">(</span>gpio_periph<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>pin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> gpio_periph<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> pin<span class="token punctuation">,</span> bit_status bit_value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>RESET <span class="token operator">!=</span> bit_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">GPIO_BOP</span><span class="token punctuation">(</span>gpio_periph<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>pin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">GPIO_BC</span><span class="token punctuation">(</span>gpio_periph<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>pin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现 <code>write</code>只不过将 <code>set/reset</code>包成了一个函数，唯一不同的就是多了一个 <code>if</code>判断。</p>
<p>但是，一个<code>if</code> 的耗时又能对程序产生什么影响呢？我百思不得其解。</p>
<h1 id="2-shi-xu-yao-qiu-yin-fa-de-xie-an">2. 时序要求引发的血案</h1>
<h2 id="xiao-xiao-if-an-cang-xuan-ji">小小if暗藏玄机</h2>
<p>在各种 <code>Google, GPT</code>之后，结合代码上下文，发现代码中使用了 <code>nop</code>来增加时延，再结合移位寄存器需要根据我们通过GPIO发送的SRCLK（移位时钟）、RCLK（锁存时钟）的上升沿来进行移位操作和锁存操作（将移位寄存器更新到锁存寄存器 storage register）。</p>
<p>我设置的GD32F407的主频是168MHz，这个比STC8时的24MHz还是要快几倍的，计算一下<code>nop</code>对应一个时钟周期的时间为 <code>1/168MHz</code>约为 <code>5.95ns</code>、<code>1/24MHz</code>约为 <code>41.67ns</code>。</p>
<p>这样看来，一个 <code>if</code>判断还真有可能引发了血案，其所消耗的时钟周期（增加的时延）可能正好满足了移位寄存器的<strong>时序要求</strong>，从而使得数码管能够正常显示。</p>
<h2 id="shu-ju-shou-ce-bu-ke-shao">数据手册不可少</h2>
<p>在想到可能时时延导致的问题后，不妨看一下芯片对应的官方手册，看能否找到答案。</p>
<p>这里要注意的是，一定要找与芯片型号、品牌一致的：</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241115170556369.png" alt="image-20241115170556369"></p>
<h2 id="timing-requirements">Timing Requirements</h2>
<p>这里我们主要看时序要求（Timing Requirements ）相关的章节</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241115170729345.png" alt="image-20241115170729345"></p>
<h3 id="set-up-time">Set-up time</h3>
<p>其中描述了，我们在使用串行信号线 <code>SER</code>、移位寄存器时钟线 <code>SRCLK</code>、锁存器时钟线 <code>RCLK</code> 来操作 <a href="https://item.szlcsc.com/79848.html?fromZone=s_s__%2274HC595N%22">SN74HC595N</a> 时，需要的准备时间，例如</p>
<h4 id="ser-before-srclk">SER before SRCLK↑</h4>
<p>在操作SRCLK上升沿将SER存入移位寄存器之前，SER应该预备的时间，以125ns为例，伪代码如下</p>
<pre class="line-numbers language-none"><code class="language-none">set SER
wait 125ns
SRCLK = 0;
SRCLK = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="srclk-before-rclk">SRCLK↑ before RCLK↑</h4>
<p>在操作完所有的移位后，将移位寄存器更新到锁存寄存器（即更新到电路，控制数码管的段选和片选），需要操作RCLK上升沿。</p>
<p>该参数规定了，RCLK上升沿应该与SRCLK上升沿保持的时间间隔</p>
<h3 id="pulse-duration">Pulse duration</h3>
<p>其中描述了SRCLK、RCLK被置位后应该持续一段时间，所以我们还需要在上述基础上增加两个延时（以100ns为例）</p>
<pre class="line-numbers language-none"><code class="language-none">set SER
wait 125ns
SRCLK = 0;
wait 100ns
SRCLK = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再加上锁存的操作：</p>
<pre class="line-numbers language-none"><code class="language-none">set SER
wait 125ns
SRCLK = 0;
wait 100ns
SRCLK = 1;

wait 100ns
RCLK = 0;
wait 100ns
RCLK = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="zai-kan-if-he-nop">再看if和nop</h2>
<p>之前对于时序控制的理解并不深刻，简单的以为使用 <code>nop</code>停顿一下就好。现在看来，无论是不同主频对应的 <code>nop</code>时延不同，还是 <code>if</code>耗时也能影响数码管的生死，都在提醒我们时序控制不可小觑。</p>
<p>在使用MCU对外围设备/芯片交互</p>
<p>、控制时，一定要严格按照芯片要求的时序控制，结合MCU自身指令耗时来编写程序。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shift</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">gpio_bit_write</span><span class="token punctuation">(</span>NIX_DI_PORT<span class="token punctuation">,</span> NIX_DI_PIN<span class="token punctuation">,</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> SET <span class="token operator">:</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>NIX_SCK_PORT<span class="token punctuation">,</span> NIX_SCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>NIX_SCK_PORT<span class="token punctuation">,</span> NIX_SCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rck_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">gpio_bit_reset</span><span class="token punctuation">(</span>NIX_RCK_PORT<span class="token punctuation">,</span> NIX_RCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_bit_set</span><span class="token punctuation">(</span>NIX_RCK_PORT<span class="token punctuation">,</span> NIX_RCK_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_1us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里宁愿多等一点，也不要让 SN74HC595N 无法准确移位、锁存数据。</p>
]]></content>
      <categories>
        <category>GD32</category>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>GD32</tag>
        <tag>SN74HC595NSR</tag>
        <tag>时序要求</tag>
        <tag>移位寄存器</tag>
      </tags>
  </entry>
  <entry>
    <title>高速通信协议SPI（基于STM32F103）</title>
    <url>/2024/12/08/56962.html</url>
    <content><![CDATA[<h1 id="can-kao-zi-liao">参考资料</h1>
<ul>
<li>STM32F103参考手册：<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx</a></li>
<li>STM32103ZE数据手册：<a href="https://www.st.com/resource/en/datasheet/stm32f103rc.pdf">STM32F103xC, STM32F103xD, STM32F103xE </a></li>
<li><a href="https://docs.rs-online.com/0d6a/0900766b81622f91.pdf">W25Q32JV Datasheet</a></li>
</ul>
<h1 id="spi-gai-shu">SPI概述</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208085758199.png" alt="image-20241208085758199"></p>
<h2 id="wu-li-ceng">物理层</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208085826672.png" alt="image-20241208085826672"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208085922892.png" alt="image-20241208085922892"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090013844.png" alt="image-20241208090013844"></p>
<h2 id="xie-yi-ceng">协议层</h2>
<h3 id="zhu-ji-he-cong-ji-zhi-jian-de-shu-ju-jiao-huan">主机和从机之间的数据交换</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090106193.png" alt="image-20241208090106193"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090214243.png" alt="image-20241208090214243"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090240645.png" alt="image-20241208090240645"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090322157.png" alt="image-20241208090322157"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090347725.png" alt="image-20241208090347725"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208090549989.png" alt="image-20241208090549989"></p>
<h3 id="shi-zhong-de-ji-xing-he-xiang-wei">时钟的极性和相位</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208091011305.png" alt="image-20241208091011305"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208091050562.png" alt="image-20241208091050562"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208091403040.png" alt="STM32参考手册"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208091412303.png" alt="STM32参考手册"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208091524655.png" alt="image-20241208091524655"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208114103130.png" alt="image-20241208114103130"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208114140123.png" alt="image-20241208114140123"></p>
<h1 id="an-li-w-25-q-32">案例-W25Q32</h1>
<h2 id="w-25-q-32-jie-shao">W25Q32介绍</h2>
<p>W25Q32是一种使用SPI通讯协议的<strong>NOR FLASH</strong>存储器，它的CLK/DI/DO引脚分别连接到了STM32对应的SPI引脚SCK/MOSI/MISO上，其中STM32的NSS引脚虽然是其片上SPI外设的硬件引脚，但实际上后面的程序只是把它当成一个普通的GPIO，使用软件的方式控制NSS信号，所以在SPI的硬件设计中，NSS可以随便选择普通的GPIO，不必纠结于选择硬件NSS信号。</p>
<p>FLASH 芯片中还有WP和HOLD引脚。WP引脚可控制写保护功能，当该引脚为低电平时，禁止写入数据。我们直接接电源，不使用写保护功能。HOLD引脚可用于暂停通讯，该引脚为低电平时，通讯暂停，数据输出引脚输出高阻抗状态，时钟和数据输入引脚无效。我们直接接电源，不使用通讯暂停功能。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208132401090.png" alt="image-20241208132401090"></p>
<p>（1）这个flash芯片只支持<strong>模式0和模式3</strong>。</p>
<p>（2）写的时候必须是先擦除，擦除后再写入。</p>
<p>（3）移位是高位优先。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208132526999.png" alt="image-20241208132526999"></p>
<h2 id="w-25-q-32-kuang-tu">W25Q32框图</h2>
<p>4M-byte存储空间，所需寻址bit为22，为了8bit对齐，采用24bit编址</p>
<ul>
<li>[23:16]：其中高2位没有用，低6位用于Block寻址，对应64个Block</li>
<li>[15:12]：4个bit用于Sector寻址，对应16个Sector</li>
<li>[11:8]：4个bit用于Page寻址，对应一个Sector中的16个Page</li>
<li>[7:0]：8个bit用于页内字节寻址，对应一个Page中的256个字节</li>
</ul>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208132710140.png" alt="image-20241208132710140"></p>
<h2 id="xie-ru-cao-zuo-zhu-yi-shi-xiang">写入操作注意事项</h2>
<p>（1）写入操作前，必须先进行写使能。</p>
<p>（2）每个数据位只能由1改写为0，不能由0改写为1。</p>
<p>（3）写入数据前必须先檫除，檫除后，所有数据位变为1。擦除必须按最小擦除单元进行。</p>
<p>（4）连续写入多字节时，最多写入一页的数据，超过页尾位置的数据，会回到页首覆盖写入。</p>
<p>（5）写入操作结束后，芯片进入忙状态，不响应新的读写操作。</p>
<h3 id="xie-shi-neng">写使能</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208140636281.png" alt="image-20241208140636281"></p>
<h3 id="ye-xie">页写</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208142927822.png" alt="image-20241208142927822"></p>
<h3 id="mang-zhuang-tai">忙状态</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208141022091.png" alt="image-20241208141022091"></p>
<h2 id="du-qu-cao-zuo-zhu-yi-shi-xiang">读取操作注意事项</h2>
<p>（1）直接调用读取时序，无需读使能，无需额外操作，没有页的限制。</p>
<p>（2）读取操作结束后不会进入忙状态，但不能在忙状态时读取。</p>
<h2 id="dian-qi-te-xing-amp-shi-xu-yao-qiu-fen-xi">电气特性&amp;时序要求分析</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208144515657.png" alt="W25Q32"></p>
<p>如图3.3V工作电压条件下，SCK时钟频率最高可达133MHz（非03h指令，03h指令则为50MHz）。对于STM32F103而言，GPIO输出的最大频率为50MHz（如下图）。</p>
<p>其他时序要求参数大都在10ns以内，而STM32F103的主频为72MHz，时钟周期约为13.8ns，因此大多数情况下都不需要刻意延时。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208144853915.png" alt="STM32F103数据手册"></p>
<p>对于擦除和页写相关操作，则需要增加一定的延时来等待芯片内部完成相应的操作。</p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208145935374.png" alt="image-20241208145935374"></p>
<h2 id="shi-yan-du-qu-han-shang-id-he-she-bei-id">实验-读取厂商ID和设备ID</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208143740884.png" alt="image-20241208143740884"><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208144153347.png" alt="image-20241208144153347"></p>
<h3 id="spi-h">spi.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SPI_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SPI_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token comment">// CS PC13</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOC<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR13<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOC<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR13<span class="token punctuation">)</span></span></span>

<span class="token comment">// SCK PA5</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCK_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOA<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR5<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCK_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOA<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR5<span class="token punctuation">)</span></span></span>

<span class="token comment">// MOSI PA7</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOSI_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOA<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR7<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOSI_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOA<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR7<span class="token punctuation">)</span></span></span>


<span class="token comment">// MISO PA6</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MISO_READ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>GPIOA<span class="token operator">-&gt;</span>IDR <span class="token operator">&amp;</span> GPIO_IDR_IDR6<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SPI_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="spi-c">spi.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPCEN<span class="token punctuation">;</span>

    <span class="token comment">// CS-PC13 和 SCK-PA5，MOSI-PA7 通用推挽 MODE=11 CNF=00</span>
    GPIOC<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE13<span class="token punctuation">;</span>
    GPIOC<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF13<span class="token punctuation">;</span>

    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE5<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF5<span class="token punctuation">;</span>

    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE7<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF7<span class="token punctuation">;</span>

    <span class="token comment">// MISO-PA6 浮空输入 MODE=00, CNF=01</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_MODE6<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF6_0<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF6_1<span class="token punctuation">;</span>

    <span class="token comment">// SPI模式0（极性=0，相位=0） 空闲状态 CS拉高（低电平使能），SCK拉低</span>
    CS_HIGH<span class="token punctuation">;</span>
    SCK_LOW<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> CS_LOW<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> CS_HIGH<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> readByte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 主设备准备数据到输出线MOSI上</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataByte <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            MOSI_HIGH<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            MOSI_LOW<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dataByte <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 主设备拉高SCK（双方发送数据阶段），让从设备读取数据</span>
        SCK_HIGH<span class="token punctuation">;</span>
        <span class="token comment">// 主设备读取从设备的数据</span>
        readByte <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>MISO_READ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            readByte <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 主设备拉低SCK（双方准备数据阶段），让从设备准备下一个数据</span>
        SCK_LOW<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> readByte<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="w-25-q-32-h">w25q32.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__W25Q32_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__W25Q32_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>manufactureID<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>deviceID<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __W25Q32_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="w-25-q-32-c">w25q32.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w25q32.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>manufactureId<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>deviceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 片选使能</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发送Read JEDEC ID指令9Fh，读取生产厂商和设备ID</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x9F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取从设备响应数据</span>
    <span class="token operator">*</span>manufactureId <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>deviceId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF00</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>deviceId <span class="token operator">|=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00FF</span><span class="token punctuation">;</span>

    <span class="token comment">// 片选失能</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="logger">logger</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208163556410.png" alt="image-20241208163556410"></p>
<h3 id="luo-ji-fen-xi">逻辑分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208150354261.png" alt="image-20241208150354261"></p>
<h2 id="shi-yan-ca-chu-amp-ye-xie-amp-lian-xu-du">实验-擦除&amp;页写&amp;连续读</h2>
<h3 id="deng-dai-busy-zhuang-tai">等待BUSY状态</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208155727798.png" alt="image-20241208155727798"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208155924081.png" alt="image-20241208155924081"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送读取状态寄存器指令</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 轮询接收从设备响应的状态字节，直到其中的最低位为0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ca-chu-shan-qu">擦除扇区</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208164659395.png" alt="image-20241208164659395"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行擦除前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ye-xie-1">页写</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span>
                      <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行页写前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> innerAddr<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送待写入数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lian-xu-du">连续读</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208164826767.png" alt="image-20241208164826767"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span>
                      <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取数据前等待BUSY状态</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> innerAddr<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送待写入数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="wan-zheng-dai-ma">完整代码</h3>
<h4 id="w-25-q-32-h-1">w25q32.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__W25Q32_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__W25Q32_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>manufactureID<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>deviceID<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __W25Q32_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="w-25-q-32-h-2">w25q32.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w25q32.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>manufactureId<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>deviceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 片选使能</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发送Read JEDEC ID指令9Fh，读取生产厂商和设备ID</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x9F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取从设备响应数据</span>
    <span class="token operator">*</span>manufactureId <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>deviceId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF00</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>deviceId <span class="token operator">|=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00FF</span><span class="token punctuation">;</span>

    <span class="token comment">// 片选失能</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送读取状态寄存器指令</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 轮询接收从设备响应的状态字节，直到其中的最低位为0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行擦除前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span>
                      <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行页写前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> innerAddr<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送待写入数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span>
                      <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取数据前等待BUSY状态</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> innerAddr<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送待写入数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="main-c">main.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w25q32.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint8_t</span> manufactureId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> deviceId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>manufactureId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>deviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LOG_DEBUG("manufacture = %#x, deviceId = %#x", manufactureId, deviceId)</span>

    <span class="token comment">// 擦除扇区（第63个block，第2个sector）</span>
    <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 向 block-63 sector-2 page-10 addr-0写入数据</span>
    <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"12345678"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buf = %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// uint8_t buf[10] = {0};</span>
    <span class="token comment">// // 从 block-63 sector-2 page-10 addr-2 读取数据</span>
    <span class="token comment">// W25Q32_ReadBytes(63, 2, 10, 2, (uint8_t *)buf, 6);</span>
    <span class="token comment">// LOG_DEBUG("buf = %s", buf);</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="luo-ji-fen-xi-1">逻辑分析</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208171056385.png" alt="image-20241208171056385"></p>
<h1 id="stm-32-spi-wai-she">STM32 SPI外设</h1>
<h2 id="jian-jie">简介</h2>
<p>STM32 的 SPI 外设可用作通讯的主机及从机，支持最高的 SCK 时钟频率为 fpclk/2 （STM32F103 型号的芯片默认fpclk1为36MHz，fpclk2为72MHz。），完全支持 SPI 协议的 4 种模式，数据帧长度可设置为 8 位或 16 位，可设置数据 MSB 先行或 LSB 先行。它还支持双线全双工、单线双向以及单线模式。</p>
<p>STM32F103系列提供了3个SPI，SPI1挂在APB2总线，SPI2/3挂在APB1总线。</p>
<p>用的比较多还是<strong>双线全双工模式</strong>。</p>
<h2 id="kuang-tu">框图</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208170545574.png" alt="image-20241208170545574"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208170738650.png" alt="image-20241208170738650"></p>
<h3 id="nss-gong-neng-shuo-ming">NSS功能说明</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208191830342.png" alt="image-20241208191830342"></p>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208191904550.png" alt="image-20241208191904550"></p>
<h2 id="zhu-she-bei-mo-shi-pei-zhi-liu-cheng-ji-cun-qi-ban-ben">主设备模式配置流程（寄存器版本）</h2>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208180028612.png" alt="image-20241208180028612"></p>
<h3 id="spi-h-1">spi.h</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SPI_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SPI_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span>

<span class="token comment">// CS PC13</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_HIGH</span> <span class="token expression"><span class="token punctuation">(</span>GPIOC<span class="token operator">-&gt;</span>ODR <span class="token operator">|=</span> GPIO_ODR_ODR13<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CS_LOW</span> <span class="token expression"><span class="token punctuation">(</span>GPIOC<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_ODR_ODR13<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SPI_H__ */</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="spi-c-1">spi.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span>

<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPAEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_IOPCEN<span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">|=</span> RCC_APB2ENR_SPI1EN<span class="token punctuation">;</span>

    <span class="token comment">// CS-PC13 通用推挽 MODE=11 CNF=00</span>
    GPIOC<span class="token operator">-&gt;</span>CRH <span class="token operator">|=</span> GPIO_CRH_MODE13<span class="token punctuation">;</span>
    GPIOC<span class="token operator">-&gt;</span>CRH <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRH_CNF13<span class="token punctuation">;</span>

    <span class="token comment">// SCK-PA5，MOSI-PA7 复用推挽 MODE=11 CNF=10</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE5<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF5_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF5_0<span class="token punctuation">;</span>

    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_MODE7<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF7_1<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF7_0<span class="token punctuation">;</span>

    <span class="token comment">// MISO-PA6 浮空输入 MODE=00, CNF=01</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_MODE6<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">|=</span> GPIO_CRL_CNF6_0<span class="token punctuation">;</span>
    GPIOA<span class="token operator">-&gt;</span>CRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>GPIO_CRL_CNF6_1<span class="token punctuation">;</span>

    <span class="token comment">// 波特率配置为PCLK/4 即 72M/4=18M =&gt; 001</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_BR<span class="token punctuation">;</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_BR_0<span class="token punctuation">;</span>
    <span class="token comment">// SPI模式0（时钟极性=0，相位=0）</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_CPOL<span class="token punctuation">;</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_CPHA<span class="token punctuation">;</span>
    <span class="token comment">// 数据帧格式 8bit</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_DFF<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">&amp;=</span> <span class="token operator">~</span>SPI_CR1_LSBFIRST<span class="token punctuation">;</span>
    <span class="token comment">// NSS为当前MCU作为从设备时的片选信号输入，主模式下，要么硬件上将该引脚拉高，要么通过SSM和SSI将其强制置1</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_SSM<span class="token punctuation">;</span> <span class="token comment">// 将NSS输入配置为软件控制</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_SSI<span class="token punctuation">;</span> <span class="token comment">// 通过SSI=1将NSS强制拉高</span>
    <span class="token comment">// 设置主模式</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_MSTR<span class="token punctuation">;</span>
    <span class="token comment">// 使能SPI外设</span>
    SPI1<span class="token operator">-&gt;</span>CR1 <span class="token operator">|=</span> SPI_CR1_SPE<span class="token punctuation">;</span>

    <span class="token comment">// SPI模式0（极性=0，相位=0） 空闲状态 CS拉高（低电平使能），SCK拉低</span>
    CS_HIGH<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> CS_LOW<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> CS_HIGH<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待发送缓冲区为空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SPI1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> SPI_SR_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 发送数据</span>
    SPI1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> dataByte<span class="token punctuation">;</span>
    <span class="token comment">// 等待接收缓冲区非空</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SPI1<span class="token operator">-&gt;</span>SR <span class="token operator">&amp;</span> SPI_SR_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接收数据</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>SPI1<span class="token operator">-&gt;</span>DR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-1">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w25q32.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint8_t</span> manufactureId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> deviceId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>manufactureId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>deviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"manufacture = %#x, deviceId = %#x"</span><span class="token punctuation">,</span> manufactureId<span class="token punctuation">,</span> deviceId<span class="token punctuation">)</span>

    <span class="token comment">// 擦除扇区（第63个block，第2个sector）</span>
    <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 向 block-63 sector-2 page-10 addr-0写入数据</span>
    <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"12345678"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buf = %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hal-ku-shi-xian">HAL库实现</h2>
<h3 id="spi-pei-zhi">SPI配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208201837487.png" alt="image-20241208201837487"></p>
<h3 id="pian-xuan-yin-jiao-pei-zhi">片选引脚配置</h3>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208201927169.png" alt="image-20241208201927169"></p>
<h3 id="shi-li-dai-ma">示例代码</h3>
<h4 id="spi-h-2">spi.h</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN Prototypes */</span>
<span class="token keyword">void</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END Prototypes */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="spi-c-2">spi.c</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>CS_GPIO_Port<span class="token punctuation">,</span> CS_Pin<span class="token punctuation">,</span> GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>CS_GPIO_Port<span class="token punctuation">,</span> CS_Pin<span class="token punctuation">,</span> GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dataByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">HAL_SPI_TransmitReceive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hspi1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dataByte<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-c-2">main.c</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Initialize all configured peripherals */</span>
<span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_SPI1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token class-name">uint8_t</span> manufactureId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> deviceId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>manufactureId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>deviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"manufacture = %#x, deviceId = %#x\n"</span><span class="token punctuation">,</span> manufactureId<span class="token punctuation">,</span> deviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 擦除扇区（第63个block，第2个sector）</span>
  <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 向 block-63 sector-2 page-10 addr-0写入数据</span>
  <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"12345678"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* USER CODE END 2 */</span>

<span class="token comment">/* Infinite loop */</span>
<span class="token comment">/* USER CODE BEGIN WHILE */</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE END WHILE */</span>

  <span class="token comment">/* USER CODE BEGIN 3 */</span>
<span class="token punctuation">}</span>
<span class="token comment">/* USER CODE END 3 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="an-li-kua-ye-xie-ru">案例-跨页写入</h1>
<p><img src="https://hexo-blog-anwen.oss-cn-beijing.aliyuncs.com/image/image-20241208221856087.png" alt="image-20241208221856087"></p>
<h2 id="spi-c-3">spi.c</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w25q32.h"</span></span>

<span class="token keyword">void</span> <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>manufactureId<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>deviceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 片选使能</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发送Read JEDEC ID指令9Fh，读取生产厂商和设备ID</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x9F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取从设备响应数据</span>
    <span class="token operator">*</span>manufactureId <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>deviceId <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF00</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>deviceId <span class="token operator">|=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00FF</span><span class="token punctuation">;</span>

    <span class="token comment">// 片选失能</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送读取状态寄存器指令</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 轮询接收从设备响应的状态字节，直到其中的最低位为0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行擦除前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span>
                      <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行页写前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> innerAddr<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送待写入数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_WriteAddr</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行页写前必须等待BUSY状态和开启写使能</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送待写入数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">W25Q32_WriteDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadBytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> block<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> sector<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> page<span class="token punctuation">,</span>
                      <span class="token class-name">uint8_t</span> innerAddr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取数据前等待BUSY状态</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送24bit地址数据，高8位[23:16]为block地址，[15:12]为sector地址</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sector <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> innerAddr<span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 接收读取的数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">W25Q32_ReadFromAddr</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取数据前等待BUSY状态</span>
    <span class="token function">W25Q32_WaitNotBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">SPI_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 高位优先，逐字节发送24bit</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 接收读取的数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">SPI_SwapByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">SPI_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="main-c-3">main.c</h2>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"logger.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"uart.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"w25q32.h"</span></span>

<span class="token keyword">void</span> <span class="token function">uart1_received_callback</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

    <span class="token class-name">uint8_t</span> manufactureId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> deviceId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_ReadID</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>manufactureId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>deviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"manufacture = %#x, deviceId = %#x"</span><span class="token punctuation">,</span> manufactureId<span class="token punctuation">,</span> deviceId<span class="token punctuation">)</span>

    <span class="token comment">// // 擦除扇区（第63个block，第2个sector）</span>
    <span class="token comment">// W25Q32_SectorErase(63, 2);</span>
    <span class="token comment">// // 向 block-63 sector-2 page-10 addr-0写入数据</span>
    <span class="token comment">// W25Q32_WritePage(63, 2, 10, 0, (uint8_t *)"12345678", 8);</span>
    <span class="token comment">// uint8_t buf[10] = {0};</span>
    <span class="token comment">// W25Q32_ReadBytes(63, 2, 10, 1, (uint8_t *)buf, 7);</span>
    <span class="token comment">// LOG_DEBUG("buf = %s", buf);</span>

    <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token number">261</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">260</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"data = %s"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token number">0x32f680</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_SectorErase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">uint16_t</span> size1 <span class="token operator">=</span> <span class="token number">0xFF</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_WriteAddr</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">uint16_t</span> size2 <span class="token operator">=</span> <span class="token number">260</span> <span class="token operator">-</span> size1<span class="token punctuation">;</span>
    <span class="token function">W25Q32_WritePage</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data <span class="token operator">+</span> size1<span class="token punctuation">,</span> size2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">W25Q32_ReadFromAddr</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"buf = %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>STM32</category>
        <category>协议</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>SPI</tag>
      </tags>
  </entry>
</search>
